I"o<p>This post will discuss all the terminologies behind <em>Public Key Infrastructure (PKI)</em>.
It is essential to have the knowledge on <em>Public Key Cryptography</em> ,<em>Encryption</em> and <em>Digital Signing</em> as the prequisition.</p>

<h1 id="what-is-pki">WHAT IS PKI?</h1>
<p><em>Public Key Infrastructure (PKI)</em> is a system on which every connection that requires to establish and manage <em>Public Key
Encryption</em> depends. This procedure done by what we call <em>X.509 certificates</em>.</p>
<h1 id="why-pki-is-important">WHY PKI IS IMPORTANT?</h1>
<p>While public-key encryption solves the problem of the data’s legibility by everyone, PKI adds authentication mechanism on top of it.
Combination of those two mechanism together makes online communication becomes much more trustworthy.</p>
<h1 id="real-life-scenario">REAL LIFE SCENARIO</h1>

<p>Let us examine this example:</p>

<ul>
  <li><strong>John</strong>: Hey Robert, can you send those confidential data to Ashley?</li>
  <li><strong>Robert</strong>: Sure, but who is she?</li>
  <li><strong>John</strong>: She is the HR manager of BBSec.</li>
  <li><strong>Robert</strong>: All right.</li>
</ul>

<p><br />For Robert to send any confidential data to Ashley, he must find Ashley’s public-key. However, searching for her
public-key on the web would not be smart since there could be many other public-keys for other Ashleys. How can Robert
be confident that he uses the correct public-key from the Ashley he wants to communicate?
<br /><br />To solve this problem, what we call <em>x509 certificates</em> comes into play.</p>

<h1 id="what-is-a-x509-certificate">WHAT IS A X.509 CERTIFICATE?</h1>

<p><em>X.509</em> is a standard procedure for public-key certificates. They are digital documents that validate the integrity of the 
association between identities such as organizations, individuals or websites, and their cryptographic key pairs.
<br /><br />An_X.509_ certificate essentially contains those:</p>
<ul>
  <li>Identity’s name, address, email,etc.</li>
  <li>Identity’s public-key.</li>
  <li>The <em>Issuer</em> of the certificate.</li>
  <li>The <em>encrypted hash</em> of the certificate.</li>
</ul>

<p>If Robert can find a certificate that binds Ashley’s name with her company BBSec, he can confidently tell that it is the correct
certificate he was looking for.
<br /><br />There are two more fields above which are <em>Issuer</em> and <em>encrypted hash</em>. We will come to that later.</p>

<h1 id="certificate-authorities">CERTIFICATE AUTHORITIES</h1>

<p>However, what if Robert finds more than one certificate claiming to have Ashley’s public key? Now which one is the right one?
I can easily create a certificate identical to Ashley’s and put my public-key in it
We need a mechanism to verify that the certificate assigned to a specific identity is one of its kind.
<br /><br />We have what we call Certificate Authorities (CAs) to solve this problem.  There are dozens of organizations that we 
trust to be authoritative. All operating systems and browsers come with built-in configured CAs. If a CA claims
a certificate is authentic, we will believe it. 
<br /><br />However, how does a CA indicate that the certificate in question is authentic?
By <em>signing</em> it digitally. The signature of the CA must be checked to verify the authenticity of a certificate.
<br /><br /> In the definition of an X.509 certificate above, there were two more fields left unexplained. <em>Issuer</em> and the <em>Encrypted Hash</em>.</p>
<ul>
  <li>Issuer: The name of the organization (CA) that issued the certificate.</li>
  <li>Encrypted Hash: the digital signature of the CA.</li>
</ul>

<p>Continuing the scenario above:</p>

<ol>
  <li>Robert obtains certificate A that claims to be Ashley’s certificate and issued by X.</li>
  <li>For Robert to verify that certificate A is authentic by verifying CA’s signature, he gets the public key of X from somewhere, then
decrypts the <em>encrypted hash</em>, the digital signature, inside of certificate A to see if it matches.</li>
</ol>

<p>The question is that Robert just downloaded X’s certificate from somewhere, so how can he tell that it is also authentic? By looking
at the <em>Issuer</em> of X, which is Y. Now, he must find the Y certificate to verify the signature of certificate X. We can continue
to do that endlessly. It becomes an endless loop, and we have to stop at one point.</p>
:ET